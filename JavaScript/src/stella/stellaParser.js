// Generated from stella/stellaParser.g4 by ANTLR 4.12.0
// jshint ignore: start
import antlr4 from 'antlr4';
import stellaParserListener from './stellaParserListener.js';
const serializedATN = [4,1,73,931,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,
1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,
1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,
14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,
1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,
24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,
1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,
34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,
1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,
43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,
1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,
52,1,52,3,52,367,8,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,
1,55,1,55,1,55,3,55,382,8,55,1,56,1,56,1,56,1,56,1,56,5,56,389,8,56,10,56,
12,56,392,9,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,412,8,57,1,58,1,58,1,58,5,58,417,8,
58,10,58,12,58,420,9,58,1,59,1,59,1,60,1,60,1,60,1,60,1,60,5,60,429,8,60,
10,60,12,60,432,9,60,1,61,1,61,1,62,1,62,1,62,5,62,439,8,62,10,62,12,62,
442,9,62,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,3,64,454,8,64,
1,65,1,65,1,65,3,65,459,8,65,1,66,1,66,1,66,3,66,464,8,66,1,67,1,67,1,68,
1,68,1,68,1,68,1,68,3,68,473,8,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,
1,70,1,70,3,70,485,8,70,1,71,1,71,1,71,3,71,490,8,71,1,72,1,72,1,72,3,72,
495,8,72,1,73,1,73,1,73,3,73,500,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,549,8,74,1,75,
1,75,1,75,1,75,1,75,1,75,3,75,557,8,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,
1,77,1,77,3,77,568,8,77,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,3,79,
579,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,589,8,80,1,81,1,81,
1,81,1,81,1,81,1,81,3,81,597,8,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,617,8,82,1,83,1,83,
1,83,1,83,1,84,1,84,1,84,1,84,1,84,3,84,628,8,84,1,85,1,85,1,85,1,85,1,85,
1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,
85,1,85,1,85,1,85,1,85,1,85,3,85,655,8,85,1,86,1,86,1,86,1,86,1,86,1,86,
1,86,3,86,664,8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,
87,3,87,692,8,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
1,87,5,87,706,8,87,10,87,12,87,709,9,87,1,88,1,88,1,88,1,88,1,88,1,88,1,
88,1,88,1,88,1,88,1,88,1,88,5,88,723,8,88,10,88,12,88,726,9,88,1,89,1,89,
1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,
89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,
89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,
89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,
816,8,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,5,89,829,
8,89,10,89,12,89,832,9,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,
90,843,8,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
3,91,857,8,91,1,92,1,92,1,92,1,92,1,92,3,92,864,8,92,1,93,1,93,1,93,1,93,
1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,883,
8,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,893,8,94,1,95,1,95,1,95,
1,95,1,95,1,95,3,95,901,8,95,1,96,1,96,1,97,1,97,1,97,1,98,1,98,1,98,1,98,
1,98,1,98,3,98,914,8,98,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,
3,100,925,8,100,1,101,1,101,1,101,1,101,1,101,0,7,112,116,120,124,174,176,
178,102,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
0,0,930,0,204,1,0,0,0,2,207,1,0,0,0,4,210,1,0,0,0,6,213,1,0,0,0,8,216,1,
0,0,0,10,219,1,0,0,0,12,222,1,0,0,0,14,225,1,0,0,0,16,228,1,0,0,0,18,231,
1,0,0,0,20,234,1,0,0,0,22,237,1,0,0,0,24,240,1,0,0,0,26,243,1,0,0,0,28,246,
1,0,0,0,30,249,1,0,0,0,32,252,1,0,0,0,34,255,1,0,0,0,36,258,1,0,0,0,38,261,
1,0,0,0,40,264,1,0,0,0,42,267,1,0,0,0,44,270,1,0,0,0,46,273,1,0,0,0,48,276,
1,0,0,0,50,279,1,0,0,0,52,282,1,0,0,0,54,285,1,0,0,0,56,288,1,0,0,0,58,291,
1,0,0,0,60,294,1,0,0,0,62,297,1,0,0,0,64,300,1,0,0,0,66,303,1,0,0,0,68,306,
1,0,0,0,70,309,1,0,0,0,72,312,1,0,0,0,74,315,1,0,0,0,76,318,1,0,0,0,78,321,
1,0,0,0,80,324,1,0,0,0,82,327,1,0,0,0,84,330,1,0,0,0,86,333,1,0,0,0,88,336,
1,0,0,0,90,339,1,0,0,0,92,342,1,0,0,0,94,345,1,0,0,0,96,348,1,0,0,0,98,351,
1,0,0,0,100,354,1,0,0,0,102,357,1,0,0,0,104,366,1,0,0,0,106,368,1,0,0,0,
108,372,1,0,0,0,110,381,1,0,0,0,112,383,1,0,0,0,114,411,1,0,0,0,116,413,
1,0,0,0,118,421,1,0,0,0,120,423,1,0,0,0,122,433,1,0,0,0,124,435,1,0,0,0,
126,443,1,0,0,0,128,453,1,0,0,0,130,458,1,0,0,0,132,463,1,0,0,0,134,465,
1,0,0,0,136,472,1,0,0,0,138,474,1,0,0,0,140,484,1,0,0,0,142,489,1,0,0,0,
144,494,1,0,0,0,146,499,1,0,0,0,148,548,1,0,0,0,150,556,1,0,0,0,152,558,
1,0,0,0,154,567,1,0,0,0,156,569,1,0,0,0,158,578,1,0,0,0,160,588,1,0,0,0,
162,596,1,0,0,0,164,616,1,0,0,0,166,618,1,0,0,0,168,627,1,0,0,0,170,654,
1,0,0,0,172,663,1,0,0,0,174,691,1,0,0,0,176,710,1,0,0,0,178,815,1,0,0,0,
180,842,1,0,0,0,182,856,1,0,0,0,184,863,1,0,0,0,186,882,1,0,0,0,188,892,
1,0,0,0,190,900,1,0,0,0,192,902,1,0,0,0,194,904,1,0,0,0,196,913,1,0,0,0,
198,915,1,0,0,0,200,924,1,0,0,0,202,926,1,0,0,0,204,205,3,102,51,0,205,206,
5,0,0,1,206,1,1,0,0,0,207,208,3,104,52,0,208,209,5,0,0,1,209,3,1,0,0,0,210,
211,3,106,53,0,211,212,5,0,0,1,212,5,1,0,0,0,213,214,3,108,54,0,214,215,
5,0,0,1,215,7,1,0,0,0,216,217,3,110,55,0,217,218,5,0,0,1,218,9,1,0,0,0,219,
220,3,112,56,0,220,221,5,0,0,1,221,11,1,0,0,0,222,223,3,114,57,0,223,224,
5,0,0,1,224,13,1,0,0,0,225,226,3,116,58,0,226,227,5,0,0,1,227,15,1,0,0,0,
228,229,3,118,59,0,229,230,5,0,0,1,230,17,1,0,0,0,231,232,3,120,60,0,232,
233,5,0,0,1,233,19,1,0,0,0,234,235,3,122,61,0,235,236,5,0,0,1,236,21,1,0,
0,0,237,238,3,124,62,0,238,239,5,0,0,1,239,23,1,0,0,0,240,241,3,126,63,0,
241,242,5,0,0,1,242,25,1,0,0,0,243,244,3,128,64,0,244,245,5,0,0,1,245,27,
1,0,0,0,246,247,3,130,65,0,247,248,5,0,0,1,248,29,1,0,0,0,249,250,3,132,
66,0,250,251,5,0,0,1,251,31,1,0,0,0,252,253,3,134,67,0,253,254,5,0,0,1,254,
33,1,0,0,0,255,256,3,136,68,0,256,257,5,0,0,1,257,35,1,0,0,0,258,259,3,138,
69,0,259,260,5,0,0,1,260,37,1,0,0,0,261,262,3,140,70,0,262,263,5,0,0,1,263,
39,1,0,0,0,264,265,3,142,71,0,265,266,5,0,0,1,266,41,1,0,0,0,267,268,3,144,
72,0,268,269,5,0,0,1,269,43,1,0,0,0,270,271,3,146,73,0,271,272,5,0,0,1,272,
45,1,0,0,0,273,274,3,148,74,0,274,275,5,0,0,1,275,47,1,0,0,0,276,277,3,150,
75,0,277,278,5,0,0,1,278,49,1,0,0,0,279,280,3,152,76,0,280,281,5,0,0,1,281,
51,1,0,0,0,282,283,3,154,77,0,283,284,5,0,0,1,284,53,1,0,0,0,285,286,3,156,
78,0,286,287,5,0,0,1,287,55,1,0,0,0,288,289,3,158,79,0,289,290,5,0,0,1,290,
57,1,0,0,0,291,292,3,160,80,0,292,293,5,0,0,1,293,59,1,0,0,0,294,295,3,162,
81,0,295,296,5,0,0,1,296,61,1,0,0,0,297,298,3,164,82,0,298,299,5,0,0,1,299,
63,1,0,0,0,300,301,3,166,83,0,301,302,5,0,0,1,302,65,1,0,0,0,303,304,3,168,
84,0,304,305,5,0,0,1,305,67,1,0,0,0,306,307,3,170,85,0,307,308,5,0,0,1,308,
69,1,0,0,0,309,310,3,172,86,0,310,311,5,0,0,1,311,71,1,0,0,0,312,313,3,174,
87,0,313,314,5,0,0,1,314,73,1,0,0,0,315,316,3,176,88,0,316,317,5,0,0,1,317,
75,1,0,0,0,318,319,3,178,89,0,319,320,5,0,0,1,320,77,1,0,0,0,321,322,3,180,
90,0,322,323,5,0,0,1,323,79,1,0,0,0,324,325,3,182,91,0,325,326,5,0,0,1,326,
81,1,0,0,0,327,328,3,184,92,0,328,329,5,0,0,1,329,83,1,0,0,0,330,331,3,186,
93,0,331,332,5,0,0,1,332,85,1,0,0,0,333,334,3,188,94,0,334,335,5,0,0,1,335,
87,1,0,0,0,336,337,3,190,95,0,337,338,5,0,0,1,338,89,1,0,0,0,339,340,3,192,
96,0,340,341,5,0,0,1,341,91,1,0,0,0,342,343,3,194,97,0,343,344,5,0,0,1,344,
93,1,0,0,0,345,346,3,196,98,0,346,347,5,0,0,1,347,95,1,0,0,0,348,349,3,198,
99,0,349,350,5,0,0,1,350,97,1,0,0,0,351,352,3,200,100,0,352,353,5,0,0,1,
353,99,1,0,0,0,354,355,3,202,101,0,355,356,5,0,0,1,356,101,1,0,0,0,357,358,
3,106,53,0,358,359,3,112,56,0,359,360,3,116,58,0,360,103,1,0,0,0,361,367,
1,0,0,0,362,367,5,69,0,0,363,364,5,69,0,0,364,365,5,1,0,0,365,367,3,104,
52,0,366,361,1,0,0,0,366,362,1,0,0,0,366,363,1,0,0,0,367,105,1,0,0,0,368,
369,5,51,0,0,369,370,5,39,0,0,370,371,5,2,0,0,371,107,1,0,0,0,372,373,5,
41,0,0,373,374,5,65,0,0,374,375,3,110,55,0,375,109,1,0,0,0,376,382,1,0,0,
0,377,382,5,70,0,0,378,379,5,70,0,0,379,380,5,1,0,0,380,382,3,110,55,0,381,
376,1,0,0,0,381,377,1,0,0,0,381,378,1,0,0,0,382,111,1,0,0,0,383,390,6,56,
-1,0,384,385,10,1,0,0,385,386,3,108,54,0,386,387,5,2,0,0,387,389,1,0,0,0,
388,384,1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,113,
1,0,0,0,392,390,1,0,0,0,393,394,3,124,62,0,394,395,5,44,0,0,395,396,5,69,
0,0,396,397,5,3,0,0,397,398,3,128,64,0,398,399,5,4,0,0,399,400,3,130,65,
0,400,401,3,132,66,0,401,402,5,5,0,0,402,403,3,116,58,0,403,404,5,57,0,0,
404,405,3,160,80,0,405,406,5,6,0,0,406,412,1,0,0,0,407,408,5,62,0,0,408,
409,5,69,0,0,409,410,5,7,0,0,410,412,3,182,91,0,411,393,1,0,0,0,411,407,
1,0,0,0,412,115,1,0,0,0,413,418,6,58,-1,0,414,415,10,1,0,0,415,417,3,114,
57,0,416,414,1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,
117,1,0,0,0,420,418,1,0,0,0,421,422,3,114,57,0,422,119,1,0,0,0,423,430,6,
60,-1,0,424,425,10,1,0,0,425,426,3,118,59,0,426,427,5,2,0,0,427,429,1,0,
0,0,428,424,1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,
121,1,0,0,0,432,430,1,0,0,0,433,434,5,49,0,0,434,123,1,0,0,0,435,440,6,62,
-1,0,436,437,10,1,0,0,437,439,3,122,61,0,438,436,1,0,0,0,439,442,1,0,0,0,
440,438,1,0,0,0,440,441,1,0,0,0,441,125,1,0,0,0,442,440,1,0,0,0,443,444,
5,69,0,0,444,445,5,8,0,0,445,446,3,182,91,0,446,127,1,0,0,0,447,454,1,0,
0,0,448,454,3,126,63,0,449,450,3,126,63,0,450,451,5,1,0,0,451,452,3,128,
64,0,452,454,1,0,0,0,453,447,1,0,0,0,453,448,1,0,0,0,453,449,1,0,0,0,454,
129,1,0,0,0,455,459,1,0,0,0,456,457,5,9,0,0,457,459,3,182,91,0,458,455,1,
0,0,0,458,456,1,0,0,0,459,131,1,0,0,0,460,464,1,0,0,0,461,462,5,60,0,0,462,
464,3,136,68,0,463,460,1,0,0,0,463,461,1,0,0,0,464,133,1,0,0,0,465,466,3,
182,91,0,466,135,1,0,0,0,467,473,3,134,67,0,468,469,3,134,67,0,469,470,5,
1,0,0,470,471,3,136,68,0,471,473,1,0,0,0,472,467,1,0,0,0,472,468,1,0,0,0,
473,137,1,0,0,0,474,475,3,148,74,0,475,476,5,10,0,0,476,477,3,160,80,0,477,
139,1,0,0,0,478,485,1,0,0,0,479,485,3,138,69,0,480,481,3,138,69,0,481,482,
5,11,0,0,482,483,3,140,70,0,483,485,1,0,0,0,484,478,1,0,0,0,484,479,1,0,
0,0,484,480,1,0,0,0,485,141,1,0,0,0,486,490,1,0,0,0,487,488,5,8,0,0,488,
490,3,182,91,0,489,486,1,0,0,0,489,487,1,0,0,0,490,143,1,0,0,0,491,495,1,
0,0,0,492,493,5,7,0,0,493,495,3,148,74,0,494,491,1,0,0,0,494,492,1,0,0,0,
495,145,1,0,0,0,496,500,1,0,0,0,497,498,5,7,0,0,498,500,3,160,80,0,499,496,
1,0,0,0,499,497,1,0,0,0,500,147,1,0,0,0,501,502,5,12,0,0,502,503,5,69,0,
0,503,504,3,144,72,0,504,505,5,13,0,0,505,549,1,0,0,0,506,507,5,48,0,0,507,
508,5,3,0,0,508,509,3,148,74,0,509,510,5,4,0,0,510,549,1,0,0,0,511,512,5,
50,0,0,512,513,5,3,0,0,513,514,3,148,74,0,514,515,5,4,0,0,515,549,1,0,0,
0,516,517,5,5,0,0,517,518,3,150,75,0,518,519,5,6,0,0,519,549,1,0,0,0,520,
521,5,5,0,0,521,522,3,154,77,0,522,523,5,6,0,0,523,549,1,0,0,0,524,525,5,
14,0,0,525,526,3,150,75,0,526,527,5,15,0,0,527,549,1,0,0,0,528,529,5,3,0,
0,529,530,3,148,74,0,530,531,5,1,0,0,531,532,3,148,74,0,532,533,5,4,0,0,
533,549,1,0,0,0,534,549,5,42,0,0,535,549,5,61,0,0,536,549,5,64,0,0,537,549,
5,71,0,0,538,539,5,58,0,0,539,540,5,3,0,0,540,541,3,148,74,0,541,542,5,4,
0,0,542,549,1,0,0,0,543,549,5,69,0,0,544,545,5,3,0,0,545,546,3,148,74,0,
546,547,5,4,0,0,547,549,1,0,0,0,548,501,1,0,0,0,548,506,1,0,0,0,548,511,
1,0,0,0,548,516,1,0,0,0,548,520,1,0,0,0,548,524,1,0,0,0,548,528,1,0,0,0,
548,534,1,0,0,0,548,535,1,0,0,0,548,536,1,0,0,0,548,537,1,0,0,0,548,538,
1,0,0,0,548,543,1,0,0,0,548,544,1,0,0,0,549,149,1,0,0,0,550,557,1,0,0,0,
551,557,3,148,74,0,552,553,3,148,74,0,553,554,5,1,0,0,554,555,3,150,75,0,
555,557,1,0,0,0,556,550,1,0,0,0,556,551,1,0,0,0,556,552,1,0,0,0,557,151,
1,0,0,0,558,559,5,69,0,0,559,560,5,7,0,0,560,561,3,148,74,0,561,153,1,0,
0,0,562,568,3,152,76,0,563,564,3,152,76,0,564,565,5,1,0,0,565,566,3,154,
77,0,566,568,1,0,0,0,567,562,1,0,0,0,567,563,1,0,0,0,568,155,1,0,0,0,569,
570,5,69,0,0,570,571,5,7,0,0,571,572,3,160,80,0,572,157,1,0,0,0,573,579,
3,156,78,0,574,575,3,156,78,0,575,576,5,1,0,0,576,577,3,158,79,0,577,579,
1,0,0,0,578,573,1,0,0,0,578,574,1,0,0,0,579,159,1,0,0,0,580,581,3,164,82,
0,581,582,5,2,0,0,582,583,3,160,80,0,583,589,1,0,0,0,584,585,3,164,82,0,
585,586,5,2,0,0,586,589,1,0,0,0,587,589,3,164,82,0,588,580,1,0,0,0,588,584,
1,0,0,0,588,587,1,0,0,0,589,161,1,0,0,0,590,597,1,0,0,0,591,597,3,160,80,
0,592,593,3,160,80,0,593,594,5,1,0,0,594,595,3,162,81,0,595,597,1,0,0,0,
596,590,1,0,0,0,596,591,1,0,0,0,596,592,1,0,0,0,597,163,1,0,0,0,598,599,
5,46,0,0,599,600,3,164,82,0,600,601,5,59,0,0,601,602,3,164,82,0,602,603,
5,40,0,0,603,604,3,164,82,0,604,617,1,0,0,0,605,606,5,52,0,0,606,607,3,168,
84,0,607,608,5,47,0,0,608,609,3,164,82,0,609,617,1,0,0,0,610,611,5,53,0,
0,611,612,3,168,84,0,612,613,5,47,0,0,613,614,3,164,82,0,614,617,1,0,0,0,
615,617,3,170,85,0,616,598,1,0,0,0,616,605,1,0,0,0,616,610,1,0,0,0,616,615,
1,0,0,0,617,165,1,0,0,0,618,619,3,148,74,0,619,620,5,7,0,0,620,621,3,160,
80,0,621,167,1,0,0,0,622,628,3,166,83,0,623,624,3,166,83,0,624,625,5,1,0,
0,625,626,3,168,84,0,626,628,1,0,0,0,627,622,1,0,0,0,627,623,1,0,0,0,628,
169,1,0,0,0,629,630,3,174,87,0,630,631,5,16,0,0,631,632,3,174,87,0,632,655,
1,0,0,0,633,634,3,174,87,0,634,635,5,17,0,0,635,636,3,174,87,0,636,655,1,
0,0,0,637,638,3,174,87,0,638,639,5,18,0,0,639,640,3,174,87,0,640,655,1,0,
0,0,641,642,3,174,87,0,642,643,5,19,0,0,643,644,3,174,87,0,644,655,1,0,0,
0,645,646,3,174,87,0,646,647,5,20,0,0,647,648,3,174,87,0,648,655,1,0,0,0,
649,650,3,174,87,0,650,651,5,21,0,0,651,652,3,174,87,0,652,655,1,0,0,0,653,
655,3,174,87,0,654,629,1,0,0,0,654,633,1,0,0,0,654,637,1,0,0,0,654,641,1,
0,0,0,654,645,1,0,0,0,654,649,1,0,0,0,654,653,1,0,0,0,655,171,1,0,0,0,656,
657,3,170,85,0,657,658,5,2,0,0,658,664,1,0,0,0,659,660,3,170,85,0,660,661,
5,2,0,0,661,662,3,172,86,0,662,664,1,0,0,0,663,656,1,0,0,0,663,659,1,0,0,
0,664,173,1,0,0,0,665,666,6,87,-1,0,666,667,5,44,0,0,667,668,5,3,0,0,668,
669,3,128,64,0,669,670,5,4,0,0,670,671,5,5,0,0,671,672,5,57,0,0,672,673,
3,160,80,0,673,674,5,6,0,0,674,692,1,0,0,0,675,676,5,12,0,0,676,677,5,69,
0,0,677,678,3,146,73,0,678,679,5,13,0,0,679,692,1,0,0,0,680,681,5,54,0,0,
681,682,3,170,85,0,682,683,5,5,0,0,683,684,3,140,70,0,684,685,5,6,0,0,685,
692,1,0,0,0,686,687,5,14,0,0,687,688,3,162,81,0,688,689,5,15,0,0,689,692,
1,0,0,0,690,692,3,176,88,0,691,665,1,0,0,0,691,675,1,0,0,0,691,680,1,0,0,
0,691,686,1,0,0,0,691,690,1,0,0,0,692,707,1,0,0,0,693,694,10,9,0,0,694,695,
5,37,0,0,695,706,3,186,93,0,696,697,10,4,0,0,697,698,5,22,0,0,698,706,3,
176,88,0,699,700,10,3,0,0,700,701,5,23,0,0,701,706,3,176,88,0,702,703,10,
2,0,0,703,704,5,56,0,0,704,706,3,176,88,0,705,693,1,0,0,0,705,696,1,0,0,
0,705,699,1,0,0,0,705,702,1,0,0,0,706,709,1,0,0,0,707,705,1,0,0,0,707,708,
1,0,0,0,708,175,1,0,0,0,709,707,1,0,0,0,710,711,6,88,-1,0,711,712,3,192,
96,0,712,724,1,0,0,0,713,714,10,4,0,0,714,715,5,24,0,0,715,723,3,192,96,
0,716,717,10,3,0,0,717,718,5,25,0,0,718,723,3,192,96,0,719,720,10,2,0,0,
720,721,5,36,0,0,721,723,3,192,96,0,722,713,1,0,0,0,722,716,1,0,0,0,722,
719,1,0,0,0,723,726,1,0,0,0,724,722,1,0,0,0,724,725,1,0,0,0,725,177,1,0,
0,0,726,724,1,0,0,0,727,728,6,89,-1,0,728,729,5,5,0,0,729,730,3,162,81,0,
730,731,5,6,0,0,731,816,1,0,0,0,732,733,5,5,0,0,733,734,3,158,79,0,734,735,
5,6,0,0,735,816,1,0,0,0,736,737,5,38,0,0,737,738,5,3,0,0,738,739,3,160,80,
0,739,740,5,1,0,0,740,741,3,160,80,0,741,742,5,4,0,0,742,816,1,0,0,0,743,
744,5,27,0,0,744,745,5,3,0,0,745,746,3,160,80,0,746,747,5,4,0,0,747,816,
1,0,0,0,748,749,5,28,0,0,749,750,5,3,0,0,750,751,3,160,80,0,751,752,5,4,
0,0,752,816,1,0,0,0,753,754,5,29,0,0,754,755,5,3,0,0,755,756,3,160,80,0,
756,757,5,4,0,0,757,816,1,0,0,0,758,759,5,48,0,0,759,760,5,3,0,0,760,761,
3,160,80,0,761,762,5,4,0,0,762,816,1,0,0,0,763,764,5,50,0,0,764,765,5,3,
0,0,765,766,3,160,80,0,766,767,5,4,0,0,767,816,1,0,0,0,768,769,5,58,0,0,
769,770,5,3,0,0,770,771,3,160,80,0,771,772,5,4,0,0,772,816,1,0,0,0,773,774,
5,55,0,0,774,775,5,3,0,0,775,776,3,160,80,0,776,777,5,4,0,0,777,816,1,0,
0,0,778,779,5,30,0,0,779,780,5,3,0,0,780,781,3,160,80,0,781,782,5,4,0,0,
782,816,1,0,0,0,783,784,5,31,0,0,784,785,5,3,0,0,785,786,3,160,80,0,786,
787,5,4,0,0,787,816,1,0,0,0,788,789,5,43,0,0,789,790,5,3,0,0,790,791,3,160,
80,0,791,792,5,4,0,0,792,816,1,0,0,0,793,794,5,32,0,0,794,795,5,3,0,0,795,
796,3,160,80,0,796,797,5,1,0,0,797,798,3,160,80,0,798,799,5,1,0,0,799,800,
3,160,80,0,800,801,5,4,0,0,801,816,1,0,0,0,802,803,5,45,0,0,803,804,5,14,
0,0,804,805,3,182,91,0,805,806,5,15,0,0,806,807,3,180,90,0,807,816,1,0,0,
0,808,809,5,63,0,0,809,810,5,14,0,0,810,811,3,182,91,0,811,812,5,15,0,0,
812,813,3,180,90,0,813,816,1,0,0,0,814,816,3,180,90,0,815,727,1,0,0,0,815,
732,1,0,0,0,815,736,1,0,0,0,815,743,1,0,0,0,815,748,1,0,0,0,815,753,1,0,
0,0,815,758,1,0,0,0,815,763,1,0,0,0,815,768,1,0,0,0,815,773,1,0,0,0,815,
778,1,0,0,0,815,783,1,0,0,0,815,788,1,0,0,0,815,793,1,0,0,0,815,802,1,0,
0,0,815,808,1,0,0,0,815,814,1,0,0,0,816,830,1,0,0,0,817,818,10,20,0,0,818,
819,5,3,0,0,819,820,3,162,81,0,820,821,5,4,0,0,821,829,1,0,0,0,822,823,10,
19,0,0,823,824,5,26,0,0,824,829,5,69,0,0,825,826,10,18,0,0,826,827,5,26,
0,0,827,829,5,71,0,0,828,817,1,0,0,0,828,822,1,0,0,0,828,825,1,0,0,0,829,
832,1,0,0,0,830,828,1,0,0,0,830,831,1,0,0,0,831,179,1,0,0,0,832,830,1,0,
0,0,833,843,5,61,0,0,834,843,5,42,0,0,835,843,5,64,0,0,836,843,5,71,0,0,
837,843,5,69,0,0,838,839,5,3,0,0,839,840,3,160,80,0,840,841,5,4,0,0,841,
843,1,0,0,0,842,833,1,0,0,0,842,834,1,0,0,0,842,835,1,0,0,0,842,836,1,0,
0,0,842,837,1,0,0,0,842,838,1,0,0,0,843,181,1,0,0,0,844,845,5,44,0,0,845,
846,5,3,0,0,846,847,3,190,95,0,847,848,5,4,0,0,848,849,5,9,0,0,849,850,3,
182,91,0,850,857,1,0,0,0,851,852,5,66,0,0,852,853,5,69,0,0,853,854,5,26,
0,0,854,857,3,182,91,0,855,857,3,184,92,0,856,844,1,0,0,0,856,851,1,0,0,
0,856,855,1,0,0,0,857,183,1,0,0,0,858,859,3,186,93,0,859,860,5,22,0,0,860,
861,3,186,93,0,861,864,1,0,0,0,862,864,3,186,93,0,863,858,1,0,0,0,863,862,
1,0,0,0,864,185,1,0,0,0,865,866,5,5,0,0,866,867,3,190,95,0,867,868,5,6,0,
0,868,883,1,0,0,0,869,870,5,5,0,0,870,871,3,200,100,0,871,872,5,6,0,0,872,
883,1,0,0,0,873,874,5,12,0,0,874,875,3,196,98,0,875,876,5,13,0,0,876,883,
1,0,0,0,877,878,5,14,0,0,878,879,3,182,91,0,879,880,5,15,0,0,880,883,1,0,
0,0,881,883,3,188,94,0,882,865,1,0,0,0,882,869,1,0,0,0,882,873,1,0,0,0,882,
877,1,0,0,0,882,881,1,0,0,0,883,187,1,0,0,0,884,893,5,33,0,0,885,893,5,34,
0,0,886,893,5,35,0,0,887,893,5,69,0,0,888,889,5,3,0,0,889,890,3,182,91,0,
890,891,5,4,0,0,891,893,1,0,0,0,892,884,1,0,0,0,892,885,1,0,0,0,892,886,
1,0,0,0,892,887,1,0,0,0,892,888,1,0,0,0,893,189,1,0,0,0,894,901,1,0,0,0,
895,901,3,182,91,0,896,897,3,182,91,0,897,898,5,1,0,0,898,899,3,190,95,0,
899,901,1,0,0,0,900,894,1,0,0,0,900,895,1,0,0,0,900,896,1,0,0,0,901,191,
1,0,0,0,902,903,3,178,89,0,903,193,1,0,0,0,904,905,5,69,0,0,905,906,3,142,
71,0,906,195,1,0,0,0,907,914,1,0,0,0,908,914,3,194,97,0,909,910,3,194,97,
0,910,911,5,1,0,0,911,912,3,196,98,0,912,914,1,0,0,0,913,907,1,0,0,0,913,
908,1,0,0,0,913,909,1,0,0,0,914,197,1,0,0,0,915,916,5,69,0,0,916,917,5,8,
0,0,917,918,3,182,91,0,918,199,1,0,0,0,919,925,3,198,99,0,920,921,3,198,
99,0,921,922,5,1,0,0,922,923,3,200,100,0,923,925,1,0,0,0,924,919,1,0,0,0,
924,920,1,0,0,0,925,201,1,0,0,0,926,927,3,160,80,0,927,928,5,8,0,0,928,929,
3,182,91,0,929,203,1,0,0,0,41,366,381,390,411,418,430,440,453,458,463,472,
484,489,494,499,548,556,567,578,588,596,616,627,654,663,691,705,707,722,
724,815,828,830,842,856,863,882,892,900,913,924];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class stellaParser extends antlr4.Parser {

    static grammarFileName = "stellaParser.g4";
    static literalNames = [ null, "','", "';'", "'('", "')'", "'{'", "'}'", 
                            "'='", "':'", "'->'", "'=>'", "'|'", "'<|'", 
                            "'|>'", "'['", "']'", "'<'", "'<='", "'>'", 
                            "'>='", "'=='", "'!='", "'+'", "'-'", "'*'", 
                            "'/'", "'.'", "'List::head'", "'List::isempty'", 
                            "'List::tail'", "'Nat::pred'", "'Nat::iszero'", 
                            "'Nat::rec'", "'Bool'", "'Nat'", "'Unit'", "'and'", 
                            "'as'", "'cons'", "'core'", "'else'", "'extend'", 
                            "'false'", "'fix'", "'fn'", "'fold'", "'if'", 
                            "'in'", "'inl'", "'inline'", "'inr'", "'language'", 
                            "'let'", "'letrec'", "'match'", "'not'", "'or'", 
                            "'return'", "'succ'", "'then'", "'throws'", 
                            "'true'", "'type'", "'unfold'", "'unit'", "'with'", 
                            "'\\u00B5'" ];
    static symbolicNames = [ null, "Surrogate_id_SYMB_0", "Surrogate_id_SYMB_1", 
                             "Surrogate_id_SYMB_2", "Surrogate_id_SYMB_3", 
                             "Surrogate_id_SYMB_4", "Surrogate_id_SYMB_5", 
                             "Surrogate_id_SYMB_6", "Surrogate_id_SYMB_7", 
                             "Surrogate_id_SYMB_8", "Surrogate_id_SYMB_9", 
                             "Surrogate_id_SYMB_10", "Surrogate_id_SYMB_11", 
                             "Surrogate_id_SYMB_12", "Surrogate_id_SYMB_13", 
                             "Surrogate_id_SYMB_14", "Surrogate_id_SYMB_15", 
                             "Surrogate_id_SYMB_16", "Surrogate_id_SYMB_17", 
                             "Surrogate_id_SYMB_18", "Surrogate_id_SYMB_19", 
                             "Surrogate_id_SYMB_20", "Surrogate_id_SYMB_21", 
                             "Surrogate_id_SYMB_22", "Surrogate_id_SYMB_23", 
                             "Surrogate_id_SYMB_24", "Surrogate_id_SYMB_25", 
                             "Surrogate_id_SYMB_26", "Surrogate_id_SYMB_27", 
                             "Surrogate_id_SYMB_28", "Surrogate_id_SYMB_29", 
                             "Surrogate_id_SYMB_30", "Surrogate_id_SYMB_31", 
                             "Surrogate_id_SYMB_32", "Surrogate_id_SYMB_33", 
                             "Surrogate_id_SYMB_34", "Surrogate_id_SYMB_35", 
                             "Surrogate_id_SYMB_36", "Surrogate_id_SYMB_37", 
                             "Surrogate_id_SYMB_38", "Surrogate_id_SYMB_39", 
                             "Surrogate_id_SYMB_40", "Surrogate_id_SYMB_41", 
                             "Surrogate_id_SYMB_42", "Surrogate_id_SYMB_43", 
                             "Surrogate_id_SYMB_44", "Surrogate_id_SYMB_45", 
                             "Surrogate_id_SYMB_46", "Surrogate_id_SYMB_47", 
                             "Surrogate_id_SYMB_48", "Surrogate_id_SYMB_49", 
                             "Surrogate_id_SYMB_50", "Surrogate_id_SYMB_51", 
                             "Surrogate_id_SYMB_52", "Surrogate_id_SYMB_53", 
                             "Surrogate_id_SYMB_54", "Surrogate_id_SYMB_55", 
                             "Surrogate_id_SYMB_56", "Surrogate_id_SYMB_57", 
                             "Surrogate_id_SYMB_58", "Surrogate_id_SYMB_59", 
                             "Surrogate_id_SYMB_60", "Surrogate_id_SYMB_61", 
                             "Surrogate_id_SYMB_62", "Surrogate_id_SYMB_63", 
                             "Surrogate_id_SYMB_64", "Surrogate_id_SYMB_65", 
                             "COMMENT_antlr_builtin", "MULTICOMMENT_antlr_builtin", 
                             "StellaIdent", "ExtensionName", "INTEGER", 
                             "WS", "ErrorToken" ];
    static ruleNames = [ "start_Program", "start_ListStellaIdent", "start_LanguageDecl", 
                         "start_Extension", "start_ListExtensionName", "start_ListExtension", 
                         "start_Decl", "start_ListDecl", "start_LocalDecl", 
                         "start_ListLocalDecl", "start_Annotation", "start_ListAnnotation", 
                         "start_ParamDecl", "start_ListParamDecl", "start_ReturnType", 
                         "start_ThrowType", "start_Type9", "start_ListType9", 
                         "start_MatchCase", "start_ListMatchCase", "start_OptionalTyping", 
                         "start_PatternData", "start_ExprData", "start_Pattern", 
                         "start_ListPattern", "start_LabelledPattern", "start_ListLabelledPattern", 
                         "start_Binding", "start_ListBinding", "start_Expr", 
                         "start_ListExpr", "start_Expr1", "start_PatternBinding", 
                         "start_ListPatternBinding", "start_Expr2", "start_ListExpr2", 
                         "start_Expr3", "start_Expr4", "start_Expr6", "start_Expr7", 
                         "start_Type", "start_Type1", "start_Type2", "start_Type3", 
                         "start_ListType", "start_Expr5", "start_VariantFieldType", 
                         "start_ListVariantFieldType", "start_RecordFieldType", 
                         "start_ListRecordFieldType", "start_Typing", "program", 
                         "listStellaIdent", "languageDecl", "extension", 
                         "listExtensionName", "listExtension", "decl", "listDecl", 
                         "localDecl", "listLocalDecl", "annotation", "listAnnotation", 
                         "paramDecl", "listParamDecl", "returnType", "throwType", 
                         "type9", "listType9", "matchCase", "listMatchCase", 
                         "optionalTyping", "patternData", "exprData", "pattern", 
                         "listPattern", "labelledPattern", "listLabelledPattern", 
                         "binding", "listBinding", "expr", "listExpr", "expr1", 
                         "patternBinding", "listPatternBinding", "expr2", 
                         "listExpr2", "expr3", "expr4", "expr6", "expr7", 
                         "type", "type1", "type2", "type3", "listType", 
                         "expr5", "variantFieldType", "listVariantFieldType", 
                         "recordFieldType", "listRecordFieldType", "typing" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = stellaParser.ruleNames;
        this.literalNames = stellaParser.literalNames;
        this.symbolicNames = stellaParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 56:
    	    		return this.listExtension_sempred(localctx, predIndex);
    	case 58:
    	    		return this.listDecl_sempred(localctx, predIndex);
    	case 60:
    	    		return this.listLocalDecl_sempred(localctx, predIndex);
    	case 62:
    	    		return this.listAnnotation_sempred(localctx, predIndex);
    	case 87:
    	    		return this.expr3_sempred(localctx, predIndex);
    	case 88:
    	    		return this.expr4_sempred(localctx, predIndex);
    	case 89:
    	    		return this.expr6_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    listExtension_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    listDecl_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    listLocalDecl_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    listAnnotation_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expr3_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 9);
    		case 5:
    			return this.precpred(this._ctx, 4);
    		case 6:
    			return this.precpred(this._ctx, 3);
    		case 7:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expr4_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 4);
    		case 9:
    			return this.precpred(this._ctx, 3);
    		case 10:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expr6_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 11:
    			return this.precpred(this._ctx, 20);
    		case 12:
    			return this.precpred(this._ctx, 19);
    		case 13:
    			return this.precpred(this._ctx, 18);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	start_Program() {
	    let localctx = new Start_ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, stellaParser.RULE_start_Program);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 204;
	        localctx.x = this.program();
	        this.state = 205;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListStellaIdent() {
	    let localctx = new Start_ListStellaIdentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, stellaParser.RULE_start_ListStellaIdent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 207;
	        localctx.x = this.listStellaIdent();
	        this.state = 208;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_LanguageDecl() {
	    let localctx = new Start_LanguageDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, stellaParser.RULE_start_LanguageDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 210;
	        localctx.x = this.languageDecl();
	        this.state = 211;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Extension() {
	    let localctx = new Start_ExtensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, stellaParser.RULE_start_Extension);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 213;
	        localctx.x = this.extension();
	        this.state = 214;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListExtensionName() {
	    let localctx = new Start_ListExtensionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, stellaParser.RULE_start_ListExtensionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 216;
	        localctx.x = this.listExtensionName();
	        this.state = 217;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListExtension() {
	    let localctx = new Start_ListExtensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, stellaParser.RULE_start_ListExtension);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 219;
	        localctx.x = this.listExtension(0);
	        this.state = 220;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Decl() {
	    let localctx = new Start_DeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, stellaParser.RULE_start_Decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 222;
	        localctx.x = this.decl();
	        this.state = 223;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListDecl() {
	    let localctx = new Start_ListDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, stellaParser.RULE_start_ListDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 225;
	        localctx.x = this.listDecl(0);
	        this.state = 226;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_LocalDecl() {
	    let localctx = new Start_LocalDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, stellaParser.RULE_start_LocalDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 228;
	        localctx.x = this.localDecl();
	        this.state = 229;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListLocalDecl() {
	    let localctx = new Start_ListLocalDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, stellaParser.RULE_start_ListLocalDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 231;
	        localctx.x = this.listLocalDecl(0);
	        this.state = 232;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Annotation() {
	    let localctx = new Start_AnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, stellaParser.RULE_start_Annotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 234;
	        localctx.x = this.annotation();
	        this.state = 235;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListAnnotation() {
	    let localctx = new Start_ListAnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, stellaParser.RULE_start_ListAnnotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 237;
	        localctx.x = this.listAnnotation(0);
	        this.state = 238;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ParamDecl() {
	    let localctx = new Start_ParamDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, stellaParser.RULE_start_ParamDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 240;
	        localctx.x = this.paramDecl();
	        this.state = 241;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListParamDecl() {
	    let localctx = new Start_ListParamDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, stellaParser.RULE_start_ListParamDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 243;
	        localctx.x = this.listParamDecl();
	        this.state = 244;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ReturnType() {
	    let localctx = new Start_ReturnTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, stellaParser.RULE_start_ReturnType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 246;
	        localctx.x = this.returnType();
	        this.state = 247;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ThrowType() {
	    let localctx = new Start_ThrowTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, stellaParser.RULE_start_ThrowType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 249;
	        localctx.x = this.throwType();
	        this.state = 250;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Type9() {
	    let localctx = new Start_Type9Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, stellaParser.RULE_start_Type9);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 252;
	        localctx.x = this.type9();
	        this.state = 253;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListType9() {
	    let localctx = new Start_ListType9Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, stellaParser.RULE_start_ListType9);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 255;
	        localctx.x = this.listType9();
	        this.state = 256;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_MatchCase() {
	    let localctx = new Start_MatchCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, stellaParser.RULE_start_MatchCase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 258;
	        localctx.x = this.matchCase();
	        this.state = 259;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListMatchCase() {
	    let localctx = new Start_ListMatchCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, stellaParser.RULE_start_ListMatchCase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 261;
	        localctx.x = this.listMatchCase();
	        this.state = 262;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_OptionalTyping() {
	    let localctx = new Start_OptionalTypingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, stellaParser.RULE_start_OptionalTyping);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 264;
	        localctx.x = this.optionalTyping();
	        this.state = 265;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_PatternData() {
	    let localctx = new Start_PatternDataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, stellaParser.RULE_start_PatternData);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 267;
	        localctx.x = this.patternData();
	        this.state = 268;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ExprData() {
	    let localctx = new Start_ExprDataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, stellaParser.RULE_start_ExprData);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 270;
	        localctx.x = this.exprData();
	        this.state = 271;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Pattern() {
	    let localctx = new Start_PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, stellaParser.RULE_start_Pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 273;
	        localctx.x = this.pattern();
	        this.state = 274;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListPattern() {
	    let localctx = new Start_ListPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, stellaParser.RULE_start_ListPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 276;
	        localctx.x = this.listPattern();
	        this.state = 277;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_LabelledPattern() {
	    let localctx = new Start_LabelledPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, stellaParser.RULE_start_LabelledPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 279;
	        localctx.x = this.labelledPattern();
	        this.state = 280;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListLabelledPattern() {
	    let localctx = new Start_ListLabelledPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, stellaParser.RULE_start_ListLabelledPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 282;
	        localctx.x = this.listLabelledPattern();
	        this.state = 283;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Binding() {
	    let localctx = new Start_BindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, stellaParser.RULE_start_Binding);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 285;
	        localctx.x = this.binding();
	        this.state = 286;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListBinding() {
	    let localctx = new Start_ListBindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, stellaParser.RULE_start_ListBinding);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 288;
	        localctx.x = this.listBinding();
	        this.state = 289;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Expr() {
	    let localctx = new Start_ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, stellaParser.RULE_start_Expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 291;
	        localctx.x = this.expr();
	        this.state = 292;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListExpr() {
	    let localctx = new Start_ListExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, stellaParser.RULE_start_ListExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 294;
	        localctx.x = this.listExpr();
	        this.state = 295;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Expr1() {
	    let localctx = new Start_Expr1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, stellaParser.RULE_start_Expr1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 297;
	        localctx.x = this.expr1();
	        this.state = 298;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_PatternBinding() {
	    let localctx = new Start_PatternBindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, stellaParser.RULE_start_PatternBinding);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 300;
	        localctx.x = this.patternBinding();
	        this.state = 301;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListPatternBinding() {
	    let localctx = new Start_ListPatternBindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, stellaParser.RULE_start_ListPatternBinding);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 303;
	        localctx.x = this.listPatternBinding();
	        this.state = 304;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Expr2() {
	    let localctx = new Start_Expr2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, stellaParser.RULE_start_Expr2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 306;
	        localctx.x = this.expr2();
	        this.state = 307;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListExpr2() {
	    let localctx = new Start_ListExpr2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, stellaParser.RULE_start_ListExpr2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 309;
	        localctx.x = this.listExpr2();
	        this.state = 310;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Expr3() {
	    let localctx = new Start_Expr3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, stellaParser.RULE_start_Expr3);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 312;
	        localctx.x = this.expr3(0);
	        this.state = 313;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Expr4() {
	    let localctx = new Start_Expr4Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, stellaParser.RULE_start_Expr4);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 315;
	        localctx.x = this.expr4(0);
	        this.state = 316;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Expr6() {
	    let localctx = new Start_Expr6Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, stellaParser.RULE_start_Expr6);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 318;
	        localctx.x = this.expr6(0);
	        this.state = 319;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Expr7() {
	    let localctx = new Start_Expr7Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, stellaParser.RULE_start_Expr7);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 321;
	        localctx.x = this.expr7();
	        this.state = 322;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Type() {
	    let localctx = new Start_TypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, stellaParser.RULE_start_Type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 324;
	        localctx.x = this.type();
	        this.state = 325;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Type1() {
	    let localctx = new Start_Type1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, stellaParser.RULE_start_Type1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 327;
	        localctx.x = this.type1();
	        this.state = 328;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Type2() {
	    let localctx = new Start_Type2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, stellaParser.RULE_start_Type2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 330;
	        localctx.x = this.type2();
	        this.state = 331;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Type3() {
	    let localctx = new Start_Type3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, stellaParser.RULE_start_Type3);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 333;
	        localctx.x = this.type3();
	        this.state = 334;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListType() {
	    let localctx = new Start_ListTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, stellaParser.RULE_start_ListType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 336;
	        localctx.x = this.listType();
	        this.state = 337;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Expr5() {
	    let localctx = new Start_Expr5Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, stellaParser.RULE_start_Expr5);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 339;
	        localctx.x = this.expr5();
	        this.state = 340;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_VariantFieldType() {
	    let localctx = new Start_VariantFieldTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, stellaParser.RULE_start_VariantFieldType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 342;
	        localctx.x = this.variantFieldType();
	        this.state = 343;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListVariantFieldType() {
	    let localctx = new Start_ListVariantFieldTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, stellaParser.RULE_start_ListVariantFieldType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 345;
	        localctx.x = this.listVariantFieldType();
	        this.state = 346;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_RecordFieldType() {
	    let localctx = new Start_RecordFieldTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, stellaParser.RULE_start_RecordFieldType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 348;
	        localctx.x = this.recordFieldType();
	        this.state = 349;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_ListRecordFieldType() {
	    let localctx = new Start_ListRecordFieldTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, stellaParser.RULE_start_ListRecordFieldType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 351;
	        localctx.x = this.listRecordFieldType();
	        this.state = 352;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_Typing() {
	    let localctx = new Start_TypingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, stellaParser.RULE_start_Typing);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 354;
	        localctx.x = this.typing();
	        this.state = 355;
	        this.match(stellaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, stellaParser.RULE_program);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 357;
	        localctx.p_1_1 = this.languageDecl();
	        this.state = 358;
	        localctx.p_1_2 = this.listExtension(0);
	        this.state = 359;
	        localctx.p_1_3 = this.listDecl(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listStellaIdent() {
	    let localctx = new ListStellaIdentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, stellaParser.RULE_listStellaIdent);
	    try {
	        this.state = 366;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 362;
	            localctx.p_2_1 = this.match(stellaParser.StellaIdent);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 363;
	            localctx.p_3_1 = this.match(stellaParser.StellaIdent);
	            this.state = 364;
	            this.match(stellaParser.Surrogate_id_SYMB_0);
	            this.state = 365;
	            localctx.p_3_3 = this.listStellaIdent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	languageDecl() {
	    let localctx = new LanguageDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, stellaParser.RULE_languageDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 368;
	        this.match(stellaParser.Surrogate_id_SYMB_50);
	        this.state = 369;
	        this.match(stellaParser.Surrogate_id_SYMB_38);
	        this.state = 370;
	        this.match(stellaParser.Surrogate_id_SYMB_1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extension() {
	    let localctx = new ExtensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, stellaParser.RULE_extension);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 372;
	        this.match(stellaParser.Surrogate_id_SYMB_40);
	        this.state = 373;
	        this.match(stellaParser.Surrogate_id_SYMB_64);
	        this.state = 374;
	        localctx.p_1_3 = this.listExtensionName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listExtensionName() {
	    let localctx = new ListExtensionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, stellaParser.RULE_listExtensionName);
	    try {
	        this.state = 381;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 377;
	            localctx.p_2_1 = this.match(stellaParser.ExtensionName);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 378;
	            localctx.p_3_1 = this.match(stellaParser.ExtensionName);
	            this.state = 379;
	            this.match(stellaParser.Surrogate_id_SYMB_0);
	            this.state = 380;
	            localctx.p_3_3 = this.listExtensionName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	listExtension(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ListExtensionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 112;
	    this.enterRecursionRule(localctx, 112, stellaParser.RULE_listExtension, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 390;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,2,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ListExtensionContext(this, _parentctx, _parentState);
	                localctx.p_2_1 = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, stellaParser.RULE_listExtension);
	                this.state = 384;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 385;
	                localctx.p_2_2 = this.extension();
	                this.state = 386;
	                this.match(stellaParser.Surrogate_id_SYMB_1); 
	            }
	            this.state = 392;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,2,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	decl() {
	    let localctx = new DeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, stellaParser.RULE_decl);
	    try {
	        this.state = 411;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 393;
	            localctx.p_1_1 = this.listAnnotation(0);
	            this.state = 394;
	            this.match(stellaParser.Surrogate_id_SYMB_43);
	            this.state = 395;
	            localctx.p_1_3 = this.match(stellaParser.StellaIdent);
	            this.state = 396;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 397;
	            localctx.p_1_5 = this.listParamDecl();
	            this.state = 398;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            this.state = 399;
	            localctx.p_1_7 = this.returnType();
	            this.state = 400;
	            localctx.p_1_8 = this.throwType();
	            this.state = 401;
	            this.match(stellaParser.Surrogate_id_SYMB_4);
	            this.state = 402;
	            localctx.p_1_10 = this.listDecl(0);
	            this.state = 403;
	            this.match(stellaParser.Surrogate_id_SYMB_56);
	            this.state = 404;
	            localctx.p_1_12 = this.expr();
	            this.state = 405;
	            this.match(stellaParser.Surrogate_id_SYMB_5);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 407;
	            this.match(stellaParser.Surrogate_id_SYMB_61);
	            this.state = 408;
	            localctx.p_2_2 = this.match(stellaParser.StellaIdent);
	            this.state = 409;
	            this.match(stellaParser.Surrogate_id_SYMB_6);
	            this.state = 410;
	            localctx.p_2_4 = this.type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	listDecl(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ListDeclContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 116;
	    this.enterRecursionRule(localctx, 116, stellaParser.RULE_listDecl, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 418;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ListDeclContext(this, _parentctx, _parentState);
	                localctx.p_2_1 = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, stellaParser.RULE_listDecl);
	                this.state = 414;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 415;
	                localctx.p_2_2 = this.decl(); 
	            }
	            this.state = 420;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	localDecl() {
	    let localctx = new LocalDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, stellaParser.RULE_localDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 421;
	        localctx.p_1_1 = this.decl();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	listLocalDecl(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ListLocalDeclContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 120;
	    this.enterRecursionRule(localctx, 120, stellaParser.RULE_listLocalDecl, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 430;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ListLocalDeclContext(this, _parentctx, _parentState);
	                localctx.p_2_1 = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, stellaParser.RULE_listLocalDecl);
	                this.state = 424;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 425;
	                localctx.p_2_2 = this.localDecl();
	                this.state = 426;
	                this.match(stellaParser.Surrogate_id_SYMB_1); 
	            }
	            this.state = 432;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	annotation() {
	    let localctx = new AnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, stellaParser.RULE_annotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 433;
	        this.match(stellaParser.Surrogate_id_SYMB_48);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	listAnnotation(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ListAnnotationContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 124;
	    this.enterRecursionRule(localctx, 124, stellaParser.RULE_listAnnotation, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 440;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ListAnnotationContext(this, _parentctx, _parentState);
	                localctx.p_2_1 = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, stellaParser.RULE_listAnnotation);
	                this.state = 436;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 437;
	                localctx.p_2_2 = this.annotation(); 
	            }
	            this.state = 442;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	paramDecl() {
	    let localctx = new ParamDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, stellaParser.RULE_paramDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 443;
	        localctx.p_1_1 = this.match(stellaParser.StellaIdent);
	        this.state = 444;
	        this.match(stellaParser.Surrogate_id_SYMB_7);
	        this.state = 445;
	        localctx.p_1_3 = this.type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listParamDecl() {
	    let localctx = new ListParamDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, stellaParser.RULE_listParamDecl);
	    try {
	        this.state = 453;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 448;
	            localctx.p_2_1 = this.paramDecl();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 449;
	            localctx.p_3_1 = this.paramDecl();
	            this.state = 450;
	            this.match(stellaParser.Surrogate_id_SYMB_0);
	            this.state = 451;
	            localctx.p_3_3 = this.listParamDecl();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnType() {
	    let localctx = new ReturnTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, stellaParser.RULE_returnType);
	    try {
	        this.state = 458;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case -1:
	        case 5:
	        case 60:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 9:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 456;
	            this.match(stellaParser.Surrogate_id_SYMB_8);
	            this.state = 457;
	            localctx.p_2_2 = this.type();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwType() {
	    let localctx = new ThrowTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, stellaParser.RULE_throwType);
	    try {
	        this.state = 463;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case -1:
	        case 5:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 60:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 461;
	            this.match(stellaParser.Surrogate_id_SYMB_59);
	            this.state = 462;
	            localctx.p_2_2 = this.listType9();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type9() {
	    let localctx = new Type9Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, stellaParser.RULE_type9);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 465;
	        localctx.p_1_1 = this.type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listType9() {
	    let localctx = new ListType9Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, stellaParser.RULE_listType9);
	    try {
	        this.state = 472;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 467;
	            localctx.p_1_1 = this.type9();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 468;
	            localctx.p_2_1 = this.type9();
	            this.state = 469;
	            this.match(stellaParser.Surrogate_id_SYMB_0);
	            this.state = 470;
	            localctx.p_2_3 = this.listType9();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchCase() {
	    let localctx = new MatchCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, stellaParser.RULE_matchCase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 474;
	        localctx.p_1_1 = this.pattern();
	        this.state = 475;
	        this.match(stellaParser.Surrogate_id_SYMB_9);
	        this.state = 476;
	        localctx.p_1_3 = this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listMatchCase() {
	    let localctx = new ListMatchCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, stellaParser.RULE_listMatchCase);
	    try {
	        this.state = 484;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 479;
	            localctx.p_2_1 = this.matchCase();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 480;
	            localctx.p_3_1 = this.matchCase();
	            this.state = 481;
	            this.match(stellaParser.Surrogate_id_SYMB_10);
	            this.state = 482;
	            localctx.p_3_3 = this.listMatchCase();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalTyping() {
	    let localctx = new OptionalTypingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, stellaParser.RULE_optionalTyping);
	    try {
	        this.state = 489;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case -1:
	        case 1:
	        case 13:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 8:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 487;
	            this.match(stellaParser.Surrogate_id_SYMB_7);
	            this.state = 488;
	            localctx.p_2_2 = this.type();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternData() {
	    let localctx = new PatternDataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, stellaParser.RULE_patternData);
	    try {
	        this.state = 494;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case -1:
	        case 13:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 492;
	            this.match(stellaParser.Surrogate_id_SYMB_6);
	            this.state = 493;
	            localctx.p_2_2 = this.pattern();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprData() {
	    let localctx = new ExprDataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, stellaParser.RULE_exprData);
	    try {
	        this.state = 499;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case -1:
	        case 13:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 497;
	            this.match(stellaParser.Surrogate_id_SYMB_6);
	            this.state = 498;
	            localctx.p_2_2 = this.expr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern() {
	    let localctx = new PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, stellaParser.RULE_pattern);
	    try {
	        this.state = 548;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 501;
	            this.match(stellaParser.Surrogate_id_SYMB_11);
	            this.state = 502;
	            localctx.p_1_2 = this.match(stellaParser.StellaIdent);
	            this.state = 503;
	            localctx.p_1_3 = this.patternData();
	            this.state = 504;
	            this.match(stellaParser.Surrogate_id_SYMB_12);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 506;
	            this.match(stellaParser.Surrogate_id_SYMB_47);
	            this.state = 507;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 508;
	            localctx.p_2_3 = this.pattern();
	            this.state = 509;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 511;
	            this.match(stellaParser.Surrogate_id_SYMB_49);
	            this.state = 512;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 513;
	            localctx.p_3_3 = this.pattern();
	            this.state = 514;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 516;
	            this.match(stellaParser.Surrogate_id_SYMB_4);
	            this.state = 517;
	            localctx.p_4_2 = this.listPattern();
	            this.state = 518;
	            this.match(stellaParser.Surrogate_id_SYMB_5);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 520;
	            this.match(stellaParser.Surrogate_id_SYMB_4);
	            this.state = 521;
	            localctx.p_5_2 = this.listLabelledPattern();
	            this.state = 522;
	            this.match(stellaParser.Surrogate_id_SYMB_5);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 524;
	            this.match(stellaParser.Surrogate_id_SYMB_13);
	            this.state = 525;
	            localctx.p_6_2 = this.listPattern();
	            this.state = 526;
	            this.match(stellaParser.Surrogate_id_SYMB_14);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 528;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 529;
	            localctx.p_7_2 = this.pattern();
	            this.state = 530;
	            this.match(stellaParser.Surrogate_id_SYMB_0);
	            this.state = 531;
	            localctx.p_7_4 = this.pattern();
	            this.state = 532;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 534;
	            this.match(stellaParser.Surrogate_id_SYMB_41);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 535;
	            this.match(stellaParser.Surrogate_id_SYMB_60);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 536;
	            this.match(stellaParser.Surrogate_id_SYMB_63);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 537;
	            localctx.p_11_1 = this.match(stellaParser.INTEGER);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 538;
	            this.match(stellaParser.Surrogate_id_SYMB_57);
	            this.state = 539;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 540;
	            localctx.p_12_3 = this.pattern();
	            this.state = 541;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 543;
	            localctx.p_13_1 = this.match(stellaParser.StellaIdent);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 544;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 545;
	            localctx.p_14_2 = this.pattern();
	            this.state = 546;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listPattern() {
	    let localctx = new ListPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, stellaParser.RULE_listPattern);
	    try {
	        this.state = 556;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 551;
	            localctx.p_2_1 = this.pattern();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 552;
	            localctx.p_3_1 = this.pattern();
	            this.state = 553;
	            this.match(stellaParser.Surrogate_id_SYMB_0);
	            this.state = 554;
	            localctx.p_3_3 = this.listPattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelledPattern() {
	    let localctx = new LabelledPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, stellaParser.RULE_labelledPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 558;
	        localctx.p_1_1 = this.match(stellaParser.StellaIdent);
	        this.state = 559;
	        this.match(stellaParser.Surrogate_id_SYMB_6);
	        this.state = 560;
	        localctx.p_1_3 = this.pattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listLabelledPattern() {
	    let localctx = new ListLabelledPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, stellaParser.RULE_listLabelledPattern);
	    try {
	        this.state = 567;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 562;
	            localctx.p_1_1 = this.labelledPattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 563;
	            localctx.p_2_1 = this.labelledPattern();
	            this.state = 564;
	            this.match(stellaParser.Surrogate_id_SYMB_0);
	            this.state = 565;
	            localctx.p_2_3 = this.listLabelledPattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binding() {
	    let localctx = new BindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, stellaParser.RULE_binding);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 569;
	        localctx.p_1_1 = this.match(stellaParser.StellaIdent);
	        this.state = 570;
	        this.match(stellaParser.Surrogate_id_SYMB_6);
	        this.state = 571;
	        localctx.p_1_3 = this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listBinding() {
	    let localctx = new ListBindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, stellaParser.RULE_listBinding);
	    try {
	        this.state = 578;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 573;
	            localctx.p_1_1 = this.binding();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 574;
	            localctx.p_2_1 = this.binding();
	            this.state = 575;
	            this.match(stellaParser.Surrogate_id_SYMB_0);
	            this.state = 576;
	            localctx.p_2_3 = this.listBinding();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, stellaParser.RULE_expr);
	    try {
	        this.state = 588;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 580;
	            localctx.p_1_1 = this.expr1();
	            this.state = 581;
	            this.match(stellaParser.Surrogate_id_SYMB_1);
	            this.state = 582;
	            localctx.p_1_3 = this.expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 584;
	            localctx.p_2_1 = this.expr1();
	            this.state = 585;
	            this.match(stellaParser.Surrogate_id_SYMB_1);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 587;
	            localctx.p_3_1 = this.expr1();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listExpr() {
	    let localctx = new ListExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, stellaParser.RULE_listExpr);
	    try {
	        this.state = 596;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 591;
	            localctx.p_2_1 = this.expr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 592;
	            localctx.p_3_1 = this.expr();
	            this.state = 593;
	            this.match(stellaParser.Surrogate_id_SYMB_0);
	            this.state = 594;
	            localctx.p_3_3 = this.listExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr1() {
	    let localctx = new Expr1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, stellaParser.RULE_expr1);
	    try {
	        this.state = 616;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 46:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 598;
	            this.match(stellaParser.Surrogate_id_SYMB_45);
	            this.state = 599;
	            localctx.p_1_2 = this.expr1();
	            this.state = 600;
	            this.match(stellaParser.Surrogate_id_SYMB_58);
	            this.state = 601;
	            localctx.p_1_4 = this.expr1();
	            this.state = 602;
	            this.match(stellaParser.Surrogate_id_SYMB_39);
	            this.state = 603;
	            localctx.p_1_6 = this.expr1();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 605;
	            this.match(stellaParser.Surrogate_id_SYMB_51);
	            this.state = 606;
	            localctx.p_2_2 = this.listPatternBinding();
	            this.state = 607;
	            this.match(stellaParser.Surrogate_id_SYMB_46);
	            this.state = 608;
	            localctx.p_2_4 = this.expr1();
	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 610;
	            this.match(stellaParser.Surrogate_id_SYMB_52);
	            this.state = 611;
	            localctx.p_3_2 = this.listPatternBinding();
	            this.state = 612;
	            this.match(stellaParser.Surrogate_id_SYMB_46);
	            this.state = 613;
	            localctx.p_3_4 = this.expr1();
	            break;
	        case 3:
	        case 5:
	        case 12:
	        case 14:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 38:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 48:
	        case 50:
	        case 54:
	        case 55:
	        case 58:
	        case 61:
	        case 63:
	        case 64:
	        case 69:
	        case 71:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 615;
	            localctx.p_4_1 = this.expr2();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternBinding() {
	    let localctx = new PatternBindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, stellaParser.RULE_patternBinding);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 618;
	        localctx.p_1_1 = this.pattern();
	        this.state = 619;
	        this.match(stellaParser.Surrogate_id_SYMB_6);
	        this.state = 620;
	        localctx.p_1_3 = this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listPatternBinding() {
	    let localctx = new ListPatternBindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, stellaParser.RULE_listPatternBinding);
	    try {
	        this.state = 627;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 622;
	            localctx.p_1_1 = this.patternBinding();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 623;
	            localctx.p_2_1 = this.patternBinding();
	            this.state = 624;
	            this.match(stellaParser.Surrogate_id_SYMB_0);
	            this.state = 625;
	            localctx.p_2_3 = this.listPatternBinding();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr2() {
	    let localctx = new Expr2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, stellaParser.RULE_expr2);
	    try {
	        this.state = 654;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 629;
	            localctx.p_1_1 = this.expr3(0);
	            this.state = 630;
	            this.match(stellaParser.Surrogate_id_SYMB_15);
	            this.state = 631;
	            localctx.p_1_3 = this.expr3(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 633;
	            localctx.p_2_1 = this.expr3(0);
	            this.state = 634;
	            this.match(stellaParser.Surrogate_id_SYMB_16);
	            this.state = 635;
	            localctx.p_2_3 = this.expr3(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 637;
	            localctx.p_3_1 = this.expr3(0);
	            this.state = 638;
	            this.match(stellaParser.Surrogate_id_SYMB_17);
	            this.state = 639;
	            localctx.p_3_3 = this.expr3(0);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 641;
	            localctx.p_4_1 = this.expr3(0);
	            this.state = 642;
	            this.match(stellaParser.Surrogate_id_SYMB_18);
	            this.state = 643;
	            localctx.p_4_3 = this.expr3(0);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 645;
	            localctx.p_5_1 = this.expr3(0);
	            this.state = 646;
	            this.match(stellaParser.Surrogate_id_SYMB_19);
	            this.state = 647;
	            localctx.p_5_3 = this.expr3(0);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 649;
	            localctx.p_6_1 = this.expr3(0);
	            this.state = 650;
	            this.match(stellaParser.Surrogate_id_SYMB_20);
	            this.state = 651;
	            localctx.p_6_3 = this.expr3(0);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 653;
	            localctx.p_7_1 = this.expr3(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listExpr2() {
	    let localctx = new ListExpr2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, stellaParser.RULE_listExpr2);
	    try {
	        this.state = 663;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 656;
	            localctx.p_1_1 = this.expr2();
	            this.state = 657;
	            this.match(stellaParser.Surrogate_id_SYMB_1);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 659;
	            localctx.p_2_1 = this.expr2();
	            this.state = 660;
	            this.match(stellaParser.Surrogate_id_SYMB_1);
	            this.state = 661;
	            localctx.p_2_3 = this.listExpr2();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr3(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Expr3Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 174;
	    this.enterRecursionRule(localctx, 174, stellaParser.RULE_expr3, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 691;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	            this.state = 666;
	            this.match(stellaParser.Surrogate_id_SYMB_43);
	            this.state = 667;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 668;
	            localctx.p_2_3 = this.listParamDecl();
	            this.state = 669;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            this.state = 670;
	            this.match(stellaParser.Surrogate_id_SYMB_4);
	            this.state = 671;
	            this.match(stellaParser.Surrogate_id_SYMB_56);
	            this.state = 672;
	            localctx.p_2_7 = this.expr();
	            this.state = 673;
	            this.match(stellaParser.Surrogate_id_SYMB_5);
	            break;
	        case 12:
	            this.state = 675;
	            this.match(stellaParser.Surrogate_id_SYMB_11);
	            this.state = 676;
	            localctx.p_3_2 = this.match(stellaParser.StellaIdent);
	            this.state = 677;
	            localctx.p_3_3 = this.exprData();
	            this.state = 678;
	            this.match(stellaParser.Surrogate_id_SYMB_12);
	            break;
	        case 54:
	            this.state = 680;
	            this.match(stellaParser.Surrogate_id_SYMB_53);
	            this.state = 681;
	            localctx.p_4_2 = this.expr2();
	            this.state = 682;
	            this.match(stellaParser.Surrogate_id_SYMB_4);
	            this.state = 683;
	            localctx.p_4_4 = this.listMatchCase();
	            this.state = 684;
	            this.match(stellaParser.Surrogate_id_SYMB_5);
	            break;
	        case 14:
	            this.state = 686;
	            this.match(stellaParser.Surrogate_id_SYMB_13);
	            this.state = 687;
	            localctx.p_5_2 = this.listExpr();
	            this.state = 688;
	            this.match(stellaParser.Surrogate_id_SYMB_14);
	            break;
	        case 3:
	        case 5:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 38:
	        case 42:
	        case 43:
	        case 45:
	        case 48:
	        case 50:
	        case 55:
	        case 58:
	        case 61:
	        case 63:
	        case 64:
	        case 69:
	        case 71:
	            this.state = 690;
	            localctx.p_9_1 = this.expr4(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 707;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,27,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 705;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new Expr3Context(this, _parentctx, _parentState);
	                    localctx.p_1_1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, stellaParser.RULE_expr3);
	                    this.state = 693;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 694;
	                    this.match(stellaParser.Surrogate_id_SYMB_36);
	                    this.state = 695;
	                    localctx.p_1_3 = this.type2();
	                    break;

	                case 2:
	                    localctx = new Expr3Context(this, _parentctx, _parentState);
	                    localctx.p_6_1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, stellaParser.RULE_expr3);
	                    this.state = 696;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 697;
	                    this.match(stellaParser.Surrogate_id_SYMB_21);
	                    this.state = 698;
	                    localctx.p_6_3 = this.expr4(0);
	                    break;

	                case 3:
	                    localctx = new Expr3Context(this, _parentctx, _parentState);
	                    localctx.p_7_1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, stellaParser.RULE_expr3);
	                    this.state = 699;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 700;
	                    this.match(stellaParser.Surrogate_id_SYMB_22);
	                    this.state = 701;
	                    localctx.p_7_3 = this.expr4(0);
	                    break;

	                case 4:
	                    localctx = new Expr3Context(this, _parentctx, _parentState);
	                    localctx.p_8_1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, stellaParser.RULE_expr3);
	                    this.state = 702;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 703;
	                    this.match(stellaParser.Surrogate_id_SYMB_55);
	                    this.state = 704;
	                    localctx.p_8_3 = this.expr4(0);
	                    break;

	                } 
	            }
	            this.state = 709;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,27,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	expr4(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Expr4Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 176;
	    this.enterRecursionRule(localctx, 176, stellaParser.RULE_expr4, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 711;
	        localctx.p_4_1 = this.expr5();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 724;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 722;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new Expr4Context(this, _parentctx, _parentState);
	                    localctx.p_1_1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, stellaParser.RULE_expr4);
	                    this.state = 713;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 714;
	                    this.match(stellaParser.Surrogate_id_SYMB_23);
	                    this.state = 715;
	                    localctx.p_1_3 = this.expr5();
	                    break;

	                case 2:
	                    localctx = new Expr4Context(this, _parentctx, _parentState);
	                    localctx.p_2_1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, stellaParser.RULE_expr4);
	                    this.state = 716;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 717;
	                    this.match(stellaParser.Surrogate_id_SYMB_24);
	                    this.state = 718;
	                    localctx.p_2_3 = this.expr5();
	                    break;

	                case 3:
	                    localctx = new Expr4Context(this, _parentctx, _parentState);
	                    localctx.p_3_1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, stellaParser.RULE_expr4);
	                    this.state = 719;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 720;
	                    this.match(stellaParser.Surrogate_id_SYMB_35);
	                    this.state = 721;
	                    localctx.p_3_3 = this.expr5();
	                    break;

	                } 
	            }
	            this.state = 726;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	expr6(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Expr6Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 178;
	    this.enterRecursionRule(localctx, 178, stellaParser.RULE_expr6, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 815;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 728;
	            this.match(stellaParser.Surrogate_id_SYMB_4);
	            this.state = 729;
	            localctx.p_4_2 = this.listExpr();
	            this.state = 730;
	            this.match(stellaParser.Surrogate_id_SYMB_5);
	            break;

	        case 2:
	            this.state = 732;
	            this.match(stellaParser.Surrogate_id_SYMB_4);
	            this.state = 733;
	            localctx.p_5_2 = this.listBinding();
	            this.state = 734;
	            this.match(stellaParser.Surrogate_id_SYMB_5);
	            break;

	        case 3:
	            this.state = 736;
	            this.match(stellaParser.Surrogate_id_SYMB_37);
	            this.state = 737;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 738;
	            localctx.p_6_3 = this.expr();
	            this.state = 739;
	            this.match(stellaParser.Surrogate_id_SYMB_0);
	            this.state = 740;
	            localctx.p_6_5 = this.expr();
	            this.state = 741;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;

	        case 4:
	            this.state = 743;
	            this.match(stellaParser.Surrogate_id_SYMB_26);
	            this.state = 744;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 745;
	            localctx.p_7_3 = this.expr();
	            this.state = 746;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;

	        case 5:
	            this.state = 748;
	            this.match(stellaParser.Surrogate_id_SYMB_27);
	            this.state = 749;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 750;
	            localctx.p_8_3 = this.expr();
	            this.state = 751;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;

	        case 6:
	            this.state = 753;
	            this.match(stellaParser.Surrogate_id_SYMB_28);
	            this.state = 754;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 755;
	            localctx.p_9_3 = this.expr();
	            this.state = 756;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;

	        case 7:
	            this.state = 758;
	            this.match(stellaParser.Surrogate_id_SYMB_47);
	            this.state = 759;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 760;
	            localctx.p_10_3 = this.expr();
	            this.state = 761;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;

	        case 8:
	            this.state = 763;
	            this.match(stellaParser.Surrogate_id_SYMB_49);
	            this.state = 764;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 765;
	            localctx.p_11_3 = this.expr();
	            this.state = 766;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;

	        case 9:
	            this.state = 768;
	            this.match(stellaParser.Surrogate_id_SYMB_57);
	            this.state = 769;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 770;
	            localctx.p_12_3 = this.expr();
	            this.state = 771;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;

	        case 10:
	            this.state = 773;
	            this.match(stellaParser.Surrogate_id_SYMB_54);
	            this.state = 774;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 775;
	            localctx.p_13_3 = this.expr();
	            this.state = 776;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;

	        case 11:
	            this.state = 778;
	            this.match(stellaParser.Surrogate_id_SYMB_29);
	            this.state = 779;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 780;
	            localctx.p_14_3 = this.expr();
	            this.state = 781;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;

	        case 12:
	            this.state = 783;
	            this.match(stellaParser.Surrogate_id_SYMB_30);
	            this.state = 784;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 785;
	            localctx.p_15_3 = this.expr();
	            this.state = 786;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;

	        case 13:
	            this.state = 788;
	            this.match(stellaParser.Surrogate_id_SYMB_42);
	            this.state = 789;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 790;
	            localctx.p_16_3 = this.expr();
	            this.state = 791;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;

	        case 14:
	            this.state = 793;
	            this.match(stellaParser.Surrogate_id_SYMB_31);
	            this.state = 794;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 795;
	            localctx.p_17_3 = this.expr();
	            this.state = 796;
	            this.match(stellaParser.Surrogate_id_SYMB_0);
	            this.state = 797;
	            localctx.p_17_5 = this.expr();
	            this.state = 798;
	            this.match(stellaParser.Surrogate_id_SYMB_0);
	            this.state = 799;
	            localctx.p_17_7 = this.expr();
	            this.state = 800;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;

	        case 15:
	            this.state = 802;
	            this.match(stellaParser.Surrogate_id_SYMB_44);
	            this.state = 803;
	            this.match(stellaParser.Surrogate_id_SYMB_13);
	            this.state = 804;
	            localctx.p_18_3 = this.type();
	            this.state = 805;
	            this.match(stellaParser.Surrogate_id_SYMB_14);
	            this.state = 806;
	            localctx.p_18_5 = this.expr7();
	            break;

	        case 16:
	            this.state = 808;
	            this.match(stellaParser.Surrogate_id_SYMB_62);
	            this.state = 809;
	            this.match(stellaParser.Surrogate_id_SYMB_13);
	            this.state = 810;
	            localctx.p_19_3 = this.type();
	            this.state = 811;
	            this.match(stellaParser.Surrogate_id_SYMB_14);
	            this.state = 812;
	            localctx.p_19_5 = this.expr7();
	            break;

	        case 17:
	            this.state = 814;
	            localctx.p_20_1 = this.expr7();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 830;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,32,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 828;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new Expr6Context(this, _parentctx, _parentState);
	                    localctx.p_1_1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, stellaParser.RULE_expr6);
	                    this.state = 817;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 818;
	                    this.match(stellaParser.Surrogate_id_SYMB_2);
	                    this.state = 819;
	                    localctx.p_1_3 = this.listExpr();
	                    this.state = 820;
	                    this.match(stellaParser.Surrogate_id_SYMB_3);
	                    break;

	                case 2:
	                    localctx = new Expr6Context(this, _parentctx, _parentState);
	                    localctx.p_2_1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, stellaParser.RULE_expr6);
	                    this.state = 822;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 823;
	                    this.match(stellaParser.Surrogate_id_SYMB_25);
	                    this.state = 824;
	                    localctx.p_2_3 = this.match(stellaParser.StellaIdent);
	                    break;

	                case 3:
	                    localctx = new Expr6Context(this, _parentctx, _parentState);
	                    localctx.p_3_1 = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, stellaParser.RULE_expr6);
	                    this.state = 825;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 826;
	                    this.match(stellaParser.Surrogate_id_SYMB_25);
	                    this.state = 827;
	                    localctx.p_3_3 = this.match(stellaParser.INTEGER);
	                    break;

	                } 
	            }
	            this.state = 832;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,32,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	expr7() {
	    let localctx = new Expr7Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, stellaParser.RULE_expr7);
	    try {
	        this.state = 842;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 61:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 833;
	            this.match(stellaParser.Surrogate_id_SYMB_60);
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 834;
	            this.match(stellaParser.Surrogate_id_SYMB_41);
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 835;
	            this.match(stellaParser.Surrogate_id_SYMB_63);
	            break;
	        case 71:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 836;
	            localctx.p_4_1 = this.match(stellaParser.INTEGER);
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 837;
	            localctx.p_5_1 = this.match(stellaParser.StellaIdent);
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 838;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 839;
	            localctx.p_6_2 = this.expr();
	            this.state = 840;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type() {
	    let localctx = new TypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, stellaParser.RULE_type);
	    try {
	        this.state = 856;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 844;
	            this.match(stellaParser.Surrogate_id_SYMB_43);
	            this.state = 845;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 846;
	            localctx.p_1_3 = this.listType();
	            this.state = 847;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            this.state = 848;
	            this.match(stellaParser.Surrogate_id_SYMB_8);
	            this.state = 849;
	            localctx.p_1_6 = this.type();
	            break;
	        case 66:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 851;
	            this.match(stellaParser.Surrogate_id_SYMB_65);
	            this.state = 852;
	            localctx.p_2_2 = this.match(stellaParser.StellaIdent);
	            this.state = 853;
	            this.match(stellaParser.Surrogate_id_SYMB_25);
	            this.state = 854;
	            localctx.p_2_4 = this.type();
	            break;
	        case 3:
	        case 5:
	        case 12:
	        case 14:
	        case 33:
	        case 34:
	        case 35:
	        case 69:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 855;
	            localctx.p_3_1 = this.type1();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type1() {
	    let localctx = new Type1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, stellaParser.RULE_type1);
	    try {
	        this.state = 863;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 858;
	            localctx.p_1_1 = this.type2();
	            this.state = 859;
	            this.match(stellaParser.Surrogate_id_SYMB_21);
	            this.state = 860;
	            localctx.p_1_3 = this.type2();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 862;
	            localctx.p_2_1 = this.type2();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type2() {
	    let localctx = new Type2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, stellaParser.RULE_type2);
	    try {
	        this.state = 882;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 865;
	            this.match(stellaParser.Surrogate_id_SYMB_4);
	            this.state = 866;
	            localctx.p_1_2 = this.listType();
	            this.state = 867;
	            this.match(stellaParser.Surrogate_id_SYMB_5);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 869;
	            this.match(stellaParser.Surrogate_id_SYMB_4);
	            this.state = 870;
	            localctx.p_2_2 = this.listRecordFieldType();
	            this.state = 871;
	            this.match(stellaParser.Surrogate_id_SYMB_5);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 873;
	            this.match(stellaParser.Surrogate_id_SYMB_11);
	            this.state = 874;
	            localctx.p_3_2 = this.listVariantFieldType();
	            this.state = 875;
	            this.match(stellaParser.Surrogate_id_SYMB_12);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 877;
	            this.match(stellaParser.Surrogate_id_SYMB_13);
	            this.state = 878;
	            localctx.p_4_2 = this.type();
	            this.state = 879;
	            this.match(stellaParser.Surrogate_id_SYMB_14);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 881;
	            localctx.p_5_1 = this.type3();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type3() {
	    let localctx = new Type3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, stellaParser.RULE_type3);
	    try {
	        this.state = 892;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 884;
	            this.match(stellaParser.Surrogate_id_SYMB_32);
	            break;
	        case 34:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 885;
	            this.match(stellaParser.Surrogate_id_SYMB_33);
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 886;
	            this.match(stellaParser.Surrogate_id_SYMB_34);
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 887;
	            localctx.p_4_1 = this.match(stellaParser.StellaIdent);
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 888;
	            this.match(stellaParser.Surrogate_id_SYMB_2);
	            this.state = 889;
	            localctx.p_5_2 = this.type();
	            this.state = 890;
	            this.match(stellaParser.Surrogate_id_SYMB_3);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listType() {
	    let localctx = new ListTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, stellaParser.RULE_listType);
	    try {
	        this.state = 900;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 895;
	            localctx.p_2_1 = this.type();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 896;
	            localctx.p_3_1 = this.type();
	            this.state = 897;
	            this.match(stellaParser.Surrogate_id_SYMB_0);
	            this.state = 898;
	            localctx.p_3_3 = this.listType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr5() {
	    let localctx = new Expr5Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, stellaParser.RULE_expr5);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 902;
	        localctx.p_1_1 = this.expr6(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variantFieldType() {
	    let localctx = new VariantFieldTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, stellaParser.RULE_variantFieldType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 904;
	        localctx.p_1_1 = this.match(stellaParser.StellaIdent);
	        this.state = 905;
	        localctx.p_1_2 = this.optionalTyping();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listVariantFieldType() {
	    let localctx = new ListVariantFieldTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, stellaParser.RULE_listVariantFieldType);
	    try {
	        this.state = 913;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 908;
	            localctx.p_2_1 = this.variantFieldType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 909;
	            localctx.p_3_1 = this.variantFieldType();
	            this.state = 910;
	            this.match(stellaParser.Surrogate_id_SYMB_0);
	            this.state = 911;
	            localctx.p_3_3 = this.listVariantFieldType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordFieldType() {
	    let localctx = new RecordFieldTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, stellaParser.RULE_recordFieldType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 915;
	        localctx.p_1_1 = this.match(stellaParser.StellaIdent);
	        this.state = 916;
	        this.match(stellaParser.Surrogate_id_SYMB_7);
	        this.state = 917;
	        localctx.p_1_3 = this.type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listRecordFieldType() {
	    let localctx = new ListRecordFieldTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, stellaParser.RULE_listRecordFieldType);
	    try {
	        this.state = 924;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 919;
	            localctx.p_1_1 = this.recordFieldType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 920;
	            localctx.p_2_1 = this.recordFieldType();
	            this.state = 921;
	            this.match(stellaParser.Surrogate_id_SYMB_0);
	            this.state = 922;
	            localctx.p_2_3 = this.listRecordFieldType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typing() {
	    let localctx = new TypingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, stellaParser.RULE_typing);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 926;
	        localctx.p_1_1 = this.expr();
	        this.state = 927;
	        this.match(stellaParser.Surrogate_id_SYMB_7);
	        this.state = 928;
	        localctx.p_1_3 = this.type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

stellaParser.EOF = antlr4.Token.EOF;
stellaParser.Surrogate_id_SYMB_0 = 1;
stellaParser.Surrogate_id_SYMB_1 = 2;
stellaParser.Surrogate_id_SYMB_2 = 3;
stellaParser.Surrogate_id_SYMB_3 = 4;
stellaParser.Surrogate_id_SYMB_4 = 5;
stellaParser.Surrogate_id_SYMB_5 = 6;
stellaParser.Surrogate_id_SYMB_6 = 7;
stellaParser.Surrogate_id_SYMB_7 = 8;
stellaParser.Surrogate_id_SYMB_8 = 9;
stellaParser.Surrogate_id_SYMB_9 = 10;
stellaParser.Surrogate_id_SYMB_10 = 11;
stellaParser.Surrogate_id_SYMB_11 = 12;
stellaParser.Surrogate_id_SYMB_12 = 13;
stellaParser.Surrogate_id_SYMB_13 = 14;
stellaParser.Surrogate_id_SYMB_14 = 15;
stellaParser.Surrogate_id_SYMB_15 = 16;
stellaParser.Surrogate_id_SYMB_16 = 17;
stellaParser.Surrogate_id_SYMB_17 = 18;
stellaParser.Surrogate_id_SYMB_18 = 19;
stellaParser.Surrogate_id_SYMB_19 = 20;
stellaParser.Surrogate_id_SYMB_20 = 21;
stellaParser.Surrogate_id_SYMB_21 = 22;
stellaParser.Surrogate_id_SYMB_22 = 23;
stellaParser.Surrogate_id_SYMB_23 = 24;
stellaParser.Surrogate_id_SYMB_24 = 25;
stellaParser.Surrogate_id_SYMB_25 = 26;
stellaParser.Surrogate_id_SYMB_26 = 27;
stellaParser.Surrogate_id_SYMB_27 = 28;
stellaParser.Surrogate_id_SYMB_28 = 29;
stellaParser.Surrogate_id_SYMB_29 = 30;
stellaParser.Surrogate_id_SYMB_30 = 31;
stellaParser.Surrogate_id_SYMB_31 = 32;
stellaParser.Surrogate_id_SYMB_32 = 33;
stellaParser.Surrogate_id_SYMB_33 = 34;
stellaParser.Surrogate_id_SYMB_34 = 35;
stellaParser.Surrogate_id_SYMB_35 = 36;
stellaParser.Surrogate_id_SYMB_36 = 37;
stellaParser.Surrogate_id_SYMB_37 = 38;
stellaParser.Surrogate_id_SYMB_38 = 39;
stellaParser.Surrogate_id_SYMB_39 = 40;
stellaParser.Surrogate_id_SYMB_40 = 41;
stellaParser.Surrogate_id_SYMB_41 = 42;
stellaParser.Surrogate_id_SYMB_42 = 43;
stellaParser.Surrogate_id_SYMB_43 = 44;
stellaParser.Surrogate_id_SYMB_44 = 45;
stellaParser.Surrogate_id_SYMB_45 = 46;
stellaParser.Surrogate_id_SYMB_46 = 47;
stellaParser.Surrogate_id_SYMB_47 = 48;
stellaParser.Surrogate_id_SYMB_48 = 49;
stellaParser.Surrogate_id_SYMB_49 = 50;
stellaParser.Surrogate_id_SYMB_50 = 51;
stellaParser.Surrogate_id_SYMB_51 = 52;
stellaParser.Surrogate_id_SYMB_52 = 53;
stellaParser.Surrogate_id_SYMB_53 = 54;
stellaParser.Surrogate_id_SYMB_54 = 55;
stellaParser.Surrogate_id_SYMB_55 = 56;
stellaParser.Surrogate_id_SYMB_56 = 57;
stellaParser.Surrogate_id_SYMB_57 = 58;
stellaParser.Surrogate_id_SYMB_58 = 59;
stellaParser.Surrogate_id_SYMB_59 = 60;
stellaParser.Surrogate_id_SYMB_60 = 61;
stellaParser.Surrogate_id_SYMB_61 = 62;
stellaParser.Surrogate_id_SYMB_62 = 63;
stellaParser.Surrogate_id_SYMB_63 = 64;
stellaParser.Surrogate_id_SYMB_64 = 65;
stellaParser.Surrogate_id_SYMB_65 = 66;
stellaParser.COMMENT_antlr_builtin = 67;
stellaParser.MULTICOMMENT_antlr_builtin = 68;
stellaParser.StellaIdent = 69;
stellaParser.ExtensionName = 70;
stellaParser.INTEGER = 71;
stellaParser.WS = 72;
stellaParser.ErrorToken = 73;

stellaParser.RULE_start_Program = 0;
stellaParser.RULE_start_ListStellaIdent = 1;
stellaParser.RULE_start_LanguageDecl = 2;
stellaParser.RULE_start_Extension = 3;
stellaParser.RULE_start_ListExtensionName = 4;
stellaParser.RULE_start_ListExtension = 5;
stellaParser.RULE_start_Decl = 6;
stellaParser.RULE_start_ListDecl = 7;
stellaParser.RULE_start_LocalDecl = 8;
stellaParser.RULE_start_ListLocalDecl = 9;
stellaParser.RULE_start_Annotation = 10;
stellaParser.RULE_start_ListAnnotation = 11;
stellaParser.RULE_start_ParamDecl = 12;
stellaParser.RULE_start_ListParamDecl = 13;
stellaParser.RULE_start_ReturnType = 14;
stellaParser.RULE_start_ThrowType = 15;
stellaParser.RULE_start_Type9 = 16;
stellaParser.RULE_start_ListType9 = 17;
stellaParser.RULE_start_MatchCase = 18;
stellaParser.RULE_start_ListMatchCase = 19;
stellaParser.RULE_start_OptionalTyping = 20;
stellaParser.RULE_start_PatternData = 21;
stellaParser.RULE_start_ExprData = 22;
stellaParser.RULE_start_Pattern = 23;
stellaParser.RULE_start_ListPattern = 24;
stellaParser.RULE_start_LabelledPattern = 25;
stellaParser.RULE_start_ListLabelledPattern = 26;
stellaParser.RULE_start_Binding = 27;
stellaParser.RULE_start_ListBinding = 28;
stellaParser.RULE_start_Expr = 29;
stellaParser.RULE_start_ListExpr = 30;
stellaParser.RULE_start_Expr1 = 31;
stellaParser.RULE_start_PatternBinding = 32;
stellaParser.RULE_start_ListPatternBinding = 33;
stellaParser.RULE_start_Expr2 = 34;
stellaParser.RULE_start_ListExpr2 = 35;
stellaParser.RULE_start_Expr3 = 36;
stellaParser.RULE_start_Expr4 = 37;
stellaParser.RULE_start_Expr6 = 38;
stellaParser.RULE_start_Expr7 = 39;
stellaParser.RULE_start_Type = 40;
stellaParser.RULE_start_Type1 = 41;
stellaParser.RULE_start_Type2 = 42;
stellaParser.RULE_start_Type3 = 43;
stellaParser.RULE_start_ListType = 44;
stellaParser.RULE_start_Expr5 = 45;
stellaParser.RULE_start_VariantFieldType = 46;
stellaParser.RULE_start_ListVariantFieldType = 47;
stellaParser.RULE_start_RecordFieldType = 48;
stellaParser.RULE_start_ListRecordFieldType = 49;
stellaParser.RULE_start_Typing = 50;
stellaParser.RULE_program = 51;
stellaParser.RULE_listStellaIdent = 52;
stellaParser.RULE_languageDecl = 53;
stellaParser.RULE_extension = 54;
stellaParser.RULE_listExtensionName = 55;
stellaParser.RULE_listExtension = 56;
stellaParser.RULE_decl = 57;
stellaParser.RULE_listDecl = 58;
stellaParser.RULE_localDecl = 59;
stellaParser.RULE_listLocalDecl = 60;
stellaParser.RULE_annotation = 61;
stellaParser.RULE_listAnnotation = 62;
stellaParser.RULE_paramDecl = 63;
stellaParser.RULE_listParamDecl = 64;
stellaParser.RULE_returnType = 65;
stellaParser.RULE_throwType = 66;
stellaParser.RULE_type9 = 67;
stellaParser.RULE_listType9 = 68;
stellaParser.RULE_matchCase = 69;
stellaParser.RULE_listMatchCase = 70;
stellaParser.RULE_optionalTyping = 71;
stellaParser.RULE_patternData = 72;
stellaParser.RULE_exprData = 73;
stellaParser.RULE_pattern = 74;
stellaParser.RULE_listPattern = 75;
stellaParser.RULE_labelledPattern = 76;
stellaParser.RULE_listLabelledPattern = 77;
stellaParser.RULE_binding = 78;
stellaParser.RULE_listBinding = 79;
stellaParser.RULE_expr = 80;
stellaParser.RULE_listExpr = 81;
stellaParser.RULE_expr1 = 82;
stellaParser.RULE_patternBinding = 83;
stellaParser.RULE_listPatternBinding = 84;
stellaParser.RULE_expr2 = 85;
stellaParser.RULE_listExpr2 = 86;
stellaParser.RULE_expr3 = 87;
stellaParser.RULE_expr4 = 88;
stellaParser.RULE_expr6 = 89;
stellaParser.RULE_expr7 = 90;
stellaParser.RULE_type = 91;
stellaParser.RULE_type1 = 92;
stellaParser.RULE_type2 = 93;
stellaParser.RULE_type3 = 94;
stellaParser.RULE_listType = 95;
stellaParser.RULE_expr5 = 96;
stellaParser.RULE_variantFieldType = 97;
stellaParser.RULE_listVariantFieldType = 98;
stellaParser.RULE_recordFieldType = 99;
stellaParser.RULE_listRecordFieldType = 100;
stellaParser.RULE_typing = 101;

class Start_ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Program;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	program() {
	    return this.getTypedRuleContext(ProgramContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Program(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Program(this);
		}
	}


}



class Start_ListStellaIdentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListStellaIdent;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listStellaIdent() {
	    return this.getTypedRuleContext(ListStellaIdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListStellaIdent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListStellaIdent(this);
		}
	}


}



class Start_LanguageDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_LanguageDecl;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	languageDecl() {
	    return this.getTypedRuleContext(LanguageDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_LanguageDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_LanguageDecl(this);
		}
	}


}



class Start_ExtensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Extension;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	extension() {
	    return this.getTypedRuleContext(ExtensionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Extension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Extension(this);
		}
	}


}



class Start_ListExtensionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListExtensionName;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listExtensionName() {
	    return this.getTypedRuleContext(ListExtensionNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListExtensionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListExtensionName(this);
		}
	}


}



class Start_ListExtensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListExtension;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listExtension() {
	    return this.getTypedRuleContext(ListExtensionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListExtension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListExtension(this);
		}
	}


}



class Start_DeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Decl;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	decl() {
	    return this.getTypedRuleContext(DeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Decl(this);
		}
	}


}



class Start_ListDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListDecl;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listDecl() {
	    return this.getTypedRuleContext(ListDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListDecl(this);
		}
	}


}



class Start_LocalDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_LocalDecl;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	localDecl() {
	    return this.getTypedRuleContext(LocalDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_LocalDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_LocalDecl(this);
		}
	}


}



class Start_ListLocalDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListLocalDecl;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listLocalDecl() {
	    return this.getTypedRuleContext(ListLocalDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListLocalDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListLocalDecl(this);
		}
	}


}



class Start_AnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Annotation;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Annotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Annotation(this);
		}
	}


}



class Start_ListAnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListAnnotation;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listAnnotation() {
	    return this.getTypedRuleContext(ListAnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListAnnotation(this);
		}
	}


}



class Start_ParamDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ParamDecl;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	paramDecl() {
	    return this.getTypedRuleContext(ParamDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ParamDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ParamDecl(this);
		}
	}


}



class Start_ListParamDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListParamDecl;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listParamDecl() {
	    return this.getTypedRuleContext(ListParamDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListParamDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListParamDecl(this);
		}
	}


}



class Start_ReturnTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ReturnType;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	returnType() {
	    return this.getTypedRuleContext(ReturnTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ReturnType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ReturnType(this);
		}
	}


}



class Start_ThrowTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ThrowType;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	throwType() {
	    return this.getTypedRuleContext(ThrowTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ThrowType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ThrowType(this);
		}
	}


}



class Start_Type9Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Type9;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	type9() {
	    return this.getTypedRuleContext(Type9Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Type9(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Type9(this);
		}
	}


}



class Start_ListType9Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListType9;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listType9() {
	    return this.getTypedRuleContext(ListType9Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListType9(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListType9(this);
		}
	}


}



class Start_MatchCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_MatchCase;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	matchCase() {
	    return this.getTypedRuleContext(MatchCaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_MatchCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_MatchCase(this);
		}
	}


}



class Start_ListMatchCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListMatchCase;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listMatchCase() {
	    return this.getTypedRuleContext(ListMatchCaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListMatchCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListMatchCase(this);
		}
	}


}



class Start_OptionalTypingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_OptionalTyping;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	optionalTyping() {
	    return this.getTypedRuleContext(OptionalTypingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_OptionalTyping(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_OptionalTyping(this);
		}
	}


}



class Start_PatternDataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_PatternData;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	patternData() {
	    return this.getTypedRuleContext(PatternDataContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_PatternData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_PatternData(this);
		}
	}


}



class Start_ExprDataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ExprData;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	exprData() {
	    return this.getTypedRuleContext(ExprDataContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ExprData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ExprData(this);
		}
	}


}



class Start_PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Pattern;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Pattern(this);
		}
	}


}



class Start_ListPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListPattern;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listPattern() {
	    return this.getTypedRuleContext(ListPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListPattern(this);
		}
	}


}



class Start_LabelledPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_LabelledPattern;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	labelledPattern() {
	    return this.getTypedRuleContext(LabelledPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_LabelledPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_LabelledPattern(this);
		}
	}


}



class Start_ListLabelledPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListLabelledPattern;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listLabelledPattern() {
	    return this.getTypedRuleContext(ListLabelledPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListLabelledPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListLabelledPattern(this);
		}
	}


}



class Start_BindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Binding;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	binding() {
	    return this.getTypedRuleContext(BindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Binding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Binding(this);
		}
	}


}



class Start_ListBindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListBinding;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listBinding() {
	    return this.getTypedRuleContext(ListBindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListBinding(this);
		}
	}


}



class Start_ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Expr;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Expr(this);
		}
	}


}



class Start_ListExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListExpr;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListExpr(this);
		}
	}


}



class Start_Expr1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Expr1;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	expr1() {
	    return this.getTypedRuleContext(Expr1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Expr1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Expr1(this);
		}
	}


}



class Start_PatternBindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_PatternBinding;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	patternBinding() {
	    return this.getTypedRuleContext(PatternBindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_PatternBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_PatternBinding(this);
		}
	}


}



class Start_ListPatternBindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListPatternBinding;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listPatternBinding() {
	    return this.getTypedRuleContext(ListPatternBindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListPatternBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListPatternBinding(this);
		}
	}


}



class Start_Expr2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Expr2;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	expr2() {
	    return this.getTypedRuleContext(Expr2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Expr2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Expr2(this);
		}
	}


}



class Start_ListExpr2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListExpr2;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listExpr2() {
	    return this.getTypedRuleContext(ListExpr2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListExpr2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListExpr2(this);
		}
	}


}



class Start_Expr3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Expr3;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	expr3() {
	    return this.getTypedRuleContext(Expr3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Expr3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Expr3(this);
		}
	}


}



class Start_Expr4Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Expr4;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	expr4() {
	    return this.getTypedRuleContext(Expr4Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Expr4(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Expr4(this);
		}
	}


}



class Start_Expr6Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Expr6;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	expr6() {
	    return this.getTypedRuleContext(Expr6Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Expr6(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Expr6(this);
		}
	}


}



class Start_Expr7Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Expr7;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	expr7() {
	    return this.getTypedRuleContext(Expr7Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Expr7(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Expr7(this);
		}
	}


}



class Start_TypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Type;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Type(this);
		}
	}


}



class Start_Type1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Type1;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	type1() {
	    return this.getTypedRuleContext(Type1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Type1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Type1(this);
		}
	}


}



class Start_Type2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Type2;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	type2() {
	    return this.getTypedRuleContext(Type2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Type2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Type2(this);
		}
	}


}



class Start_Type3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Type3;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	type3() {
	    return this.getTypedRuleContext(Type3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Type3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Type3(this);
		}
	}


}



class Start_ListTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListType;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listType() {
	    return this.getTypedRuleContext(ListTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListType(this);
		}
	}


}



class Start_Expr5Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Expr5;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	expr5() {
	    return this.getTypedRuleContext(Expr5Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Expr5(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Expr5(this);
		}
	}


}



class Start_VariantFieldTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_VariantFieldType;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	variantFieldType() {
	    return this.getTypedRuleContext(VariantFieldTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_VariantFieldType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_VariantFieldType(this);
		}
	}


}



class Start_ListVariantFieldTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListVariantFieldType;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listVariantFieldType() {
	    return this.getTypedRuleContext(ListVariantFieldTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListVariantFieldType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListVariantFieldType(this);
		}
	}


}



class Start_RecordFieldTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_RecordFieldType;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	recordFieldType() {
	    return this.getTypedRuleContext(RecordFieldTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_RecordFieldType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_RecordFieldType(this);
		}
	}


}



class Start_ListRecordFieldTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_ListRecordFieldType;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	listRecordFieldType() {
	    return this.getTypedRuleContext(ListRecordFieldTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_ListRecordFieldType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_ListRecordFieldType(this);
		}
	}


}



class Start_TypingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_start_Typing;
        this.result = null
        this.x = null;
    }

	EOF() {
	    return this.getToken(stellaParser.EOF, 0);
	};

	typing() {
	    return this.getTypedRuleContext(TypingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterStart_Typing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitStart_Typing(this);
		}
	}


}



class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_program;
        this.result = null
        this.p_1_1 = null;
        this.p_1_2 = null;
        this.p_1_3 = null;
    }

	languageDecl() {
	    return this.getTypedRuleContext(LanguageDeclContext,0);
	};

	listExtension() {
	    return this.getTypedRuleContext(ListExtensionContext,0);
	};

	listDecl() {
	    return this.getTypedRuleContext(ListDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitProgram(this);
		}
	}


}



class ListStellaIdentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listStellaIdent;
        this.result = null
        this.p_2_1 = null;
        this.p_3_1 = null;
        this.p_3_3 = null;
    }

	StellaIdent() {
	    return this.getToken(stellaParser.StellaIdent, 0);
	};

	Surrogate_id_SYMB_0() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_0, 0);
	};

	listStellaIdent() {
	    return this.getTypedRuleContext(ListStellaIdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListStellaIdent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListStellaIdent(this);
		}
	}


}



class LanguageDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_languageDecl;
        this.result = null
    }

	Surrogate_id_SYMB_50() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_50, 0);
	};

	Surrogate_id_SYMB_38() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_38, 0);
	};

	Surrogate_id_SYMB_1() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_1, 0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterLanguageDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitLanguageDecl(this);
		}
	}


}



class ExtensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_extension;
        this.result = null
        this.p_1_3 = null;
    }

	Surrogate_id_SYMB_40() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_40, 0);
	};

	Surrogate_id_SYMB_64() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_64, 0);
	};

	listExtensionName() {
	    return this.getTypedRuleContext(ListExtensionNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterExtension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitExtension(this);
		}
	}


}



class ListExtensionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listExtensionName;
        this.result = null
        this.p_2_1 = null;
        this.p_3_1 = null;
        this.p_3_3 = null;
    }

	ExtensionName() {
	    return this.getToken(stellaParser.ExtensionName, 0);
	};

	Surrogate_id_SYMB_0() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_0, 0);
	};

	listExtensionName() {
	    return this.getTypedRuleContext(ListExtensionNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListExtensionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListExtensionName(this);
		}
	}


}



class ListExtensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listExtension;
        this.result = null
        this.p_2_1 = null;
        this.p_2_2 = null;
    }

	Surrogate_id_SYMB_1() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_1, 0);
	};

	listExtension() {
	    return this.getTypedRuleContext(ListExtensionContext,0);
	};

	extension() {
	    return this.getTypedRuleContext(ExtensionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListExtension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListExtension(this);
		}
	}


}



class DeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_decl;
        this.result = null
        this.p_1_1 = null;
        this.p_1_3 = null;
        this.p_1_5 = null;
        this.p_1_7 = null;
        this.p_1_8 = null;
        this.p_1_10 = null;
        this.p_1_12 = null;
        this.p_2_2 = null;
        this.p_2_4 = null;
    }

	Surrogate_id_SYMB_43() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_43, 0);
	};

	Surrogate_id_SYMB_2() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_2, 0);
	};

	Surrogate_id_SYMB_3() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_3, 0);
	};

	Surrogate_id_SYMB_4() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_4, 0);
	};

	Surrogate_id_SYMB_56() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_56, 0);
	};

	Surrogate_id_SYMB_5() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_5, 0);
	};

	listAnnotation() {
	    return this.getTypedRuleContext(ListAnnotationContext,0);
	};

	StellaIdent() {
	    return this.getToken(stellaParser.StellaIdent, 0);
	};

	listParamDecl() {
	    return this.getTypedRuleContext(ListParamDeclContext,0);
	};

	returnType() {
	    return this.getTypedRuleContext(ReturnTypeContext,0);
	};

	throwType() {
	    return this.getTypedRuleContext(ThrowTypeContext,0);
	};

	listDecl() {
	    return this.getTypedRuleContext(ListDeclContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	Surrogate_id_SYMB_61() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_61, 0);
	};

	Surrogate_id_SYMB_6() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_6, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitDecl(this);
		}
	}


}



class ListDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listDecl;
        this.result = null
        this.p_2_1 = null;
        this.p_2_2 = null;
    }

	listDecl() {
	    return this.getTypedRuleContext(ListDeclContext,0);
	};

	decl() {
	    return this.getTypedRuleContext(DeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListDecl(this);
		}
	}


}



class LocalDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_localDecl;
        this.result = null
        this.p_1_1 = null;
    }

	decl() {
	    return this.getTypedRuleContext(DeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterLocalDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitLocalDecl(this);
		}
	}


}



class ListLocalDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listLocalDecl;
        this.result = null
        this.p_2_1 = null;
        this.p_2_2 = null;
    }

	Surrogate_id_SYMB_1() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_1, 0);
	};

	listLocalDecl() {
	    return this.getTypedRuleContext(ListLocalDeclContext,0);
	};

	localDecl() {
	    return this.getTypedRuleContext(LocalDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListLocalDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListLocalDecl(this);
		}
	}


}



class AnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_annotation;
        this.result = null
    }

	Surrogate_id_SYMB_48() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_48, 0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitAnnotation(this);
		}
	}


}



class ListAnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listAnnotation;
        this.result = null
        this.p_2_1 = null;
        this.p_2_2 = null;
    }

	listAnnotation() {
	    return this.getTypedRuleContext(ListAnnotationContext,0);
	};

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListAnnotation(this);
		}
	}


}



class ParamDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_paramDecl;
        this.result = null
        this.p_1_1 = null;
        this.p_1_3 = null;
    }

	Surrogate_id_SYMB_7() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_7, 0);
	};

	StellaIdent() {
	    return this.getToken(stellaParser.StellaIdent, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterParamDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitParamDecl(this);
		}
	}


}



class ListParamDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listParamDecl;
        this.result = null
        this.p_2_1 = null;
        this.p_3_1 = null;
        this.p_3_3 = null;
    }

	paramDecl() {
	    return this.getTypedRuleContext(ParamDeclContext,0);
	};

	Surrogate_id_SYMB_0() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_0, 0);
	};

	listParamDecl() {
	    return this.getTypedRuleContext(ListParamDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListParamDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListParamDecl(this);
		}
	}


}



class ReturnTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_returnType;
        this.result = null
        this.p_2_2 = null;
    }

	Surrogate_id_SYMB_8() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_8, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterReturnType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitReturnType(this);
		}
	}


}



class ThrowTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_throwType;
        this.result = null
        this.p_2_2 = null;
    }

	Surrogate_id_SYMB_59() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_59, 0);
	};

	listType9() {
	    return this.getTypedRuleContext(ListType9Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterThrowType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitThrowType(this);
		}
	}


}



class Type9Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_type9;
        this.result = null
        this.p_1_1 = null;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterType9(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitType9(this);
		}
	}


}



class ListType9Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listType9;
        this.result = null
        this.p_1_1 = null;
        this.p_2_1 = null;
        this.p_2_3 = null;
    }

	type9() {
	    return this.getTypedRuleContext(Type9Context,0);
	};

	Surrogate_id_SYMB_0() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_0, 0);
	};

	listType9() {
	    return this.getTypedRuleContext(ListType9Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListType9(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListType9(this);
		}
	}


}



class MatchCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_matchCase;
        this.result = null
        this.p_1_1 = null;
        this.p_1_3 = null;
    }

	Surrogate_id_SYMB_9() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_9, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterMatchCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitMatchCase(this);
		}
	}


}



class ListMatchCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listMatchCase;
        this.result = null
        this.p_2_1 = null;
        this.p_3_1 = null;
        this.p_3_3 = null;
    }

	matchCase() {
	    return this.getTypedRuleContext(MatchCaseContext,0);
	};

	Surrogate_id_SYMB_10() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_10, 0);
	};

	listMatchCase() {
	    return this.getTypedRuleContext(ListMatchCaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListMatchCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListMatchCase(this);
		}
	}


}



class OptionalTypingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_optionalTyping;
        this.result = null
        this.p_2_2 = null;
    }

	Surrogate_id_SYMB_7() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_7, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterOptionalTyping(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitOptionalTyping(this);
		}
	}


}



class PatternDataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_patternData;
        this.result = null
        this.p_2_2 = null;
    }

	Surrogate_id_SYMB_6() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_6, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterPatternData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitPatternData(this);
		}
	}


}



class ExprDataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_exprData;
        this.result = null
        this.p_2_2 = null;
    }

	Surrogate_id_SYMB_6() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_6, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterExprData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitExprData(this);
		}
	}


}



class PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_pattern;
        this.result = null
        this.p_1_2 = null;
        this.p_1_3 = null;
        this.p_2_3 = null;
        this.p_3_3 = null;
        this.p_4_2 = null;
        this.p_5_2 = null;
        this.p_6_2 = null;
        this.p_7_2 = null;
        this.p_7_4 = null;
        this.p_11_1 = null;
        this.p_12_3 = null;
        this.p_13_1 = null;
        this.p_14_2 = null;
    }

	Surrogate_id_SYMB_11() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_11, 0);
	};

	Surrogate_id_SYMB_12() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_12, 0);
	};

	StellaIdent() {
	    return this.getToken(stellaParser.StellaIdent, 0);
	};

	patternData() {
	    return this.getTypedRuleContext(PatternDataContext,0);
	};

	Surrogate_id_SYMB_47() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_47, 0);
	};

	Surrogate_id_SYMB_2() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_2, 0);
	};

	Surrogate_id_SYMB_3() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_3, 0);
	};

	pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatternContext);
	    } else {
	        return this.getTypedRuleContext(PatternContext,i);
	    }
	};

	Surrogate_id_SYMB_49() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_49, 0);
	};

	Surrogate_id_SYMB_4() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_4, 0);
	};

	Surrogate_id_SYMB_5() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_5, 0);
	};

	listPattern() {
	    return this.getTypedRuleContext(ListPatternContext,0);
	};

	listLabelledPattern() {
	    return this.getTypedRuleContext(ListLabelledPatternContext,0);
	};

	Surrogate_id_SYMB_13() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_13, 0);
	};

	Surrogate_id_SYMB_14() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_14, 0);
	};

	Surrogate_id_SYMB_0() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_0, 0);
	};

	Surrogate_id_SYMB_41() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_41, 0);
	};

	Surrogate_id_SYMB_60() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_60, 0);
	};

	Surrogate_id_SYMB_63() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_63, 0);
	};

	INTEGER() {
	    return this.getToken(stellaParser.INTEGER, 0);
	};

	Surrogate_id_SYMB_57() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_57, 0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitPattern(this);
		}
	}


}



class ListPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listPattern;
        this.result = null
        this.p_2_1 = null;
        this.p_3_1 = null;
        this.p_3_3 = null;
    }

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	Surrogate_id_SYMB_0() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_0, 0);
	};

	listPattern() {
	    return this.getTypedRuleContext(ListPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListPattern(this);
		}
	}


}



class LabelledPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_labelledPattern;
        this.result = null
        this.p_1_1 = null;
        this.p_1_3 = null;
    }

	Surrogate_id_SYMB_6() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_6, 0);
	};

	StellaIdent() {
	    return this.getToken(stellaParser.StellaIdent, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterLabelledPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitLabelledPattern(this);
		}
	}


}



class ListLabelledPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listLabelledPattern;
        this.result = null
        this.p_1_1 = null;
        this.p_2_1 = null;
        this.p_2_3 = null;
    }

	labelledPattern() {
	    return this.getTypedRuleContext(LabelledPatternContext,0);
	};

	Surrogate_id_SYMB_0() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_0, 0);
	};

	listLabelledPattern() {
	    return this.getTypedRuleContext(ListLabelledPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListLabelledPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListLabelledPattern(this);
		}
	}


}



class BindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_binding;
        this.result = null
        this.p_1_1 = null;
        this.p_1_3 = null;
    }

	Surrogate_id_SYMB_6() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_6, 0);
	};

	StellaIdent() {
	    return this.getToken(stellaParser.StellaIdent, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitBinding(this);
		}
	}


}



class ListBindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listBinding;
        this.result = null
        this.p_1_1 = null;
        this.p_2_1 = null;
        this.p_2_3 = null;
    }

	binding() {
	    return this.getTypedRuleContext(BindingContext,0);
	};

	Surrogate_id_SYMB_0() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_0, 0);
	};

	listBinding() {
	    return this.getTypedRuleContext(ListBindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListBinding(this);
		}
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_expr;
        this.result = null
        this.p_1_1 = null;
        this.p_1_3 = null;
        this.p_2_1 = null;
        this.p_3_1 = null;
    }

	Surrogate_id_SYMB_1() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_1, 0);
	};

	expr1() {
	    return this.getTypedRuleContext(Expr1Context,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitExpr(this);
		}
	}


}



class ListExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listExpr;
        this.result = null
        this.p_2_1 = null;
        this.p_3_1 = null;
        this.p_3_3 = null;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	Surrogate_id_SYMB_0() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_0, 0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListExpr(this);
		}
	}


}



class Expr1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_expr1;
        this.result = null
        this.p_1_2 = null;
        this.p_1_4 = null;
        this.p_1_6 = null;
        this.p_2_2 = null;
        this.p_2_4 = null;
        this.p_3_2 = null;
        this.p_3_4 = null;
        this.p_4_1 = null;
    }

	Surrogate_id_SYMB_45() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_45, 0);
	};

	Surrogate_id_SYMB_58() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_58, 0);
	};

	Surrogate_id_SYMB_39() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_39, 0);
	};

	expr1 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr1Context);
	    } else {
	        return this.getTypedRuleContext(Expr1Context,i);
	    }
	};

	Surrogate_id_SYMB_51() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_51, 0);
	};

	Surrogate_id_SYMB_46() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_46, 0);
	};

	listPatternBinding() {
	    return this.getTypedRuleContext(ListPatternBindingContext,0);
	};

	Surrogate_id_SYMB_52() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_52, 0);
	};

	expr2() {
	    return this.getTypedRuleContext(Expr2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterExpr1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitExpr1(this);
		}
	}


}



class PatternBindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_patternBinding;
        this.result = null
        this.p_1_1 = null;
        this.p_1_3 = null;
    }

	Surrogate_id_SYMB_6() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_6, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterPatternBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitPatternBinding(this);
		}
	}


}



class ListPatternBindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listPatternBinding;
        this.result = null
        this.p_1_1 = null;
        this.p_2_1 = null;
        this.p_2_3 = null;
    }

	patternBinding() {
	    return this.getTypedRuleContext(PatternBindingContext,0);
	};

	Surrogate_id_SYMB_0() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_0, 0);
	};

	listPatternBinding() {
	    return this.getTypedRuleContext(ListPatternBindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListPatternBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListPatternBinding(this);
		}
	}


}



class Expr2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_expr2;
        this.result = null
        this.p_1_1 = null;
        this.p_1_3 = null;
        this.p_2_1 = null;
        this.p_2_3 = null;
        this.p_3_1 = null;
        this.p_3_3 = null;
        this.p_4_1 = null;
        this.p_4_3 = null;
        this.p_5_1 = null;
        this.p_5_3 = null;
        this.p_6_1 = null;
        this.p_6_3 = null;
        this.p_7_1 = null;
    }

	Surrogate_id_SYMB_15() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_15, 0);
	};

	expr3 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expr3Context);
	    } else {
	        return this.getTypedRuleContext(Expr3Context,i);
	    }
	};

	Surrogate_id_SYMB_16() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_16, 0);
	};

	Surrogate_id_SYMB_17() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_17, 0);
	};

	Surrogate_id_SYMB_18() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_18, 0);
	};

	Surrogate_id_SYMB_19() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_19, 0);
	};

	Surrogate_id_SYMB_20() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_20, 0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterExpr2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitExpr2(this);
		}
	}


}



class ListExpr2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listExpr2;
        this.result = null
        this.p_1_1 = null;
        this.p_2_1 = null;
        this.p_2_3 = null;
    }

	Surrogate_id_SYMB_1() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_1, 0);
	};

	expr2() {
	    return this.getTypedRuleContext(Expr2Context,0);
	};

	listExpr2() {
	    return this.getTypedRuleContext(ListExpr2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListExpr2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListExpr2(this);
		}
	}


}



class Expr3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_expr3;
        this.result = null
        this.p_1_1 = null;
        this.p_6_1 = null;
        this.p_7_1 = null;
        this.p_8_1 = null;
        this.p_2_3 = null;
        this.p_2_7 = null;
        this.p_3_2 = null;
        this.p_3_3 = null;
        this.p_4_2 = null;
        this.p_4_4 = null;
        this.p_5_2 = null;
        this.p_9_1 = null;
        this.p_1_3 = null;
        this.p_6_3 = null;
        this.p_7_3 = null;
        this.p_8_3 = null;
    }

	Surrogate_id_SYMB_43() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_43, 0);
	};

	Surrogate_id_SYMB_2() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_2, 0);
	};

	Surrogate_id_SYMB_3() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_3, 0);
	};

	Surrogate_id_SYMB_4() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_4, 0);
	};

	Surrogate_id_SYMB_56() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_56, 0);
	};

	Surrogate_id_SYMB_5() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_5, 0);
	};

	listParamDecl() {
	    return this.getTypedRuleContext(ListParamDeclContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	Surrogate_id_SYMB_11() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_11, 0);
	};

	Surrogate_id_SYMB_12() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_12, 0);
	};

	StellaIdent() {
	    return this.getToken(stellaParser.StellaIdent, 0);
	};

	exprData() {
	    return this.getTypedRuleContext(ExprDataContext,0);
	};

	Surrogate_id_SYMB_53() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_53, 0);
	};

	expr2() {
	    return this.getTypedRuleContext(Expr2Context,0);
	};

	listMatchCase() {
	    return this.getTypedRuleContext(ListMatchCaseContext,0);
	};

	Surrogate_id_SYMB_13() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_13, 0);
	};

	Surrogate_id_SYMB_14() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_14, 0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	expr4() {
	    return this.getTypedRuleContext(Expr4Context,0);
	};

	Surrogate_id_SYMB_36() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_36, 0);
	};

	expr3() {
	    return this.getTypedRuleContext(Expr3Context,0);
	};

	type2() {
	    return this.getTypedRuleContext(Type2Context,0);
	};

	Surrogate_id_SYMB_21() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_21, 0);
	};

	Surrogate_id_SYMB_22() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_22, 0);
	};

	Surrogate_id_SYMB_55() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_55, 0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterExpr3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitExpr3(this);
		}
	}


}



class Expr4Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_expr4;
        this.result = null
        this.p_1_1 = null;
        this.p_2_1 = null;
        this.p_3_1 = null;
        this.p_4_1 = null;
        this.p_1_3 = null;
        this.p_2_3 = null;
        this.p_3_3 = null;
    }

	expr5() {
	    return this.getTypedRuleContext(Expr5Context,0);
	};

	Surrogate_id_SYMB_23() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_23, 0);
	};

	expr4() {
	    return this.getTypedRuleContext(Expr4Context,0);
	};

	Surrogate_id_SYMB_24() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_24, 0);
	};

	Surrogate_id_SYMB_35() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_35, 0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterExpr4(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitExpr4(this);
		}
	}


}



class Expr6Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_expr6;
        this.result = null
        this.p_1_1 = null;
        this.p_2_1 = null;
        this.p_3_1 = null;
        this.p_4_2 = null;
        this.p_5_2 = null;
        this.p_6_3 = null;
        this.p_6_5 = null;
        this.p_7_3 = null;
        this.p_8_3 = null;
        this.p_9_3 = null;
        this.p_10_3 = null;
        this.p_11_3 = null;
        this.p_12_3 = null;
        this.p_13_3 = null;
        this.p_14_3 = null;
        this.p_15_3 = null;
        this.p_16_3 = null;
        this.p_17_3 = null;
        this.p_17_5 = null;
        this.p_17_7 = null;
        this.p_18_3 = null;
        this.p_18_5 = null;
        this.p_19_3 = null;
        this.p_19_5 = null;
        this.p_20_1 = null;
        this.p_1_3 = null;
        this.p_2_3 = null;
        this.p_3_3 = null;
    }

	Surrogate_id_SYMB_4() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_4, 0);
	};

	Surrogate_id_SYMB_5() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_5, 0);
	};

	listExpr() {
	    return this.getTypedRuleContext(ListExprContext,0);
	};

	listBinding() {
	    return this.getTypedRuleContext(ListBindingContext,0);
	};

	Surrogate_id_SYMB_37() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_37, 0);
	};

	Surrogate_id_SYMB_2() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_2, 0);
	};

	Surrogate_id_SYMB_0 = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(stellaParser.Surrogate_id_SYMB_0);
	    } else {
	        return this.getToken(stellaParser.Surrogate_id_SYMB_0, i);
	    }
	};


	Surrogate_id_SYMB_3() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_3, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	Surrogate_id_SYMB_26() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_26, 0);
	};

	Surrogate_id_SYMB_27() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_27, 0);
	};

	Surrogate_id_SYMB_28() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_28, 0);
	};

	Surrogate_id_SYMB_47() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_47, 0);
	};

	Surrogate_id_SYMB_49() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_49, 0);
	};

	Surrogate_id_SYMB_57() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_57, 0);
	};

	Surrogate_id_SYMB_54() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_54, 0);
	};

	Surrogate_id_SYMB_29() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_29, 0);
	};

	Surrogate_id_SYMB_30() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_30, 0);
	};

	Surrogate_id_SYMB_42() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_42, 0);
	};

	Surrogate_id_SYMB_31() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_31, 0);
	};

	Surrogate_id_SYMB_44() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_44, 0);
	};

	Surrogate_id_SYMB_13() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_13, 0);
	};

	Surrogate_id_SYMB_14() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_14, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	expr7() {
	    return this.getTypedRuleContext(Expr7Context,0);
	};

	Surrogate_id_SYMB_62() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_62, 0);
	};

	expr6() {
	    return this.getTypedRuleContext(Expr6Context,0);
	};

	Surrogate_id_SYMB_25() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_25, 0);
	};

	StellaIdent() {
	    return this.getToken(stellaParser.StellaIdent, 0);
	};

	INTEGER() {
	    return this.getToken(stellaParser.INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterExpr6(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitExpr6(this);
		}
	}


}



class Expr7Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_expr7;
        this.result = null
        this.p_4_1 = null;
        this.p_5_1 = null;
        this.p_6_2 = null;
    }

	Surrogate_id_SYMB_60() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_60, 0);
	};

	Surrogate_id_SYMB_41() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_41, 0);
	};

	Surrogate_id_SYMB_63() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_63, 0);
	};

	INTEGER() {
	    return this.getToken(stellaParser.INTEGER, 0);
	};

	StellaIdent() {
	    return this.getToken(stellaParser.StellaIdent, 0);
	};

	Surrogate_id_SYMB_2() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_2, 0);
	};

	Surrogate_id_SYMB_3() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_3, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterExpr7(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitExpr7(this);
		}
	}


}



class TypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_type;
        this.result = null
        this.p_1_3 = null;
        this.p_1_6 = null;
        this.p_2_2 = null;
        this.p_2_4 = null;
        this.p_3_1 = null;
    }

	Surrogate_id_SYMB_43() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_43, 0);
	};

	Surrogate_id_SYMB_2() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_2, 0);
	};

	Surrogate_id_SYMB_3() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_3, 0);
	};

	Surrogate_id_SYMB_8() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_8, 0);
	};

	listType() {
	    return this.getTypedRuleContext(ListTypeContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	Surrogate_id_SYMB_65() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_65, 0);
	};

	Surrogate_id_SYMB_25() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_25, 0);
	};

	StellaIdent() {
	    return this.getToken(stellaParser.StellaIdent, 0);
	};

	type1() {
	    return this.getTypedRuleContext(Type1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitType(this);
		}
	}


}



class Type1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_type1;
        this.result = null
        this.p_1_1 = null;
        this.p_1_3 = null;
        this.p_2_1 = null;
    }

	Surrogate_id_SYMB_21() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_21, 0);
	};

	type2 = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type2Context);
	    } else {
	        return this.getTypedRuleContext(Type2Context,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterType1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitType1(this);
		}
	}


}



class Type2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_type2;
        this.result = null
        this.p_1_2 = null;
        this.p_2_2 = null;
        this.p_3_2 = null;
        this.p_4_2 = null;
        this.p_5_1 = null;
    }

	Surrogate_id_SYMB_4() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_4, 0);
	};

	Surrogate_id_SYMB_5() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_5, 0);
	};

	listType() {
	    return this.getTypedRuleContext(ListTypeContext,0);
	};

	listRecordFieldType() {
	    return this.getTypedRuleContext(ListRecordFieldTypeContext,0);
	};

	Surrogate_id_SYMB_11() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_11, 0);
	};

	Surrogate_id_SYMB_12() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_12, 0);
	};

	listVariantFieldType() {
	    return this.getTypedRuleContext(ListVariantFieldTypeContext,0);
	};

	Surrogate_id_SYMB_13() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_13, 0);
	};

	Surrogate_id_SYMB_14() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_14, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	type3() {
	    return this.getTypedRuleContext(Type3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterType2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitType2(this);
		}
	}


}



class Type3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_type3;
        this.result = null
        this.p_4_1 = null;
        this.p_5_2 = null;
    }

	Surrogate_id_SYMB_32() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_32, 0);
	};

	Surrogate_id_SYMB_33() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_33, 0);
	};

	Surrogate_id_SYMB_34() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_34, 0);
	};

	StellaIdent() {
	    return this.getToken(stellaParser.StellaIdent, 0);
	};

	Surrogate_id_SYMB_2() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_2, 0);
	};

	Surrogate_id_SYMB_3() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_3, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterType3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitType3(this);
		}
	}


}



class ListTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listType;
        this.result = null
        this.p_2_1 = null;
        this.p_3_1 = null;
        this.p_3_3 = null;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	Surrogate_id_SYMB_0() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_0, 0);
	};

	listType() {
	    return this.getTypedRuleContext(ListTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListType(this);
		}
	}


}



class Expr5Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_expr5;
        this.result = null
        this.p_1_1 = null;
    }

	expr6() {
	    return this.getTypedRuleContext(Expr6Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterExpr5(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitExpr5(this);
		}
	}


}



class VariantFieldTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_variantFieldType;
        this.result = null
        this.p_1_1 = null;
        this.p_1_2 = null;
    }

	StellaIdent() {
	    return this.getToken(stellaParser.StellaIdent, 0);
	};

	optionalTyping() {
	    return this.getTypedRuleContext(OptionalTypingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterVariantFieldType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitVariantFieldType(this);
		}
	}


}



class ListVariantFieldTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listVariantFieldType;
        this.result = null
        this.p_2_1 = null;
        this.p_3_1 = null;
        this.p_3_3 = null;
    }

	variantFieldType() {
	    return this.getTypedRuleContext(VariantFieldTypeContext,0);
	};

	Surrogate_id_SYMB_0() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_0, 0);
	};

	listVariantFieldType() {
	    return this.getTypedRuleContext(ListVariantFieldTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListVariantFieldType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListVariantFieldType(this);
		}
	}


}



class RecordFieldTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_recordFieldType;
        this.result = null
        this.p_1_1 = null;
        this.p_1_3 = null;
    }

	Surrogate_id_SYMB_7() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_7, 0);
	};

	StellaIdent() {
	    return this.getToken(stellaParser.StellaIdent, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterRecordFieldType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitRecordFieldType(this);
		}
	}


}



class ListRecordFieldTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_listRecordFieldType;
        this.result = null
        this.p_1_1 = null;
        this.p_2_1 = null;
        this.p_2_3 = null;
    }

	recordFieldType() {
	    return this.getTypedRuleContext(RecordFieldTypeContext,0);
	};

	Surrogate_id_SYMB_0() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_0, 0);
	};

	listRecordFieldType() {
	    return this.getTypedRuleContext(ListRecordFieldTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterListRecordFieldType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitListRecordFieldType(this);
		}
	}


}



class TypingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = stellaParser.RULE_typing;
        this.result = null
        this.p_1_1 = null;
        this.p_1_3 = null;
    }

	Surrogate_id_SYMB_7() {
	    return this.getToken(stellaParser.Surrogate_id_SYMB_7, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.enterTyping(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof stellaParserListener ) {
	        listener.exitTyping(this);
		}
	}


}




stellaParser.Start_ProgramContext = Start_ProgramContext; 
stellaParser.Start_ListStellaIdentContext = Start_ListStellaIdentContext; 
stellaParser.Start_LanguageDeclContext = Start_LanguageDeclContext; 
stellaParser.Start_ExtensionContext = Start_ExtensionContext; 
stellaParser.Start_ListExtensionNameContext = Start_ListExtensionNameContext; 
stellaParser.Start_ListExtensionContext = Start_ListExtensionContext; 
stellaParser.Start_DeclContext = Start_DeclContext; 
stellaParser.Start_ListDeclContext = Start_ListDeclContext; 
stellaParser.Start_LocalDeclContext = Start_LocalDeclContext; 
stellaParser.Start_ListLocalDeclContext = Start_ListLocalDeclContext; 
stellaParser.Start_AnnotationContext = Start_AnnotationContext; 
stellaParser.Start_ListAnnotationContext = Start_ListAnnotationContext; 
stellaParser.Start_ParamDeclContext = Start_ParamDeclContext; 
stellaParser.Start_ListParamDeclContext = Start_ListParamDeclContext; 
stellaParser.Start_ReturnTypeContext = Start_ReturnTypeContext; 
stellaParser.Start_ThrowTypeContext = Start_ThrowTypeContext; 
stellaParser.Start_Type9Context = Start_Type9Context; 
stellaParser.Start_ListType9Context = Start_ListType9Context; 
stellaParser.Start_MatchCaseContext = Start_MatchCaseContext; 
stellaParser.Start_ListMatchCaseContext = Start_ListMatchCaseContext; 
stellaParser.Start_OptionalTypingContext = Start_OptionalTypingContext; 
stellaParser.Start_PatternDataContext = Start_PatternDataContext; 
stellaParser.Start_ExprDataContext = Start_ExprDataContext; 
stellaParser.Start_PatternContext = Start_PatternContext; 
stellaParser.Start_ListPatternContext = Start_ListPatternContext; 
stellaParser.Start_LabelledPatternContext = Start_LabelledPatternContext; 
stellaParser.Start_ListLabelledPatternContext = Start_ListLabelledPatternContext; 
stellaParser.Start_BindingContext = Start_BindingContext; 
stellaParser.Start_ListBindingContext = Start_ListBindingContext; 
stellaParser.Start_ExprContext = Start_ExprContext; 
stellaParser.Start_ListExprContext = Start_ListExprContext; 
stellaParser.Start_Expr1Context = Start_Expr1Context; 
stellaParser.Start_PatternBindingContext = Start_PatternBindingContext; 
stellaParser.Start_ListPatternBindingContext = Start_ListPatternBindingContext; 
stellaParser.Start_Expr2Context = Start_Expr2Context; 
stellaParser.Start_ListExpr2Context = Start_ListExpr2Context; 
stellaParser.Start_Expr3Context = Start_Expr3Context; 
stellaParser.Start_Expr4Context = Start_Expr4Context; 
stellaParser.Start_Expr6Context = Start_Expr6Context; 
stellaParser.Start_Expr7Context = Start_Expr7Context; 
stellaParser.Start_TypeContext = Start_TypeContext; 
stellaParser.Start_Type1Context = Start_Type1Context; 
stellaParser.Start_Type2Context = Start_Type2Context; 
stellaParser.Start_Type3Context = Start_Type3Context; 
stellaParser.Start_ListTypeContext = Start_ListTypeContext; 
stellaParser.Start_Expr5Context = Start_Expr5Context; 
stellaParser.Start_VariantFieldTypeContext = Start_VariantFieldTypeContext; 
stellaParser.Start_ListVariantFieldTypeContext = Start_ListVariantFieldTypeContext; 
stellaParser.Start_RecordFieldTypeContext = Start_RecordFieldTypeContext; 
stellaParser.Start_ListRecordFieldTypeContext = Start_ListRecordFieldTypeContext; 
stellaParser.Start_TypingContext = Start_TypingContext; 
stellaParser.ProgramContext = ProgramContext; 
stellaParser.ListStellaIdentContext = ListStellaIdentContext; 
stellaParser.LanguageDeclContext = LanguageDeclContext; 
stellaParser.ExtensionContext = ExtensionContext; 
stellaParser.ListExtensionNameContext = ListExtensionNameContext; 
stellaParser.ListExtensionContext = ListExtensionContext; 
stellaParser.DeclContext = DeclContext; 
stellaParser.ListDeclContext = ListDeclContext; 
stellaParser.LocalDeclContext = LocalDeclContext; 
stellaParser.ListLocalDeclContext = ListLocalDeclContext; 
stellaParser.AnnotationContext = AnnotationContext; 
stellaParser.ListAnnotationContext = ListAnnotationContext; 
stellaParser.ParamDeclContext = ParamDeclContext; 
stellaParser.ListParamDeclContext = ListParamDeclContext; 
stellaParser.ReturnTypeContext = ReturnTypeContext; 
stellaParser.ThrowTypeContext = ThrowTypeContext; 
stellaParser.Type9Context = Type9Context; 
stellaParser.ListType9Context = ListType9Context; 
stellaParser.MatchCaseContext = MatchCaseContext; 
stellaParser.ListMatchCaseContext = ListMatchCaseContext; 
stellaParser.OptionalTypingContext = OptionalTypingContext; 
stellaParser.PatternDataContext = PatternDataContext; 
stellaParser.ExprDataContext = ExprDataContext; 
stellaParser.PatternContext = PatternContext; 
stellaParser.ListPatternContext = ListPatternContext; 
stellaParser.LabelledPatternContext = LabelledPatternContext; 
stellaParser.ListLabelledPatternContext = ListLabelledPatternContext; 
stellaParser.BindingContext = BindingContext; 
stellaParser.ListBindingContext = ListBindingContext; 
stellaParser.ExprContext = ExprContext; 
stellaParser.ListExprContext = ListExprContext; 
stellaParser.Expr1Context = Expr1Context; 
stellaParser.PatternBindingContext = PatternBindingContext; 
stellaParser.ListPatternBindingContext = ListPatternBindingContext; 
stellaParser.Expr2Context = Expr2Context; 
stellaParser.ListExpr2Context = ListExpr2Context; 
stellaParser.Expr3Context = Expr3Context; 
stellaParser.Expr4Context = Expr4Context; 
stellaParser.Expr6Context = Expr6Context; 
stellaParser.Expr7Context = Expr7Context; 
stellaParser.TypeContext = TypeContext; 
stellaParser.Type1Context = Type1Context; 
stellaParser.Type2Context = Type2Context; 
stellaParser.Type3Context = Type3Context; 
stellaParser.ListTypeContext = ListTypeContext; 
stellaParser.Expr5Context = Expr5Context; 
stellaParser.VariantFieldTypeContext = VariantFieldTypeContext; 
stellaParser.ListVariantFieldTypeContext = ListVariantFieldTypeContext; 
stellaParser.RecordFieldTypeContext = RecordFieldTypeContext; 
stellaParser.ListRecordFieldTypeContext = ListRecordFieldTypeContext; 
stellaParser.TypingContext = TypingContext; 
