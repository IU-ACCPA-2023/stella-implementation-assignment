# Generated from stella/stellaParser.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,73,931,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,
        7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,
        2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
        7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
        2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
        7,98,2,99,7,99,2,100,7,100,2,101,7,101,1,0,1,0,1,0,1,1,1,1,1,1,1,
        2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,
        7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,
        1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,
        1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,
        1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,
        1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,
        1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,
        1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,
        1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,
        1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,
        1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,
        1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,3,52,367,8,52,1,53,1,53,
        1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,3,55,382,
        8,55,1,56,1,56,1,56,1,56,1,56,5,56,389,8,56,10,56,12,56,392,9,56,
        1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
        1,57,1,57,1,57,1,57,1,57,3,57,412,8,57,1,58,1,58,1,58,5,58,417,8,
        58,10,58,12,58,420,9,58,1,59,1,59,1,60,1,60,1,60,1,60,1,60,5,60,
        429,8,60,10,60,12,60,432,9,60,1,61,1,61,1,62,1,62,1,62,5,62,439,
        8,62,10,62,12,62,442,9,62,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,
        1,64,1,64,3,64,454,8,64,1,65,1,65,1,65,3,65,459,8,65,1,66,1,66,1,
        66,3,66,464,8,66,1,67,1,67,1,68,1,68,1,68,1,68,1,68,3,68,473,8,68,
        1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,3,70,485,8,70,
        1,71,1,71,1,71,3,71,490,8,71,1,72,1,72,1,72,3,72,495,8,72,1,73,1,
        73,1,73,3,73,500,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
        74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
        74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
        74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,
        74,549,8,74,1,75,1,75,1,75,1,75,1,75,1,75,3,75,557,8,75,1,76,1,76,
        1,76,1,76,1,77,1,77,1,77,1,77,1,77,3,77,568,8,77,1,78,1,78,1,78,
        1,78,1,79,1,79,1,79,1,79,1,79,3,79,579,8,79,1,80,1,80,1,80,1,80,
        1,80,1,80,1,80,1,80,3,80,589,8,80,1,81,1,81,1,81,1,81,1,81,1,81,
        3,81,597,8,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,617,8,82,1,83,1,83,
        1,83,1,83,1,84,1,84,1,84,1,84,1,84,3,84,628,8,84,1,85,1,85,1,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,655,8,85,1,86,
        1,86,1,86,1,86,1,86,1,86,1,86,3,86,664,8,86,1,87,1,87,1,87,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,692,8,87,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,5,87,706,
        8,87,10,87,12,87,709,9,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
        1,88,1,88,1,88,1,88,5,88,723,8,88,10,88,12,88,726,9,88,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,816,8,89,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,5,89,829,8,89,10,89,
        12,89,832,9,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,
        843,8,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
        1,91,3,91,857,8,91,1,92,1,92,1,92,1,92,1,92,3,92,864,8,92,1,93,1,
        93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,
        93,1,93,1,93,3,93,883,8,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,
        94,3,94,893,8,94,1,95,1,95,1,95,1,95,1,95,1,95,3,95,901,8,95,1,96,
        1,96,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,3,98,914,8,98,
        1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,3,100,925,8,100,
        1,101,1,101,1,101,1,101,1,101,0,7,112,116,120,124,174,176,178,102,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
        190,192,194,196,198,200,202,0,0,930,0,204,1,0,0,0,2,207,1,0,0,0,
        4,210,1,0,0,0,6,213,1,0,0,0,8,216,1,0,0,0,10,219,1,0,0,0,12,222,
        1,0,0,0,14,225,1,0,0,0,16,228,1,0,0,0,18,231,1,0,0,0,20,234,1,0,
        0,0,22,237,1,0,0,0,24,240,1,0,0,0,26,243,1,0,0,0,28,246,1,0,0,0,
        30,249,1,0,0,0,32,252,1,0,0,0,34,255,1,0,0,0,36,258,1,0,0,0,38,261,
        1,0,0,0,40,264,1,0,0,0,42,267,1,0,0,0,44,270,1,0,0,0,46,273,1,0,
        0,0,48,276,1,0,0,0,50,279,1,0,0,0,52,282,1,0,0,0,54,285,1,0,0,0,
        56,288,1,0,0,0,58,291,1,0,0,0,60,294,1,0,0,0,62,297,1,0,0,0,64,300,
        1,0,0,0,66,303,1,0,0,0,68,306,1,0,0,0,70,309,1,0,0,0,72,312,1,0,
        0,0,74,315,1,0,0,0,76,318,1,0,0,0,78,321,1,0,0,0,80,324,1,0,0,0,
        82,327,1,0,0,0,84,330,1,0,0,0,86,333,1,0,0,0,88,336,1,0,0,0,90,339,
        1,0,0,0,92,342,1,0,0,0,94,345,1,0,0,0,96,348,1,0,0,0,98,351,1,0,
        0,0,100,354,1,0,0,0,102,357,1,0,0,0,104,366,1,0,0,0,106,368,1,0,
        0,0,108,372,1,0,0,0,110,381,1,0,0,0,112,383,1,0,0,0,114,411,1,0,
        0,0,116,413,1,0,0,0,118,421,1,0,0,0,120,423,1,0,0,0,122,433,1,0,
        0,0,124,435,1,0,0,0,126,443,1,0,0,0,128,453,1,0,0,0,130,458,1,0,
        0,0,132,463,1,0,0,0,134,465,1,0,0,0,136,472,1,0,0,0,138,474,1,0,
        0,0,140,484,1,0,0,0,142,489,1,0,0,0,144,494,1,0,0,0,146,499,1,0,
        0,0,148,548,1,0,0,0,150,556,1,0,0,0,152,558,1,0,0,0,154,567,1,0,
        0,0,156,569,1,0,0,0,158,578,1,0,0,0,160,588,1,0,0,0,162,596,1,0,
        0,0,164,616,1,0,0,0,166,618,1,0,0,0,168,627,1,0,0,0,170,654,1,0,
        0,0,172,663,1,0,0,0,174,691,1,0,0,0,176,710,1,0,0,0,178,815,1,0,
        0,0,180,842,1,0,0,0,182,856,1,0,0,0,184,863,1,0,0,0,186,882,1,0,
        0,0,188,892,1,0,0,0,190,900,1,0,0,0,192,902,1,0,0,0,194,904,1,0,
        0,0,196,913,1,0,0,0,198,915,1,0,0,0,200,924,1,0,0,0,202,926,1,0,
        0,0,204,205,3,102,51,0,205,206,5,0,0,1,206,1,1,0,0,0,207,208,3,104,
        52,0,208,209,5,0,0,1,209,3,1,0,0,0,210,211,3,106,53,0,211,212,5,
        0,0,1,212,5,1,0,0,0,213,214,3,108,54,0,214,215,5,0,0,1,215,7,1,0,
        0,0,216,217,3,110,55,0,217,218,5,0,0,1,218,9,1,0,0,0,219,220,3,112,
        56,0,220,221,5,0,0,1,221,11,1,0,0,0,222,223,3,114,57,0,223,224,5,
        0,0,1,224,13,1,0,0,0,225,226,3,116,58,0,226,227,5,0,0,1,227,15,1,
        0,0,0,228,229,3,118,59,0,229,230,5,0,0,1,230,17,1,0,0,0,231,232,
        3,120,60,0,232,233,5,0,0,1,233,19,1,0,0,0,234,235,3,122,61,0,235,
        236,5,0,0,1,236,21,1,0,0,0,237,238,3,124,62,0,238,239,5,0,0,1,239,
        23,1,0,0,0,240,241,3,126,63,0,241,242,5,0,0,1,242,25,1,0,0,0,243,
        244,3,128,64,0,244,245,5,0,0,1,245,27,1,0,0,0,246,247,3,130,65,0,
        247,248,5,0,0,1,248,29,1,0,0,0,249,250,3,132,66,0,250,251,5,0,0,
        1,251,31,1,0,0,0,252,253,3,134,67,0,253,254,5,0,0,1,254,33,1,0,0,
        0,255,256,3,136,68,0,256,257,5,0,0,1,257,35,1,0,0,0,258,259,3,138,
        69,0,259,260,5,0,0,1,260,37,1,0,0,0,261,262,3,140,70,0,262,263,5,
        0,0,1,263,39,1,0,0,0,264,265,3,142,71,0,265,266,5,0,0,1,266,41,1,
        0,0,0,267,268,3,144,72,0,268,269,5,0,0,1,269,43,1,0,0,0,270,271,
        3,146,73,0,271,272,5,0,0,1,272,45,1,0,0,0,273,274,3,148,74,0,274,
        275,5,0,0,1,275,47,1,0,0,0,276,277,3,150,75,0,277,278,5,0,0,1,278,
        49,1,0,0,0,279,280,3,152,76,0,280,281,5,0,0,1,281,51,1,0,0,0,282,
        283,3,154,77,0,283,284,5,0,0,1,284,53,1,0,0,0,285,286,3,156,78,0,
        286,287,5,0,0,1,287,55,1,0,0,0,288,289,3,158,79,0,289,290,5,0,0,
        1,290,57,1,0,0,0,291,292,3,160,80,0,292,293,5,0,0,1,293,59,1,0,0,
        0,294,295,3,162,81,0,295,296,5,0,0,1,296,61,1,0,0,0,297,298,3,164,
        82,0,298,299,5,0,0,1,299,63,1,0,0,0,300,301,3,166,83,0,301,302,5,
        0,0,1,302,65,1,0,0,0,303,304,3,168,84,0,304,305,5,0,0,1,305,67,1,
        0,0,0,306,307,3,170,85,0,307,308,5,0,0,1,308,69,1,0,0,0,309,310,
        3,172,86,0,310,311,5,0,0,1,311,71,1,0,0,0,312,313,3,174,87,0,313,
        314,5,0,0,1,314,73,1,0,0,0,315,316,3,176,88,0,316,317,5,0,0,1,317,
        75,1,0,0,0,318,319,3,178,89,0,319,320,5,0,0,1,320,77,1,0,0,0,321,
        322,3,180,90,0,322,323,5,0,0,1,323,79,1,0,0,0,324,325,3,182,91,0,
        325,326,5,0,0,1,326,81,1,0,0,0,327,328,3,184,92,0,328,329,5,0,0,
        1,329,83,1,0,0,0,330,331,3,186,93,0,331,332,5,0,0,1,332,85,1,0,0,
        0,333,334,3,188,94,0,334,335,5,0,0,1,335,87,1,0,0,0,336,337,3,190,
        95,0,337,338,5,0,0,1,338,89,1,0,0,0,339,340,3,192,96,0,340,341,5,
        0,0,1,341,91,1,0,0,0,342,343,3,194,97,0,343,344,5,0,0,1,344,93,1,
        0,0,0,345,346,3,196,98,0,346,347,5,0,0,1,347,95,1,0,0,0,348,349,
        3,198,99,0,349,350,5,0,0,1,350,97,1,0,0,0,351,352,3,200,100,0,352,
        353,5,0,0,1,353,99,1,0,0,0,354,355,3,202,101,0,355,356,5,0,0,1,356,
        101,1,0,0,0,357,358,3,106,53,0,358,359,3,112,56,0,359,360,3,116,
        58,0,360,103,1,0,0,0,361,367,1,0,0,0,362,367,5,64,0,0,363,364,5,
        64,0,0,364,365,5,1,0,0,365,367,3,104,52,0,366,361,1,0,0,0,366,362,
        1,0,0,0,366,363,1,0,0,0,367,105,1,0,0,0,368,369,5,51,0,0,369,370,
        5,39,0,0,370,371,5,2,0,0,371,107,1,0,0,0,372,373,5,41,0,0,373,374,
        5,69,0,0,374,375,3,110,55,0,375,109,1,0,0,0,376,382,1,0,0,0,377,
        382,5,65,0,0,378,379,5,65,0,0,379,380,5,1,0,0,380,382,3,110,55,0,
        381,376,1,0,0,0,381,377,1,0,0,0,381,378,1,0,0,0,382,111,1,0,0,0,
        383,390,6,56,-1,0,384,385,10,1,0,0,385,386,3,108,54,0,386,387,5,
        2,0,0,387,389,1,0,0,0,388,384,1,0,0,0,389,392,1,0,0,0,390,388,1,
        0,0,0,390,391,1,0,0,0,391,113,1,0,0,0,392,390,1,0,0,0,393,394,3,
        124,62,0,394,395,5,44,0,0,395,396,5,64,0,0,396,397,5,3,0,0,397,398,
        3,128,64,0,398,399,5,4,0,0,399,400,3,130,65,0,400,401,3,132,66,0,
        401,402,5,5,0,0,402,403,3,116,58,0,403,404,5,57,0,0,404,405,3,160,
        80,0,405,406,5,6,0,0,406,412,1,0,0,0,407,408,5,70,0,0,408,409,5,
        64,0,0,409,410,5,7,0,0,410,412,3,182,91,0,411,393,1,0,0,0,411,407,
        1,0,0,0,412,115,1,0,0,0,413,418,6,58,-1,0,414,415,10,1,0,0,415,417,
        3,114,57,0,416,414,1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,419,
        1,0,0,0,419,117,1,0,0,0,420,418,1,0,0,0,421,422,3,114,57,0,422,119,
        1,0,0,0,423,430,6,60,-1,0,424,425,10,1,0,0,425,426,3,118,59,0,426,
        427,5,2,0,0,427,429,1,0,0,0,428,424,1,0,0,0,429,432,1,0,0,0,430,
        428,1,0,0,0,430,431,1,0,0,0,431,121,1,0,0,0,432,430,1,0,0,0,433,
        434,5,49,0,0,434,123,1,0,0,0,435,440,6,62,-1,0,436,437,10,1,0,0,
        437,439,3,122,61,0,438,436,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,
        0,440,441,1,0,0,0,441,125,1,0,0,0,442,440,1,0,0,0,443,444,5,64,0,
        0,444,445,5,8,0,0,445,446,3,182,91,0,446,127,1,0,0,0,447,454,1,0,
        0,0,448,454,3,126,63,0,449,450,3,126,63,0,450,451,5,1,0,0,451,452,
        3,128,64,0,452,454,1,0,0,0,453,447,1,0,0,0,453,448,1,0,0,0,453,449,
        1,0,0,0,454,129,1,0,0,0,455,459,1,0,0,0,456,457,5,9,0,0,457,459,
        3,182,91,0,458,455,1,0,0,0,458,456,1,0,0,0,459,131,1,0,0,0,460,464,
        1,0,0,0,461,462,5,60,0,0,462,464,3,136,68,0,463,460,1,0,0,0,463,
        461,1,0,0,0,464,133,1,0,0,0,465,466,3,182,91,0,466,135,1,0,0,0,467,
        473,3,134,67,0,468,469,3,134,67,0,469,470,5,1,0,0,470,471,3,136,
        68,0,471,473,1,0,0,0,472,467,1,0,0,0,472,468,1,0,0,0,473,137,1,0,
        0,0,474,475,3,148,74,0,475,476,5,10,0,0,476,477,3,160,80,0,477,139,
        1,0,0,0,478,485,1,0,0,0,479,485,3,138,69,0,480,481,3,138,69,0,481,
        482,5,11,0,0,482,483,3,140,70,0,483,485,1,0,0,0,484,478,1,0,0,0,
        484,479,1,0,0,0,484,480,1,0,0,0,485,141,1,0,0,0,486,490,1,0,0,0,
        487,488,5,8,0,0,488,490,3,182,91,0,489,486,1,0,0,0,489,487,1,0,0,
        0,490,143,1,0,0,0,491,495,1,0,0,0,492,493,5,7,0,0,493,495,3,148,
        74,0,494,491,1,0,0,0,494,492,1,0,0,0,495,145,1,0,0,0,496,500,1,0,
        0,0,497,498,5,7,0,0,498,500,3,160,80,0,499,496,1,0,0,0,499,497,1,
        0,0,0,500,147,1,0,0,0,501,502,5,12,0,0,502,503,5,64,0,0,503,504,
        3,144,72,0,504,505,5,13,0,0,505,549,1,0,0,0,506,507,5,48,0,0,507,
        508,5,3,0,0,508,509,3,148,74,0,509,510,5,4,0,0,510,549,1,0,0,0,511,
        512,5,50,0,0,512,513,5,3,0,0,513,514,3,148,74,0,514,515,5,4,0,0,
        515,549,1,0,0,0,516,517,5,5,0,0,517,518,3,150,75,0,518,519,5,6,0,
        0,519,549,1,0,0,0,520,521,5,5,0,0,521,522,3,154,77,0,522,523,5,6,
        0,0,523,549,1,0,0,0,524,525,5,14,0,0,525,526,3,150,75,0,526,527,
        5,15,0,0,527,549,1,0,0,0,528,529,5,3,0,0,529,530,3,148,74,0,530,
        531,5,1,0,0,531,532,3,148,74,0,532,533,5,4,0,0,533,549,1,0,0,0,534,
        549,5,42,0,0,535,549,5,61,0,0,536,549,5,71,0,0,537,549,5,66,0,0,
        538,539,5,58,0,0,539,540,5,3,0,0,540,541,3,148,74,0,541,542,5,4,
        0,0,542,549,1,0,0,0,543,549,5,64,0,0,544,545,5,3,0,0,545,546,3,148,
        74,0,546,547,5,4,0,0,547,549,1,0,0,0,548,501,1,0,0,0,548,506,1,0,
        0,0,548,511,1,0,0,0,548,516,1,0,0,0,548,520,1,0,0,0,548,524,1,0,
        0,0,548,528,1,0,0,0,548,534,1,0,0,0,548,535,1,0,0,0,548,536,1,0,
        0,0,548,537,1,0,0,0,548,538,1,0,0,0,548,543,1,0,0,0,548,544,1,0,
        0,0,549,149,1,0,0,0,550,557,1,0,0,0,551,557,3,148,74,0,552,553,3,
        148,74,0,553,554,5,1,0,0,554,555,3,150,75,0,555,557,1,0,0,0,556,
        550,1,0,0,0,556,551,1,0,0,0,556,552,1,0,0,0,557,151,1,0,0,0,558,
        559,5,64,0,0,559,560,5,7,0,0,560,561,3,148,74,0,561,153,1,0,0,0,
        562,568,3,152,76,0,563,564,3,152,76,0,564,565,5,1,0,0,565,566,3,
        154,77,0,566,568,1,0,0,0,567,562,1,0,0,0,567,563,1,0,0,0,568,155,
        1,0,0,0,569,570,5,64,0,0,570,571,5,7,0,0,571,572,3,160,80,0,572,
        157,1,0,0,0,573,579,3,156,78,0,574,575,3,156,78,0,575,576,5,1,0,
        0,576,577,3,158,79,0,577,579,1,0,0,0,578,573,1,0,0,0,578,574,1,0,
        0,0,579,159,1,0,0,0,580,581,3,164,82,0,581,582,5,2,0,0,582,583,3,
        160,80,0,583,589,1,0,0,0,584,585,3,164,82,0,585,586,5,2,0,0,586,
        589,1,0,0,0,587,589,3,164,82,0,588,580,1,0,0,0,588,584,1,0,0,0,588,
        587,1,0,0,0,589,161,1,0,0,0,590,597,1,0,0,0,591,597,3,160,80,0,592,
        593,3,160,80,0,593,594,5,1,0,0,594,595,3,162,81,0,595,597,1,0,0,
        0,596,590,1,0,0,0,596,591,1,0,0,0,596,592,1,0,0,0,597,163,1,0,0,
        0,598,599,5,46,0,0,599,600,3,164,82,0,600,601,5,59,0,0,601,602,3,
        164,82,0,602,603,5,40,0,0,603,604,3,164,82,0,604,617,1,0,0,0,605,
        606,5,52,0,0,606,607,3,168,84,0,607,608,5,47,0,0,608,609,3,164,82,
        0,609,617,1,0,0,0,610,611,5,53,0,0,611,612,3,168,84,0,612,613,5,
        47,0,0,613,614,3,164,82,0,614,617,1,0,0,0,615,617,3,170,85,0,616,
        598,1,0,0,0,616,605,1,0,0,0,616,610,1,0,0,0,616,615,1,0,0,0,617,
        165,1,0,0,0,618,619,3,148,74,0,619,620,5,7,0,0,620,621,3,160,80,
        0,621,167,1,0,0,0,622,628,3,166,83,0,623,624,3,166,83,0,624,625,
        5,1,0,0,625,626,3,168,84,0,626,628,1,0,0,0,627,622,1,0,0,0,627,623,
        1,0,0,0,628,169,1,0,0,0,629,630,3,174,87,0,630,631,5,16,0,0,631,
        632,3,174,87,0,632,655,1,0,0,0,633,634,3,174,87,0,634,635,5,17,0,
        0,635,636,3,174,87,0,636,655,1,0,0,0,637,638,3,174,87,0,638,639,
        5,18,0,0,639,640,3,174,87,0,640,655,1,0,0,0,641,642,3,174,87,0,642,
        643,5,19,0,0,643,644,3,174,87,0,644,655,1,0,0,0,645,646,3,174,87,
        0,646,647,5,20,0,0,647,648,3,174,87,0,648,655,1,0,0,0,649,650,3,
        174,87,0,650,651,5,21,0,0,651,652,3,174,87,0,652,655,1,0,0,0,653,
        655,3,174,87,0,654,629,1,0,0,0,654,633,1,0,0,0,654,637,1,0,0,0,654,
        641,1,0,0,0,654,645,1,0,0,0,654,649,1,0,0,0,654,653,1,0,0,0,655,
        171,1,0,0,0,656,657,3,170,85,0,657,658,5,2,0,0,658,664,1,0,0,0,659,
        660,3,170,85,0,660,661,5,2,0,0,661,662,3,172,86,0,662,664,1,0,0,
        0,663,656,1,0,0,0,663,659,1,0,0,0,664,173,1,0,0,0,665,666,6,87,-1,
        0,666,667,5,44,0,0,667,668,5,3,0,0,668,669,3,128,64,0,669,670,5,
        4,0,0,670,671,5,5,0,0,671,672,5,57,0,0,672,673,3,160,80,0,673,674,
        5,6,0,0,674,692,1,0,0,0,675,676,5,12,0,0,676,677,5,64,0,0,677,678,
        3,146,73,0,678,679,5,13,0,0,679,692,1,0,0,0,680,681,5,54,0,0,681,
        682,3,170,85,0,682,683,5,5,0,0,683,684,3,140,70,0,684,685,5,6,0,
        0,685,692,1,0,0,0,686,687,5,14,0,0,687,688,3,162,81,0,688,689,5,
        15,0,0,689,692,1,0,0,0,690,692,3,176,88,0,691,665,1,0,0,0,691,675,
        1,0,0,0,691,680,1,0,0,0,691,686,1,0,0,0,691,690,1,0,0,0,692,707,
        1,0,0,0,693,694,10,9,0,0,694,695,5,37,0,0,695,706,3,186,93,0,696,
        697,10,4,0,0,697,698,5,22,0,0,698,706,3,176,88,0,699,700,10,3,0,
        0,700,701,5,23,0,0,701,706,3,176,88,0,702,703,10,2,0,0,703,704,5,
        56,0,0,704,706,3,176,88,0,705,693,1,0,0,0,705,696,1,0,0,0,705,699,
        1,0,0,0,705,702,1,0,0,0,706,709,1,0,0,0,707,705,1,0,0,0,707,708,
        1,0,0,0,708,175,1,0,0,0,709,707,1,0,0,0,710,711,6,88,-1,0,711,712,
        3,192,96,0,712,724,1,0,0,0,713,714,10,4,0,0,714,715,5,24,0,0,715,
        723,3,192,96,0,716,717,10,3,0,0,717,718,5,25,0,0,718,723,3,192,96,
        0,719,720,10,2,0,0,720,721,5,36,0,0,721,723,3,192,96,0,722,713,1,
        0,0,0,722,716,1,0,0,0,722,719,1,0,0,0,723,726,1,0,0,0,724,722,1,
        0,0,0,724,725,1,0,0,0,725,177,1,0,0,0,726,724,1,0,0,0,727,728,6,
        89,-1,0,728,729,5,5,0,0,729,730,3,162,81,0,730,731,5,6,0,0,731,816,
        1,0,0,0,732,733,5,5,0,0,733,734,3,158,79,0,734,735,5,6,0,0,735,816,
        1,0,0,0,736,737,5,38,0,0,737,738,5,3,0,0,738,739,3,160,80,0,739,
        740,5,1,0,0,740,741,3,160,80,0,741,742,5,4,0,0,742,816,1,0,0,0,743,
        744,5,27,0,0,744,745,5,3,0,0,745,746,3,160,80,0,746,747,5,4,0,0,
        747,816,1,0,0,0,748,749,5,28,0,0,749,750,5,3,0,0,750,751,3,160,80,
        0,751,752,5,4,0,0,752,816,1,0,0,0,753,754,5,29,0,0,754,755,5,3,0,
        0,755,756,3,160,80,0,756,757,5,4,0,0,757,816,1,0,0,0,758,759,5,48,
        0,0,759,760,5,3,0,0,760,761,3,160,80,0,761,762,5,4,0,0,762,816,1,
        0,0,0,763,764,5,50,0,0,764,765,5,3,0,0,765,766,3,160,80,0,766,767,
        5,4,0,0,767,816,1,0,0,0,768,769,5,58,0,0,769,770,5,3,0,0,770,771,
        3,160,80,0,771,772,5,4,0,0,772,816,1,0,0,0,773,774,5,55,0,0,774,
        775,5,3,0,0,775,776,3,160,80,0,776,777,5,4,0,0,777,816,1,0,0,0,778,
        779,5,30,0,0,779,780,5,3,0,0,780,781,3,160,80,0,781,782,5,4,0,0,
        782,816,1,0,0,0,783,784,5,31,0,0,784,785,5,3,0,0,785,786,3,160,80,
        0,786,787,5,4,0,0,787,816,1,0,0,0,788,789,5,43,0,0,789,790,5,3,0,
        0,790,791,3,160,80,0,791,792,5,4,0,0,792,816,1,0,0,0,793,794,5,32,
        0,0,794,795,5,3,0,0,795,796,3,160,80,0,796,797,5,1,0,0,797,798,3,
        160,80,0,798,799,5,1,0,0,799,800,3,160,80,0,800,801,5,4,0,0,801,
        816,1,0,0,0,802,803,5,45,0,0,803,804,5,14,0,0,804,805,3,182,91,0,
        805,806,5,15,0,0,806,807,3,180,90,0,807,816,1,0,0,0,808,809,5,72,
        0,0,809,810,5,14,0,0,810,811,3,182,91,0,811,812,5,15,0,0,812,813,
        3,180,90,0,813,816,1,0,0,0,814,816,3,180,90,0,815,727,1,0,0,0,815,
        732,1,0,0,0,815,736,1,0,0,0,815,743,1,0,0,0,815,748,1,0,0,0,815,
        753,1,0,0,0,815,758,1,0,0,0,815,763,1,0,0,0,815,768,1,0,0,0,815,
        773,1,0,0,0,815,778,1,0,0,0,815,783,1,0,0,0,815,788,1,0,0,0,815,
        793,1,0,0,0,815,802,1,0,0,0,815,808,1,0,0,0,815,814,1,0,0,0,816,
        830,1,0,0,0,817,818,10,20,0,0,818,819,5,3,0,0,819,820,3,162,81,0,
        820,821,5,4,0,0,821,829,1,0,0,0,822,823,10,19,0,0,823,824,5,26,0,
        0,824,829,5,64,0,0,825,826,10,18,0,0,826,827,5,26,0,0,827,829,5,
        66,0,0,828,817,1,0,0,0,828,822,1,0,0,0,828,825,1,0,0,0,829,832,1,
        0,0,0,830,828,1,0,0,0,830,831,1,0,0,0,831,179,1,0,0,0,832,830,1,
        0,0,0,833,843,5,61,0,0,834,843,5,42,0,0,835,843,5,71,0,0,836,843,
        5,66,0,0,837,843,5,64,0,0,838,839,5,3,0,0,839,840,3,160,80,0,840,
        841,5,4,0,0,841,843,1,0,0,0,842,833,1,0,0,0,842,834,1,0,0,0,842,
        835,1,0,0,0,842,836,1,0,0,0,842,837,1,0,0,0,842,838,1,0,0,0,843,
        181,1,0,0,0,844,845,5,44,0,0,845,846,5,3,0,0,846,847,3,190,95,0,
        847,848,5,4,0,0,848,849,5,9,0,0,849,850,3,182,91,0,850,857,1,0,0,
        0,851,852,5,73,0,0,852,853,5,64,0,0,853,854,5,26,0,0,854,857,3,182,
        91,0,855,857,3,184,92,0,856,844,1,0,0,0,856,851,1,0,0,0,856,855,
        1,0,0,0,857,183,1,0,0,0,858,859,3,186,93,0,859,860,5,22,0,0,860,
        861,3,186,93,0,861,864,1,0,0,0,862,864,3,186,93,0,863,858,1,0,0,
        0,863,862,1,0,0,0,864,185,1,0,0,0,865,866,5,5,0,0,866,867,3,190,
        95,0,867,868,5,6,0,0,868,883,1,0,0,0,869,870,5,5,0,0,870,871,3,200,
        100,0,871,872,5,6,0,0,872,883,1,0,0,0,873,874,5,12,0,0,874,875,3,
        196,98,0,875,876,5,13,0,0,876,883,1,0,0,0,877,878,5,14,0,0,878,879,
        3,182,91,0,879,880,5,15,0,0,880,883,1,0,0,0,881,883,3,188,94,0,882,
        865,1,0,0,0,882,869,1,0,0,0,882,873,1,0,0,0,882,877,1,0,0,0,882,
        881,1,0,0,0,883,187,1,0,0,0,884,893,5,33,0,0,885,893,5,34,0,0,886,
        893,5,35,0,0,887,893,5,64,0,0,888,889,5,3,0,0,889,890,3,182,91,0,
        890,891,5,4,0,0,891,893,1,0,0,0,892,884,1,0,0,0,892,885,1,0,0,0,
        892,886,1,0,0,0,892,887,1,0,0,0,892,888,1,0,0,0,893,189,1,0,0,0,
        894,901,1,0,0,0,895,901,3,182,91,0,896,897,3,182,91,0,897,898,5,
        1,0,0,898,899,3,190,95,0,899,901,1,0,0,0,900,894,1,0,0,0,900,895,
        1,0,0,0,900,896,1,0,0,0,901,191,1,0,0,0,902,903,3,178,89,0,903,193,
        1,0,0,0,904,905,5,64,0,0,905,906,3,142,71,0,906,195,1,0,0,0,907,
        914,1,0,0,0,908,914,3,194,97,0,909,910,3,194,97,0,910,911,5,1,0,
        0,911,912,3,196,98,0,912,914,1,0,0,0,913,907,1,0,0,0,913,908,1,0,
        0,0,913,909,1,0,0,0,914,197,1,0,0,0,915,916,5,64,0,0,916,917,5,8,
        0,0,917,918,3,182,91,0,918,199,1,0,0,0,919,925,3,198,99,0,920,921,
        3,198,99,0,921,922,5,1,0,0,922,923,3,200,100,0,923,925,1,0,0,0,924,
        919,1,0,0,0,924,920,1,0,0,0,925,201,1,0,0,0,926,927,3,160,80,0,927,
        928,5,8,0,0,928,929,3,182,91,0,929,203,1,0,0,0,41,366,381,390,411,
        418,430,440,453,458,463,472,484,489,494,499,548,556,567,578,588,
        596,616,627,654,663,691,705,707,722,724,815,828,830,842,856,863,
        882,892,900,913,924
    ]

class stellaParser ( Parser ):

    grammarFileName = "stellaParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "';'", "'('", "')'", "'{'", "'}'", 
                     "'='", "':'", "'->'", "'=>'", "'<|'", "'|>'", "'['", 
                     "']'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", 
                     "'+'", "'*'", "'List::head'", "'List::isempty'", "'List::tail'", 
                     "'Nat::pred'", "'Nat::iszero'", "'Nat::rec'", "'.'", 
                     "'Bool'", "'Nat'", "'Unit'", "'and'", "'as'", "'cons'", 
                     "'core'", "'else'", "'extend'", "'false'", "'fix'", 
                     "'fn'", "'fold'", "'if'", "'in'", "'inline'", "'language'", 
                     "'let'", "'match'", "'not'", "'or'", "'record'", "'return'", 
                     "'succ'", "'then'", "'throws'", "'true'", "'type'", 
                     "'unfold'", "'variant'", "'with'", "'\\u00B5'" ]

    symbolicNames = [ "<INVALID>", "Surrogate_id_SYMB_0", "Surrogate_id_SYMB_1", 
                      "Surrogate_id_SYMB_2", "Surrogate_id_SYMB_3", "Surrogate_id_SYMB_4", 
                      "Surrogate_id_SYMB_5", "Surrogate_id_SYMB_6", "Surrogate_id_SYMB_7", 
                      "Surrogate_id_SYMB_8", "Surrogate_id_SYMB_9", "Surrogate_id_SYMB_10", 
                      "Surrogate_id_SYMB_11", "Surrogate_id_SYMB_12", "Surrogate_id_SYMB_13", 
                      "Surrogate_id_SYMB_14", "Surrogate_id_SYMB_15", "Surrogate_id_SYMB_16", 
                      "Surrogate_id_SYMB_17", "Surrogate_id_SYMB_18", "Surrogate_id_SYMB_19", 
                      "Surrogate_id_SYMB_20", "Surrogate_id_SYMB_21", "Surrogate_id_SYMB_22", 
                      "Surrogate_id_SYMB_23", "Surrogate_id_SYMB_24", "Surrogate_id_SYMB_25", 
                      "Surrogate_id_SYMB_26", "Surrogate_id_SYMB_27", "Surrogate_id_SYMB_28", 
                      "Surrogate_id_SYMB_29", "Surrogate_id_SYMB_30", "Surrogate_id_SYMB_31", 
                      "Surrogate_id_SYMB_32", "Surrogate_id_SYMB_33", "Surrogate_id_SYMB_34", 
                      "Surrogate_id_SYMB_35", "Surrogate_id_SYMB_36", "Surrogate_id_SYMB_37", 
                      "Surrogate_id_SYMB_38", "Surrogate_id_SYMB_39", "Surrogate_id_SYMB_40", 
                      "Surrogate_id_SYMB_41", "Surrogate_id_SYMB_42", "Surrogate_id_SYMB_43", 
                      "Surrogate_id_SYMB_44", "Surrogate_id_SYMB_45", "Surrogate_id_SYMB_46", 
                      "Surrogate_id_SYMB_47", "Surrogate_id_SYMB_48", "Surrogate_id_SYMB_49", 
                      "Surrogate_id_SYMB_50", "Surrogate_id_SYMB_51", "Surrogate_id_SYMB_52", 
                      "Surrogate_id_SYMB_53", "Surrogate_id_SYMB_54", "Surrogate_id_SYMB_55", 
                      "Surrogate_id_SYMB_56", "Surrogate_id_SYMB_57", "Surrogate_id_SYMB_58", 
                      "Surrogate_id_SYMB_59", "Surrogate_id_SYMB_60", "COMMENT_antlr_builtin", 
                      "MULTICOMMENT_antlr_builtin", "StellaIdent", "ExtensionName", 
                      "INTEGER", "WS", "ErrorToken", "Surrogate_id_SYMB_64", 
                      "Surrogate_id_SYMB_61", "Surrogate_id_SYMB_63", "Surrogate_id_SYMB_62", 
                      "Surrogate_id_SYMB_65" ]

    RULE_start_Program = 0
    RULE_start_ListStellaIdent = 1
    RULE_start_LanguageDecl = 2
    RULE_start_Extension = 3
    RULE_start_ListExtensionName = 4
    RULE_start_ListExtension = 5
    RULE_start_Decl = 6
    RULE_start_ListDecl = 7
    RULE_start_LocalDecl = 8
    RULE_start_ListLocalDecl = 9
    RULE_start_Annotation = 10
    RULE_start_ListAnnotation = 11
    RULE_start_ParamDecl = 12
    RULE_start_ListParamDecl = 13
    RULE_start_ReturnType = 14
    RULE_start_ThrowType = 15
    RULE_start_Type9 = 16
    RULE_start_ListType9 = 17
    RULE_start_MatchCase = 18
    RULE_start_ListMatchCase = 19
    RULE_start_OptionalTyping = 20
    RULE_start_PatternData = 21
    RULE_start_ExprData = 22
    RULE_start_Pattern = 23
    RULE_start_ListPattern = 24
    RULE_start_LabelledPattern = 25
    RULE_start_ListLabelledPattern = 26
    RULE_start_Binding = 27
    RULE_start_ListBinding = 28
    RULE_start_Expr = 29
    RULE_start_ListExpr = 30
    RULE_start_Expr1 = 31
    RULE_start_PatternBinding = 32
    RULE_start_ListPatternBinding = 33
    RULE_start_Expr2 = 34
    RULE_start_ListExpr2 = 35
    RULE_start_Expr3 = 36
    RULE_start_Expr4 = 37
    RULE_start_Expr6 = 38
    RULE_start_Expr7 = 39
    RULE_start_Type = 40
    RULE_start_Type1 = 41
    RULE_start_Type2 = 42
    RULE_start_Type3 = 43
    RULE_start_ListType = 44
    RULE_start_Expr5 = 45
    RULE_start_VariantFieldType = 46
    RULE_start_ListVariantFieldType = 47
    RULE_start_RecordFieldType = 48
    RULE_start_ListRecordFieldType = 49
    RULE_start_Typing = 50
    RULE_program = 51
    RULE_listStellaIdent = 52
    RULE_languageDecl = 53
    RULE_extension = 54
    RULE_listExtensionName = 55
    RULE_listExtension = 56
    RULE_decl = 57
    RULE_listDecl = 58
    RULE_localDecl = 59
    RULE_listLocalDecl = 60
    RULE_annotation = 61
    RULE_listAnnotation = 62
    RULE_paramDecl = 63
    RULE_listParamDecl = 64
    RULE_returnType = 65
    RULE_throwType = 66
    RULE_type9 = 67
    RULE_listType9 = 68
    RULE_matchCase = 69
    RULE_listMatchCase = 70
    RULE_optionalTyping = 71
    RULE_patternData = 72
    RULE_exprData = 73
    RULE_pattern = 74
    RULE_listPattern = 75
    RULE_labelledPattern = 76
    RULE_listLabelledPattern = 77
    RULE_binding = 78
    RULE_listBinding = 79
    RULE_expr = 80
    RULE_listExpr = 81
    RULE_expr1 = 82
    RULE_patternBinding = 83
    RULE_listPatternBinding = 84
    RULE_expr2 = 85
    RULE_listExpr2 = 86
    RULE_expr3 = 87
    RULE_expr4 = 88
    RULE_expr6 = 89
    RULE_expr7 = 90
    RULE_type = 91
    RULE_type1 = 92
    RULE_type2 = 93
    RULE_type3 = 94
    RULE_listType = 95
    RULE_expr5 = 96
    RULE_variantFieldType = 97
    RULE_listVariantFieldType = 98
    RULE_recordFieldType = 99
    RULE_listRecordFieldType = 100
    RULE_typing = 101

    ruleNames =  [ "start_Program", "start_ListStellaIdent", "start_LanguageDecl", 
                   "start_Extension", "start_ListExtensionName", "start_ListExtension", 
                   "start_Decl", "start_ListDecl", "start_LocalDecl", "start_ListLocalDecl", 
                   "start_Annotation", "start_ListAnnotation", "start_ParamDecl", 
                   "start_ListParamDecl", "start_ReturnType", "start_ThrowType", 
                   "start_Type9", "start_ListType9", "start_MatchCase", 
                   "start_ListMatchCase", "start_OptionalTyping", "start_PatternData", 
                   "start_ExprData", "start_Pattern", "start_ListPattern", 
                   "start_LabelledPattern", "start_ListLabelledPattern", 
                   "start_Binding", "start_ListBinding", "start_Expr", "start_ListExpr", 
                   "start_Expr1", "start_PatternBinding", "start_ListPatternBinding", 
                   "start_Expr2", "start_ListExpr2", "start_Expr3", "start_Expr4", 
                   "start_Expr6", "start_Expr7", "start_Type", "start_Type1", 
                   "start_Type2", "start_Type3", "start_ListType", "start_Expr5", 
                   "start_VariantFieldType", "start_ListVariantFieldType", 
                   "start_RecordFieldType", "start_ListRecordFieldType", 
                   "start_Typing", "program", "listStellaIdent", "languageDecl", 
                   "extension", "listExtensionName", "listExtension", "decl", 
                   "listDecl", "localDecl", "listLocalDecl", "annotation", 
                   "listAnnotation", "paramDecl", "listParamDecl", "returnType", 
                   "throwType", "type9", "listType9", "matchCase", "listMatchCase", 
                   "optionalTyping", "patternData", "exprData", "pattern", 
                   "listPattern", "labelledPattern", "listLabelledPattern", 
                   "binding", "listBinding", "expr", "listExpr", "expr1", 
                   "patternBinding", "listPatternBinding", "expr2", "listExpr2", 
                   "expr3", "expr4", "expr6", "expr7", "type", "type1", 
                   "type2", "type3", "listType", "expr5", "variantFieldType", 
                   "listVariantFieldType", "recordFieldType", "listRecordFieldType", 
                   "typing" ]

    EOF = Token.EOF
    Surrogate_id_SYMB_0=1
    Surrogate_id_SYMB_1=2
    Surrogate_id_SYMB_2=3
    Surrogate_id_SYMB_3=4
    Surrogate_id_SYMB_4=5
    Surrogate_id_SYMB_5=6
    Surrogate_id_SYMB_6=7
    Surrogate_id_SYMB_7=8
    Surrogate_id_SYMB_8=9
    Surrogate_id_SYMB_9=10
    Surrogate_id_SYMB_10=11
    Surrogate_id_SYMB_11=12
    Surrogate_id_SYMB_12=13
    Surrogate_id_SYMB_13=14
    Surrogate_id_SYMB_14=15
    Surrogate_id_SYMB_15=16
    Surrogate_id_SYMB_16=17
    Surrogate_id_SYMB_17=18
    Surrogate_id_SYMB_18=19
    Surrogate_id_SYMB_19=20
    Surrogate_id_SYMB_20=21
    Surrogate_id_SYMB_21=22
    Surrogate_id_SYMB_22=23
    Surrogate_id_SYMB_23=24
    Surrogate_id_SYMB_24=25
    Surrogate_id_SYMB_25=26
    Surrogate_id_SYMB_26=27
    Surrogate_id_SYMB_27=28
    Surrogate_id_SYMB_28=29
    Surrogate_id_SYMB_29=30
    Surrogate_id_SYMB_30=31
    Surrogate_id_SYMB_31=32
    Surrogate_id_SYMB_32=33
    Surrogate_id_SYMB_33=34
    Surrogate_id_SYMB_34=35
    Surrogate_id_SYMB_35=36
    Surrogate_id_SYMB_36=37
    Surrogate_id_SYMB_37=38
    Surrogate_id_SYMB_38=39
    Surrogate_id_SYMB_39=40
    Surrogate_id_SYMB_40=41
    Surrogate_id_SYMB_41=42
    Surrogate_id_SYMB_42=43
    Surrogate_id_SYMB_43=44
    Surrogate_id_SYMB_44=45
    Surrogate_id_SYMB_45=46
    Surrogate_id_SYMB_46=47
    Surrogate_id_SYMB_47=48
    Surrogate_id_SYMB_48=49
    Surrogate_id_SYMB_49=50
    Surrogate_id_SYMB_50=51
    Surrogate_id_SYMB_51=52
    Surrogate_id_SYMB_52=53
    Surrogate_id_SYMB_53=54
    Surrogate_id_SYMB_54=55
    Surrogate_id_SYMB_55=56
    Surrogate_id_SYMB_56=57
    Surrogate_id_SYMB_57=58
    Surrogate_id_SYMB_58=59
    Surrogate_id_SYMB_59=60
    Surrogate_id_SYMB_60=61
    COMMENT_antlr_builtin=62
    MULTICOMMENT_antlr_builtin=63
    StellaIdent=64
    ExtensionName=65
    INTEGER=66
    WS=67
    ErrorToken=68
    Surrogate_id_SYMB_64=69
    Surrogate_id_SYMB_61=70
    Surrogate_id_SYMB_63=71
    Surrogate_id_SYMB_62=72
    Surrogate_id_SYMB_65=73

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Start_ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ProgramContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def program(self):
            return self.getTypedRuleContext(stellaParser.ProgramContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Program" ):
                listener.enterStart_Program(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Program" ):
                listener.exitStart_Program(self)




    def start_Program(self):

        localctx = stellaParser.Start_ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start_Program)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            localctx.x = self.program()
            self.state = 205
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListStellaIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListStellaIdentContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listStellaIdent(self):
            return self.getTypedRuleContext(stellaParser.ListStellaIdentContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListStellaIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListStellaIdent" ):
                listener.enterStart_ListStellaIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListStellaIdent" ):
                listener.exitStart_ListStellaIdent(self)




    def start_ListStellaIdent(self):

        localctx = stellaParser.Start_ListStellaIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_start_ListStellaIdent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207
            localctx.x = self.listStellaIdent()
            self.state = 208
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_LanguageDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # LanguageDeclContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def languageDecl(self):
            return self.getTypedRuleContext(stellaParser.LanguageDeclContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_LanguageDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_LanguageDecl" ):
                listener.enterStart_LanguageDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_LanguageDecl" ):
                listener.exitStart_LanguageDecl(self)




    def start_LanguageDecl(self):

        localctx = stellaParser.Start_LanguageDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_start_LanguageDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            localctx.x = self.languageDecl()
            self.state = 211
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ExtensionContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def extension(self):
            return self.getTypedRuleContext(stellaParser.ExtensionContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Extension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Extension" ):
                listener.enterStart_Extension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Extension" ):
                listener.exitStart_Extension(self)




    def start_Extension(self):

        localctx = stellaParser.Start_ExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_start_Extension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            localctx.x = self.extension()
            self.state = 214
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListExtensionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListExtensionNameContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listExtensionName(self):
            return self.getTypedRuleContext(stellaParser.ListExtensionNameContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListExtensionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListExtensionName" ):
                listener.enterStart_ListExtensionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListExtensionName" ):
                listener.exitStart_ListExtensionName(self)




    def start_ListExtensionName(self):

        localctx = stellaParser.Start_ListExtensionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_start_ListExtensionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            localctx.x = self.listExtensionName()
            self.state = 217
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListExtensionContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listExtension(self):
            return self.getTypedRuleContext(stellaParser.ListExtensionContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListExtension" ):
                listener.enterStart_ListExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListExtension" ):
                listener.exitStart_ListExtension(self)




    def start_ListExtension(self):

        localctx = stellaParser.Start_ListExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_start_ListExtension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            localctx.x = self.listExtension(0)
            self.state = 220
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_DeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # DeclContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def decl(self):
            return self.getTypedRuleContext(stellaParser.DeclContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Decl" ):
                listener.enterStart_Decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Decl" ):
                listener.exitStart_Decl(self)




    def start_Decl(self):

        localctx = stellaParser.Start_DeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_start_Decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            localctx.x = self.decl()
            self.state = 223
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListDeclContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listDecl(self):
            return self.getTypedRuleContext(stellaParser.ListDeclContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListDecl" ):
                listener.enterStart_ListDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListDecl" ):
                listener.exitStart_ListDecl(self)




    def start_ListDecl(self):

        localctx = stellaParser.Start_ListDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_start_ListDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            localctx.x = self.listDecl(0)
            self.state = 226
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_LocalDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # LocalDeclContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def localDecl(self):
            return self.getTypedRuleContext(stellaParser.LocalDeclContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_LocalDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_LocalDecl" ):
                listener.enterStart_LocalDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_LocalDecl" ):
                listener.exitStart_LocalDecl(self)




    def start_LocalDecl(self):

        localctx = stellaParser.Start_LocalDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_start_LocalDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            localctx.x = self.localDecl()
            self.state = 229
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListLocalDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListLocalDeclContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listLocalDecl(self):
            return self.getTypedRuleContext(stellaParser.ListLocalDeclContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListLocalDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListLocalDecl" ):
                listener.enterStart_ListLocalDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListLocalDecl" ):
                listener.exitStart_ListLocalDecl(self)




    def start_ListLocalDecl(self):

        localctx = stellaParser.Start_ListLocalDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_start_ListLocalDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            localctx.x = self.listLocalDecl(0)
            self.state = 232
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # AnnotationContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def annotation(self):
            return self.getTypedRuleContext(stellaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Annotation" ):
                listener.enterStart_Annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Annotation" ):
                listener.exitStart_Annotation(self)




    def start_Annotation(self):

        localctx = stellaParser.Start_AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_start_Annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            localctx.x = self.annotation()
            self.state = 235
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListAnnotationContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listAnnotation(self):
            return self.getTypedRuleContext(stellaParser.ListAnnotationContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListAnnotation" ):
                listener.enterStart_ListAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListAnnotation" ):
                listener.exitStart_ListAnnotation(self)




    def start_ListAnnotation(self):

        localctx = stellaParser.Start_ListAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_start_ListAnnotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            localctx.x = self.listAnnotation(0)
            self.state = 238
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ParamDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ParamDeclContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def paramDecl(self):
            return self.getTypedRuleContext(stellaParser.ParamDeclContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ParamDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ParamDecl" ):
                listener.enterStart_ParamDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ParamDecl" ):
                listener.exitStart_ParamDecl(self)




    def start_ParamDecl(self):

        localctx = stellaParser.Start_ParamDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_start_ParamDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            localctx.x = self.paramDecl()
            self.state = 241
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListParamDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListParamDeclContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listParamDecl(self):
            return self.getTypedRuleContext(stellaParser.ListParamDeclContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListParamDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListParamDecl" ):
                listener.enterStart_ListParamDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListParamDecl" ):
                listener.exitStart_ListParamDecl(self)




    def start_ListParamDecl(self):

        localctx = stellaParser.Start_ListParamDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_start_ListParamDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            localctx.x = self.listParamDecl()
            self.state = 244
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ReturnTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ReturnTypeContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def returnType(self):
            return self.getTypedRuleContext(stellaParser.ReturnTypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ReturnType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ReturnType" ):
                listener.enterStart_ReturnType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ReturnType" ):
                listener.exitStart_ReturnType(self)




    def start_ReturnType(self):

        localctx = stellaParser.Start_ReturnTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_start_ReturnType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            localctx.x = self.returnType()
            self.state = 247
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ThrowTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ThrowTypeContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def throwType(self):
            return self.getTypedRuleContext(stellaParser.ThrowTypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ThrowType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ThrowType" ):
                listener.enterStart_ThrowType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ThrowType" ):
                listener.exitStart_ThrowType(self)




    def start_ThrowType(self):

        localctx = stellaParser.Start_ThrowTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_start_ThrowType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            localctx.x = self.throwType()
            self.state = 250
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_Type9Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # Type9Context

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def type9(self):
            return self.getTypedRuleContext(stellaParser.Type9Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Type9

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Type9" ):
                listener.enterStart_Type9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Type9" ):
                listener.exitStart_Type9(self)




    def start_Type9(self):

        localctx = stellaParser.Start_Type9Context(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_start_Type9)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            localctx.x = self.type9()
            self.state = 253
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListType9Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListType9Context

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listType9(self):
            return self.getTypedRuleContext(stellaParser.ListType9Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListType9

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListType9" ):
                listener.enterStart_ListType9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListType9" ):
                listener.exitStart_ListType9(self)




    def start_ListType9(self):

        localctx = stellaParser.Start_ListType9Context(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_start_ListType9)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            localctx.x = self.listType9()
            self.state = 256
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_MatchCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # MatchCaseContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def matchCase(self):
            return self.getTypedRuleContext(stellaParser.MatchCaseContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_MatchCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_MatchCase" ):
                listener.enterStart_MatchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_MatchCase" ):
                listener.exitStart_MatchCase(self)




    def start_MatchCase(self):

        localctx = stellaParser.Start_MatchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_start_MatchCase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            localctx.x = self.matchCase()
            self.state = 259
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListMatchCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListMatchCaseContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listMatchCase(self):
            return self.getTypedRuleContext(stellaParser.ListMatchCaseContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListMatchCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListMatchCase" ):
                listener.enterStart_ListMatchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListMatchCase" ):
                listener.exitStart_ListMatchCase(self)




    def start_ListMatchCase(self):

        localctx = stellaParser.Start_ListMatchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_start_ListMatchCase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            localctx.x = self.listMatchCase()
            self.state = 262
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_OptionalTypingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # OptionalTypingContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def optionalTyping(self):
            return self.getTypedRuleContext(stellaParser.OptionalTypingContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_OptionalTyping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_OptionalTyping" ):
                listener.enterStart_OptionalTyping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_OptionalTyping" ):
                listener.exitStart_OptionalTyping(self)




    def start_OptionalTyping(self):

        localctx = stellaParser.Start_OptionalTypingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_start_OptionalTyping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            localctx.x = self.optionalTyping()
            self.state = 265
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_PatternDataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # PatternDataContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def patternData(self):
            return self.getTypedRuleContext(stellaParser.PatternDataContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_PatternData

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_PatternData" ):
                listener.enterStart_PatternData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_PatternData" ):
                listener.exitStart_PatternData(self)




    def start_PatternData(self):

        localctx = stellaParser.Start_PatternDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_start_PatternData)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            localctx.x = self.patternData()
            self.state = 268
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ExprDataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ExprDataContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def exprData(self):
            return self.getTypedRuleContext(stellaParser.ExprDataContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ExprData

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ExprData" ):
                listener.enterStart_ExprData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ExprData" ):
                listener.exitStart_ExprData(self)




    def start_ExprData(self):

        localctx = stellaParser.Start_ExprDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_start_ExprData)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            localctx.x = self.exprData()
            self.state = 271
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # PatternContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def pattern(self):
            return self.getTypedRuleContext(stellaParser.PatternContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Pattern" ):
                listener.enterStart_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Pattern" ):
                listener.exitStart_Pattern(self)




    def start_Pattern(self):

        localctx = stellaParser.Start_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_start_Pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            localctx.x = self.pattern()
            self.state = 274
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListPatternContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listPattern(self):
            return self.getTypedRuleContext(stellaParser.ListPatternContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListPattern" ):
                listener.enterStart_ListPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListPattern" ):
                listener.exitStart_ListPattern(self)




    def start_ListPattern(self):

        localctx = stellaParser.Start_ListPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_start_ListPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            localctx.x = self.listPattern()
            self.state = 277
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_LabelledPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # LabelledPatternContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def labelledPattern(self):
            return self.getTypedRuleContext(stellaParser.LabelledPatternContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_LabelledPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_LabelledPattern" ):
                listener.enterStart_LabelledPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_LabelledPattern" ):
                listener.exitStart_LabelledPattern(self)




    def start_LabelledPattern(self):

        localctx = stellaParser.Start_LabelledPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_start_LabelledPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            localctx.x = self.labelledPattern()
            self.state = 280
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListLabelledPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListLabelledPatternContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listLabelledPattern(self):
            return self.getTypedRuleContext(stellaParser.ListLabelledPatternContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListLabelledPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListLabelledPattern" ):
                listener.enterStart_ListLabelledPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListLabelledPattern" ):
                listener.exitStart_ListLabelledPattern(self)




    def start_ListLabelledPattern(self):

        localctx = stellaParser.Start_ListLabelledPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_start_ListLabelledPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            localctx.x = self.listLabelledPattern()
            self.state = 283
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_BindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # BindingContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def binding(self):
            return self.getTypedRuleContext(stellaParser.BindingContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Binding" ):
                listener.enterStart_Binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Binding" ):
                listener.exitStart_Binding(self)




    def start_Binding(self):

        localctx = stellaParser.Start_BindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_start_Binding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            localctx.x = self.binding()
            self.state = 286
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListBindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListBindingContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listBinding(self):
            return self.getTypedRuleContext(stellaParser.ListBindingContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListBinding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListBinding" ):
                listener.enterStart_ListBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListBinding" ):
                listener.exitStart_ListBinding(self)




    def start_ListBinding(self):

        localctx = stellaParser.Start_ListBindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_start_ListBinding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            localctx.x = self.listBinding()
            self.state = 289
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ExprContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def expr(self):
            return self.getTypedRuleContext(stellaParser.ExprContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Expr" ):
                listener.enterStart_Expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Expr" ):
                listener.exitStart_Expr(self)




    def start_Expr(self):

        localctx = stellaParser.Start_ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_start_Expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            localctx.x = self.expr()
            self.state = 292
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListExprContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listExpr(self):
            return self.getTypedRuleContext(stellaParser.ListExprContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListExpr" ):
                listener.enterStart_ListExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListExpr" ):
                listener.exitStart_ListExpr(self)




    def start_ListExpr(self):

        localctx = stellaParser.Start_ListExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_start_ListExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            localctx.x = self.listExpr()
            self.state = 295
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_Expr1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # Expr1Context

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def expr1(self):
            return self.getTypedRuleContext(stellaParser.Expr1Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Expr1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Expr1" ):
                listener.enterStart_Expr1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Expr1" ):
                listener.exitStart_Expr1(self)




    def start_Expr1(self):

        localctx = stellaParser.Start_Expr1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_start_Expr1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            localctx.x = self.expr1()
            self.state = 298
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_PatternBindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # PatternBindingContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def patternBinding(self):
            return self.getTypedRuleContext(stellaParser.PatternBindingContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_PatternBinding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_PatternBinding" ):
                listener.enterStart_PatternBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_PatternBinding" ):
                listener.exitStart_PatternBinding(self)




    def start_PatternBinding(self):

        localctx = stellaParser.Start_PatternBindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_start_PatternBinding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            localctx.x = self.patternBinding()
            self.state = 301
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListPatternBindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListPatternBindingContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listPatternBinding(self):
            return self.getTypedRuleContext(stellaParser.ListPatternBindingContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListPatternBinding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListPatternBinding" ):
                listener.enterStart_ListPatternBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListPatternBinding" ):
                listener.exitStart_ListPatternBinding(self)




    def start_ListPatternBinding(self):

        localctx = stellaParser.Start_ListPatternBindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_start_ListPatternBinding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            localctx.x = self.listPatternBinding()
            self.state = 304
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_Expr2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # Expr2Context

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def expr2(self):
            return self.getTypedRuleContext(stellaParser.Expr2Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Expr2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Expr2" ):
                listener.enterStart_Expr2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Expr2" ):
                listener.exitStart_Expr2(self)




    def start_Expr2(self):

        localctx = stellaParser.Start_Expr2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_start_Expr2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            localctx.x = self.expr2()
            self.state = 307
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListExpr2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListExpr2Context

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listExpr2(self):
            return self.getTypedRuleContext(stellaParser.ListExpr2Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListExpr2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListExpr2" ):
                listener.enterStart_ListExpr2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListExpr2" ):
                listener.exitStart_ListExpr2(self)




    def start_ListExpr2(self):

        localctx = stellaParser.Start_ListExpr2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_start_ListExpr2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            localctx.x = self.listExpr2()
            self.state = 310
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_Expr3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # Expr3Context

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def expr3(self):
            return self.getTypedRuleContext(stellaParser.Expr3Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Expr3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Expr3" ):
                listener.enterStart_Expr3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Expr3" ):
                listener.exitStart_Expr3(self)




    def start_Expr3(self):

        localctx = stellaParser.Start_Expr3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_start_Expr3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            localctx.x = self.expr3(0)
            self.state = 313
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_Expr4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # Expr4Context

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def expr4(self):
            return self.getTypedRuleContext(stellaParser.Expr4Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Expr4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Expr4" ):
                listener.enterStart_Expr4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Expr4" ):
                listener.exitStart_Expr4(self)




    def start_Expr4(self):

        localctx = stellaParser.Start_Expr4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_start_Expr4)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            localctx.x = self.expr4(0)
            self.state = 316
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_Expr6Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # Expr6Context

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def expr6(self):
            return self.getTypedRuleContext(stellaParser.Expr6Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Expr6

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Expr6" ):
                listener.enterStart_Expr6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Expr6" ):
                listener.exitStart_Expr6(self)




    def start_Expr6(self):

        localctx = stellaParser.Start_Expr6Context(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_start_Expr6)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            localctx.x = self.expr6(0)
            self.state = 319
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_Expr7Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # Expr7Context

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def expr7(self):
            return self.getTypedRuleContext(stellaParser.Expr7Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Expr7

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Expr7" ):
                listener.enterStart_Expr7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Expr7" ):
                listener.exitStart_Expr7(self)




    def start_Expr7(self):

        localctx = stellaParser.Start_Expr7Context(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_start_Expr7)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            localctx.x = self.expr7()
            self.state = 322
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # TypeContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def type_(self):
            return self.getTypedRuleContext(stellaParser.TypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Type" ):
                listener.enterStart_Type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Type" ):
                listener.exitStart_Type(self)




    def start_Type(self):

        localctx = stellaParser.Start_TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_start_Type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            localctx.x = self.type_()
            self.state = 325
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_Type1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # Type1Context

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def type1(self):
            return self.getTypedRuleContext(stellaParser.Type1Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Type1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Type1" ):
                listener.enterStart_Type1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Type1" ):
                listener.exitStart_Type1(self)




    def start_Type1(self):

        localctx = stellaParser.Start_Type1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_start_Type1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            localctx.x = self.type1()
            self.state = 328
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_Type2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # Type2Context

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def type2(self):
            return self.getTypedRuleContext(stellaParser.Type2Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Type2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Type2" ):
                listener.enterStart_Type2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Type2" ):
                listener.exitStart_Type2(self)




    def start_Type2(self):

        localctx = stellaParser.Start_Type2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_start_Type2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            localctx.x = self.type2()
            self.state = 331
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_Type3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # Type3Context

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def type3(self):
            return self.getTypedRuleContext(stellaParser.Type3Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Type3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Type3" ):
                listener.enterStart_Type3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Type3" ):
                listener.exitStart_Type3(self)




    def start_Type3(self):

        localctx = stellaParser.Start_Type3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_start_Type3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            localctx.x = self.type3()
            self.state = 334
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListTypeContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listType(self):
            return self.getTypedRuleContext(stellaParser.ListTypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListType" ):
                listener.enterStart_ListType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListType" ):
                listener.exitStart_ListType(self)




    def start_ListType(self):

        localctx = stellaParser.Start_ListTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_start_ListType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            localctx.x = self.listType()
            self.state = 337
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_Expr5Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # Expr5Context

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def expr5(self):
            return self.getTypedRuleContext(stellaParser.Expr5Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Expr5

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Expr5" ):
                listener.enterStart_Expr5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Expr5" ):
                listener.exitStart_Expr5(self)




    def start_Expr5(self):

        localctx = stellaParser.Start_Expr5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_start_Expr5)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            localctx.x = self.expr5()
            self.state = 340
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_VariantFieldTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # VariantFieldTypeContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def variantFieldType(self):
            return self.getTypedRuleContext(stellaParser.VariantFieldTypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_VariantFieldType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_VariantFieldType" ):
                listener.enterStart_VariantFieldType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_VariantFieldType" ):
                listener.exitStart_VariantFieldType(self)




    def start_VariantFieldType(self):

        localctx = stellaParser.Start_VariantFieldTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_start_VariantFieldType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            localctx.x = self.variantFieldType()
            self.state = 343
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListVariantFieldTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListVariantFieldTypeContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listVariantFieldType(self):
            return self.getTypedRuleContext(stellaParser.ListVariantFieldTypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListVariantFieldType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListVariantFieldType" ):
                listener.enterStart_ListVariantFieldType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListVariantFieldType" ):
                listener.exitStart_ListVariantFieldType(self)




    def start_ListVariantFieldType(self):

        localctx = stellaParser.Start_ListVariantFieldTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_start_ListVariantFieldType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            localctx.x = self.listVariantFieldType()
            self.state = 346
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_RecordFieldTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # RecordFieldTypeContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def recordFieldType(self):
            return self.getTypedRuleContext(stellaParser.RecordFieldTypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_RecordFieldType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_RecordFieldType" ):
                listener.enterStart_RecordFieldType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_RecordFieldType" ):
                listener.exitStart_RecordFieldType(self)




    def start_RecordFieldType(self):

        localctx = stellaParser.Start_RecordFieldTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_start_RecordFieldType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            localctx.x = self.recordFieldType()
            self.state = 349
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_ListRecordFieldTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # ListRecordFieldTypeContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def listRecordFieldType(self):
            return self.getTypedRuleContext(stellaParser.ListRecordFieldTypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_ListRecordFieldType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_ListRecordFieldType" ):
                listener.enterStart_ListRecordFieldType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_ListRecordFieldType" ):
                listener.exitStart_ListRecordFieldType(self)




    def start_ListRecordFieldType(self):

        localctx = stellaParser.Start_ListRecordFieldTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_start_ListRecordFieldType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            localctx.x = self.listRecordFieldType()
            self.state = 352
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_TypingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.x = None # TypingContext

        def EOF(self):
            return self.getToken(stellaParser.EOF, 0)

        def typing(self):
            return self.getTypedRuleContext(stellaParser.TypingContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_start_Typing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_Typing" ):
                listener.enterStart_Typing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_Typing" ):
                listener.exitStart_Typing(self)




    def start_Typing(self):

        localctx = stellaParser.Start_TypingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_start_Typing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            localctx.x = self.typing()
            self.state = 355
            self.match(stellaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # LanguageDeclContext
            self.p_1_2 = None # ListExtensionContext
            self.p_1_3 = None # ListDeclContext

        def languageDecl(self):
            return self.getTypedRuleContext(stellaParser.LanguageDeclContext,0)


        def listExtension(self):
            return self.getTypedRuleContext(stellaParser.ListExtensionContext,0)


        def listDecl(self):
            return self.getTypedRuleContext(stellaParser.ListDeclContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = stellaParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_program)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            localctx.p_1_1 = self.languageDecl()
            self.state = 358
            localctx.p_1_2 = self.listExtension(0)
            self.state = 359
            localctx.p_1_3 = self.listDecl(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListStellaIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_2_1 = None # Token
            self.p_3_1 = None # Token
            self.p_3_3 = None # ListStellaIdentContext

        def StellaIdent(self):
            return self.getToken(stellaParser.StellaIdent, 0)

        def Surrogate_id_SYMB_0(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_0, 0)

        def listStellaIdent(self):
            return self.getTypedRuleContext(stellaParser.ListStellaIdentContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listStellaIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListStellaIdent" ):
                listener.enterListStellaIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListStellaIdent" ):
                listener.exitListStellaIdent(self)




    def listStellaIdent(self):

        localctx = stellaParser.ListStellaIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_listStellaIdent)
        try:
            self.state = 366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 362
                localctx.p_2_1 = self.match(stellaParser.StellaIdent)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 363
                localctx.p_3_1 = self.match(stellaParser.StellaIdent)
                self.state = 364
                self.match(stellaParser.Surrogate_id_SYMB_0)
                self.state = 365
                localctx.p_3_3 = self.listStellaIdent()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LanguageDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None

        def Surrogate_id_SYMB_50(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_50, 0)

        def Surrogate_id_SYMB_38(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_38, 0)

        def Surrogate_id_SYMB_1(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_1, 0)

        def getRuleIndex(self):
            return stellaParser.RULE_languageDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLanguageDecl" ):
                listener.enterLanguageDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLanguageDecl" ):
                listener.exitLanguageDecl(self)




    def languageDecl(self):

        localctx = stellaParser.LanguageDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_languageDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.match(stellaParser.Surrogate_id_SYMB_50)
            self.state = 369
            self.match(stellaParser.Surrogate_id_SYMB_38)
            self.state = 370
            self.match(stellaParser.Surrogate_id_SYMB_1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_3 = None # ListExtensionNameContext

        def Surrogate_id_SYMB_40(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_40, 0)

        def Surrogate_id_SYMB_64(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_64, 0)

        def listExtensionName(self):
            return self.getTypedRuleContext(stellaParser.ListExtensionNameContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_extension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtension" ):
                listener.enterExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtension" ):
                listener.exitExtension(self)




    def extension(self):

        localctx = stellaParser.ExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_extension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(stellaParser.Surrogate_id_SYMB_40)
            self.state = 373
            self.match(stellaParser.Surrogate_id_SYMB_64)
            self.state = 374
            localctx.p_1_3 = self.listExtensionName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListExtensionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_2_1 = None # Token
            self.p_3_1 = None # Token
            self.p_3_3 = None # ListExtensionNameContext

        def ExtensionName(self):
            return self.getToken(stellaParser.ExtensionName, 0)

        def Surrogate_id_SYMB_0(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_0, 0)

        def listExtensionName(self):
            return self.getTypedRuleContext(stellaParser.ListExtensionNameContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listExtensionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListExtensionName" ):
                listener.enterListExtensionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListExtensionName" ):
                listener.exitListExtensionName(self)




    def listExtensionName(self):

        localctx = stellaParser.ListExtensionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_listExtensionName)
        try:
            self.state = 381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 377
                localctx.p_2_1 = self.match(stellaParser.ExtensionName)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 378
                localctx.p_3_1 = self.match(stellaParser.ExtensionName)
                self.state = 379
                self.match(stellaParser.Surrogate_id_SYMB_0)
                self.state = 380
                localctx.p_3_3 = self.listExtensionName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_2_1 = None # ListExtensionContext
            self.p_2_2 = None # ExtensionContext

        def Surrogate_id_SYMB_1(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_1, 0)

        def listExtension(self):
            return self.getTypedRuleContext(stellaParser.ListExtensionContext,0)


        def extension(self):
            return self.getTypedRuleContext(stellaParser.ExtensionContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListExtension" ):
                listener.enterListExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListExtension" ):
                listener.exitListExtension(self)



    def listExtension(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = stellaParser.ListExtensionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 112
        self.enterRecursionRule(localctx, 112, self.RULE_listExtension, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 390
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = stellaParser.ListExtensionContext(self, _parentctx, _parentState)
                    localctx.p_2_1 = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_listExtension)
                    self.state = 384
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 385
                    localctx.p_2_2 = self.extension()
                    self.state = 386
                    self.match(stellaParser.Surrogate_id_SYMB_1) 
                self.state = 392
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # ListAnnotationContext
            self.p_1_3 = None # Token
            self.p_1_5 = None # ListParamDeclContext
            self.p_1_7 = None # ReturnTypeContext
            self.p_1_8 = None # ThrowTypeContext
            self.p_1_10 = None # ListDeclContext
            self.p_1_12 = None # ExprContext
            self.p_2_2 = None # Token
            self.p_2_4 = None # TypeContext

        def Surrogate_id_SYMB_43(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_43, 0)

        def Surrogate_id_SYMB_2(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_2, 0)

        def Surrogate_id_SYMB_3(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_3, 0)

        def Surrogate_id_SYMB_4(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_4, 0)

        def Surrogate_id_SYMB_56(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_56, 0)

        def Surrogate_id_SYMB_5(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_5, 0)

        def listAnnotation(self):
            return self.getTypedRuleContext(stellaParser.ListAnnotationContext,0)


        def StellaIdent(self):
            return self.getToken(stellaParser.StellaIdent, 0)

        def listParamDecl(self):
            return self.getTypedRuleContext(stellaParser.ListParamDeclContext,0)


        def returnType(self):
            return self.getTypedRuleContext(stellaParser.ReturnTypeContext,0)


        def throwType(self):
            return self.getTypedRuleContext(stellaParser.ThrowTypeContext,0)


        def listDecl(self):
            return self.getTypedRuleContext(stellaParser.ListDeclContext,0)


        def expr(self):
            return self.getTypedRuleContext(stellaParser.ExprContext,0)


        def Surrogate_id_SYMB_61(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_61, 0)

        def Surrogate_id_SYMB_6(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_6, 0)

        def type_(self):
            return self.getTypedRuleContext(stellaParser.TypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecl" ):
                listener.enterDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecl" ):
                listener.exitDecl(self)




    def decl(self):

        localctx = stellaParser.DeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_decl)
        try:
            self.state = 411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 393
                localctx.p_1_1 = self.listAnnotation(0)
                self.state = 394
                self.match(stellaParser.Surrogate_id_SYMB_43)
                self.state = 395
                localctx.p_1_3 = self.match(stellaParser.StellaIdent)
                self.state = 396
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 397
                localctx.p_1_5 = self.listParamDecl()
                self.state = 398
                self.match(stellaParser.Surrogate_id_SYMB_3)
                self.state = 399
                localctx.p_1_7 = self.returnType()
                self.state = 400
                localctx.p_1_8 = self.throwType()
                self.state = 401
                self.match(stellaParser.Surrogate_id_SYMB_4)
                self.state = 402
                localctx.p_1_10 = self.listDecl(0)
                self.state = 403
                self.match(stellaParser.Surrogate_id_SYMB_56)
                self.state = 404
                localctx.p_1_12 = self.expr()
                self.state = 405
                self.match(stellaParser.Surrogate_id_SYMB_5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 407
                self.match(stellaParser.Surrogate_id_SYMB_61)
                self.state = 408
                localctx.p_2_2 = self.match(stellaParser.StellaIdent)
                self.state = 409
                self.match(stellaParser.Surrogate_id_SYMB_6)
                self.state = 410
                localctx.p_2_4 = self.type_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_2_1 = None # ListDeclContext
            self.p_2_2 = None # DeclContext

        def listDecl(self):
            return self.getTypedRuleContext(stellaParser.ListDeclContext,0)


        def decl(self):
            return self.getTypedRuleContext(stellaParser.DeclContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListDecl" ):
                listener.enterListDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListDecl" ):
                listener.exitListDecl(self)



    def listDecl(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = stellaParser.ListDeclContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_listDecl, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 418
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = stellaParser.ListDeclContext(self, _parentctx, _parentState)
                    localctx.p_2_1 = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_listDecl)
                    self.state = 414
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 415
                    localctx.p_2_2 = self.decl() 
                self.state = 420
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LocalDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # DeclContext

        def decl(self):
            return self.getTypedRuleContext(stellaParser.DeclContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_localDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalDecl" ):
                listener.enterLocalDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalDecl" ):
                listener.exitLocalDecl(self)




    def localDecl(self):

        localctx = stellaParser.LocalDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_localDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            localctx.p_1_1 = self.decl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListLocalDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_2_1 = None # ListLocalDeclContext
            self.p_2_2 = None # LocalDeclContext

        def Surrogate_id_SYMB_1(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_1, 0)

        def listLocalDecl(self):
            return self.getTypedRuleContext(stellaParser.ListLocalDeclContext,0)


        def localDecl(self):
            return self.getTypedRuleContext(stellaParser.LocalDeclContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listLocalDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListLocalDecl" ):
                listener.enterListLocalDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListLocalDecl" ):
                listener.exitListLocalDecl(self)



    def listLocalDecl(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = stellaParser.ListLocalDeclContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 120
        self.enterRecursionRule(localctx, 120, self.RULE_listLocalDecl, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 430
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = stellaParser.ListLocalDeclContext(self, _parentctx, _parentState)
                    localctx.p_2_1 = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_listLocalDecl)
                    self.state = 424
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 425
                    localctx.p_2_2 = self.localDecl()
                    self.state = 426
                    self.match(stellaParser.Surrogate_id_SYMB_1) 
                self.state = 432
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None

        def Surrogate_id_SYMB_48(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_48, 0)

        def getRuleIndex(self):
            return stellaParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = stellaParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            self.match(stellaParser.Surrogate_id_SYMB_48)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_2_1 = None # ListAnnotationContext
            self.p_2_2 = None # AnnotationContext

        def listAnnotation(self):
            return self.getTypedRuleContext(stellaParser.ListAnnotationContext,0)


        def annotation(self):
            return self.getTypedRuleContext(stellaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListAnnotation" ):
                listener.enterListAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListAnnotation" ):
                listener.exitListAnnotation(self)



    def listAnnotation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = stellaParser.ListAnnotationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_listAnnotation, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 440
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = stellaParser.ListAnnotationContext(self, _parentctx, _parentState)
                    localctx.p_2_1 = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_listAnnotation)
                    self.state = 436
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 437
                    localctx.p_2_2 = self.annotation() 
                self.state = 442
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParamDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # Token
            self.p_1_3 = None # TypeContext

        def Surrogate_id_SYMB_7(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_7, 0)

        def StellaIdent(self):
            return self.getToken(stellaParser.StellaIdent, 0)

        def type_(self):
            return self.getTypedRuleContext(stellaParser.TypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_paramDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamDecl" ):
                listener.enterParamDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamDecl" ):
                listener.exitParamDecl(self)




    def paramDecl(self):

        localctx = stellaParser.ParamDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_paramDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            localctx.p_1_1 = self.match(stellaParser.StellaIdent)
            self.state = 444
            self.match(stellaParser.Surrogate_id_SYMB_7)
            self.state = 445
            localctx.p_1_3 = self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListParamDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_2_1 = None # ParamDeclContext
            self.p_3_1 = None # ParamDeclContext
            self.p_3_3 = None # ListParamDeclContext

        def paramDecl(self):
            return self.getTypedRuleContext(stellaParser.ParamDeclContext,0)


        def Surrogate_id_SYMB_0(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_0, 0)

        def listParamDecl(self):
            return self.getTypedRuleContext(stellaParser.ListParamDeclContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listParamDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListParamDecl" ):
                listener.enterListParamDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListParamDecl" ):
                listener.exitListParamDecl(self)




    def listParamDecl(self):

        localctx = stellaParser.ListParamDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_listParamDecl)
        try:
            self.state = 453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 448
                localctx.p_2_1 = self.paramDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 449
                localctx.p_3_1 = self.paramDecl()
                self.state = 450
                self.match(stellaParser.Surrogate_id_SYMB_0)
                self.state = 451
                localctx.p_3_3 = self.listParamDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_2_2 = None # TypeContext

        def Surrogate_id_SYMB_8(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_8, 0)

        def type_(self):
            return self.getTypedRuleContext(stellaParser.TypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_returnType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnType" ):
                listener.enterReturnType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnType" ):
                listener.exitReturnType(self)




    def returnType(self):

        localctx = stellaParser.ReturnTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_returnType)
        try:
            self.state = 458
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [-1, 5, 60]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 456
                self.match(stellaParser.Surrogate_id_SYMB_8)
                self.state = 457
                localctx.p_2_2 = self.type_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_2_2 = None # ListType9Context

        def Surrogate_id_SYMB_59(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_59, 0)

        def listType9(self):
            return self.getTypedRuleContext(stellaParser.ListType9Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_throwType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowType" ):
                listener.enterThrowType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowType" ):
                listener.exitThrowType(self)




    def throwType(self):

        localctx = stellaParser.ThrowTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_throwType)
        try:
            self.state = 463
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [-1, 5]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 461
                self.match(stellaParser.Surrogate_id_SYMB_59)
                self.state = 462
                localctx.p_2_2 = self.listType9()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type9Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # TypeContext

        def type_(self):
            return self.getTypedRuleContext(stellaParser.TypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_type9

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType9" ):
                listener.enterType9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType9" ):
                listener.exitType9(self)




    def type9(self):

        localctx = stellaParser.Type9Context(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_type9)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            localctx.p_1_1 = self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListType9Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # Type9Context
            self.p_2_1 = None # Type9Context
            self.p_2_3 = None # ListType9Context

        def type9(self):
            return self.getTypedRuleContext(stellaParser.Type9Context,0)


        def Surrogate_id_SYMB_0(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_0, 0)

        def listType9(self):
            return self.getTypedRuleContext(stellaParser.ListType9Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listType9

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListType9" ):
                listener.enterListType9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListType9" ):
                listener.exitListType9(self)




    def listType9(self):

        localctx = stellaParser.ListType9Context(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_listType9)
        try:
            self.state = 472
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 467
                localctx.p_1_1 = self.type9()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 468
                localctx.p_2_1 = self.type9()
                self.state = 469
                self.match(stellaParser.Surrogate_id_SYMB_0)
                self.state = 470
                localctx.p_2_3 = self.listType9()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # PatternContext
            self.p_1_3 = None # ExprContext

        def Surrogate_id_SYMB_9(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_9, 0)

        def pattern(self):
            return self.getTypedRuleContext(stellaParser.PatternContext,0)


        def expr(self):
            return self.getTypedRuleContext(stellaParser.ExprContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_matchCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchCase" ):
                listener.enterMatchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchCase" ):
                listener.exitMatchCase(self)




    def matchCase(self):

        localctx = stellaParser.MatchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_matchCase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            localctx.p_1_1 = self.pattern()
            self.state = 475
            self.match(stellaParser.Surrogate_id_SYMB_9)
            self.state = 476
            localctx.p_1_3 = self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListMatchCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_2_1 = None # MatchCaseContext
            self.p_3_1 = None # MatchCaseContext
            self.p_3_3 = None # ListMatchCaseContext

        def matchCase(self):
            return self.getTypedRuleContext(stellaParser.MatchCaseContext,0)


        def Surrogate_id_SYMB_10(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_10, 0)

        def listMatchCase(self):
            return self.getTypedRuleContext(stellaParser.ListMatchCaseContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listMatchCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListMatchCase" ):
                listener.enterListMatchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListMatchCase" ):
                listener.exitListMatchCase(self)




    def listMatchCase(self):

        localctx = stellaParser.ListMatchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_listMatchCase)
        try:
            self.state = 484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 479
                localctx.p_2_1 = self.matchCase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 480
                localctx.p_3_1 = self.matchCase()
                self.state = 481
                self.match(stellaParser.Surrogate_id_SYMB_10)
                self.state = 482
                localctx.p_3_3 = self.listMatchCase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalTypingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_2_2 = None # TypeContext

        def Surrogate_id_SYMB_7(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_7, 0)

        def type_(self):
            return self.getTypedRuleContext(stellaParser.TypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_optionalTyping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalTyping" ):
                listener.enterOptionalTyping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalTyping" ):
                listener.exitOptionalTyping(self)




    def optionalTyping(self):

        localctx = stellaParser.OptionalTypingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_optionalTyping)
        try:
            self.state = 489
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [-1, 1, 13]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 487
                self.match(stellaParser.Surrogate_id_SYMB_7)
                self.state = 488
                localctx.p_2_2 = self.type_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternDataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_2_2 = None # PatternContext

        def Surrogate_id_SYMB_6(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_6, 0)

        def pattern(self):
            return self.getTypedRuleContext(stellaParser.PatternContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_patternData

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternData" ):
                listener.enterPatternData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternData" ):
                listener.exitPatternData(self)




    def patternData(self):

        localctx = stellaParser.PatternDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_patternData)
        try:
            self.state = 494
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [-1, 13]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 492
                self.match(stellaParser.Surrogate_id_SYMB_6)
                self.state = 493
                localctx.p_2_2 = self.pattern()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprDataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_2_2 = None # ExprContext

        def Surrogate_id_SYMB_6(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_6, 0)

        def expr(self):
            return self.getTypedRuleContext(stellaParser.ExprContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_exprData

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprData" ):
                listener.enterExprData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprData" ):
                listener.exitExprData(self)




    def exprData(self):

        localctx = stellaParser.ExprDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_exprData)
        try:
            self.state = 499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [-1, 13]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 497
                self.match(stellaParser.Surrogate_id_SYMB_6)
                self.state = 498
                localctx.p_2_2 = self.expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_2 = None # Token
            self.p_1_3 = None # PatternDataContext
            self.p_2_3 = None # PatternContext
            self.p_3_3 = None # PatternContext
            self.p_4_2 = None # ListPatternContext
            self.p_5_2 = None # ListLabelledPatternContext
            self.p_6_2 = None # ListPatternContext
            self.p_7_2 = None # PatternContext
            self.p_7_4 = None # PatternContext
            self.p_11_1 = None # Token
            self.p_12_3 = None # PatternContext
            self.p_13_1 = None # Token
            self.p_14_2 = None # PatternContext

        def Surrogate_id_SYMB_11(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_11, 0)

        def Surrogate_id_SYMB_12(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_12, 0)

        def StellaIdent(self):
            return self.getToken(stellaParser.StellaIdent, 0)

        def patternData(self):
            return self.getTypedRuleContext(stellaParser.PatternDataContext,0)


        def Surrogate_id_SYMB_47(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_47, 0)

        def Surrogate_id_SYMB_2(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_2, 0)

        def Surrogate_id_SYMB_3(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_3, 0)

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(stellaParser.PatternContext)
            else:
                return self.getTypedRuleContext(stellaParser.PatternContext,i)


        def Surrogate_id_SYMB_49(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_49, 0)

        def Surrogate_id_SYMB_4(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_4, 0)

        def Surrogate_id_SYMB_5(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_5, 0)

        def listPattern(self):
            return self.getTypedRuleContext(stellaParser.ListPatternContext,0)


        def listLabelledPattern(self):
            return self.getTypedRuleContext(stellaParser.ListLabelledPatternContext,0)


        def Surrogate_id_SYMB_13(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_13, 0)

        def Surrogate_id_SYMB_14(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_14, 0)

        def Surrogate_id_SYMB_0(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_0, 0)

        def Surrogate_id_SYMB_41(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_41, 0)

        def Surrogate_id_SYMB_60(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_60, 0)

        def Surrogate_id_SYMB_63(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_63, 0)

        def INTEGER(self):
            return self.getToken(stellaParser.INTEGER, 0)

        def Surrogate_id_SYMB_57(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_57, 0)

        def getRuleIndex(self):
            return stellaParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = stellaParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_pattern)
        try:
            self.state = 548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self.match(stellaParser.Surrogate_id_SYMB_11)
                self.state = 502
                localctx.p_1_2 = self.match(stellaParser.StellaIdent)
                self.state = 503
                localctx.p_1_3 = self.patternData()
                self.state = 504
                self.match(stellaParser.Surrogate_id_SYMB_12)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 506
                self.match(stellaParser.Surrogate_id_SYMB_47)
                self.state = 507
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 508
                localctx.p_2_3 = self.pattern()
                self.state = 509
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 511
                self.match(stellaParser.Surrogate_id_SYMB_49)
                self.state = 512
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 513
                localctx.p_3_3 = self.pattern()
                self.state = 514
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 516
                self.match(stellaParser.Surrogate_id_SYMB_4)
                self.state = 517
                localctx.p_4_2 = self.listPattern()
                self.state = 518
                self.match(stellaParser.Surrogate_id_SYMB_5)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 520
                self.match(stellaParser.Surrogate_id_SYMB_4)
                self.state = 521
                localctx.p_5_2 = self.listLabelledPattern()
                self.state = 522
                self.match(stellaParser.Surrogate_id_SYMB_5)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 524
                self.match(stellaParser.Surrogate_id_SYMB_13)
                self.state = 525
                localctx.p_6_2 = self.listPattern()
                self.state = 526
                self.match(stellaParser.Surrogate_id_SYMB_14)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 528
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 529
                localctx.p_7_2 = self.pattern()
                self.state = 530
                self.match(stellaParser.Surrogate_id_SYMB_0)
                self.state = 531
                localctx.p_7_4 = self.pattern()
                self.state = 532
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 534
                self.match(stellaParser.Surrogate_id_SYMB_41)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 535
                self.match(stellaParser.Surrogate_id_SYMB_60)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 536
                self.match(stellaParser.Surrogate_id_SYMB_63)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 537
                localctx.p_11_1 = self.match(stellaParser.INTEGER)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 538
                self.match(stellaParser.Surrogate_id_SYMB_57)
                self.state = 539
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 540
                localctx.p_12_3 = self.pattern()
                self.state = 541
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 543
                localctx.p_13_1 = self.match(stellaParser.StellaIdent)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 544
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 545
                localctx.p_14_2 = self.pattern()
                self.state = 546
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_2_1 = None # PatternContext
            self.p_3_1 = None # PatternContext
            self.p_3_3 = None # ListPatternContext

        def pattern(self):
            return self.getTypedRuleContext(stellaParser.PatternContext,0)


        def Surrogate_id_SYMB_0(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_0, 0)

        def listPattern(self):
            return self.getTypedRuleContext(stellaParser.ListPatternContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListPattern" ):
                listener.enterListPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListPattern" ):
                listener.exitListPattern(self)




    def listPattern(self):

        localctx = stellaParser.ListPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_listPattern)
        try:
            self.state = 556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 551
                localctx.p_2_1 = self.pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 552
                localctx.p_3_1 = self.pattern()
                self.state = 553
                self.match(stellaParser.Surrogate_id_SYMB_0)
                self.state = 554
                localctx.p_3_3 = self.listPattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelledPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # Token
            self.p_1_3 = None # PatternContext

        def Surrogate_id_SYMB_6(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_6, 0)

        def StellaIdent(self):
            return self.getToken(stellaParser.StellaIdent, 0)

        def pattern(self):
            return self.getTypedRuleContext(stellaParser.PatternContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_labelledPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelledPattern" ):
                listener.enterLabelledPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelledPattern" ):
                listener.exitLabelledPattern(self)




    def labelledPattern(self):

        localctx = stellaParser.LabelledPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_labelledPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            localctx.p_1_1 = self.match(stellaParser.StellaIdent)
            self.state = 559
            self.match(stellaParser.Surrogate_id_SYMB_6)
            self.state = 560
            localctx.p_1_3 = self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListLabelledPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # LabelledPatternContext
            self.p_2_1 = None # LabelledPatternContext
            self.p_2_3 = None # ListLabelledPatternContext

        def labelledPattern(self):
            return self.getTypedRuleContext(stellaParser.LabelledPatternContext,0)


        def Surrogate_id_SYMB_0(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_0, 0)

        def listLabelledPattern(self):
            return self.getTypedRuleContext(stellaParser.ListLabelledPatternContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listLabelledPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListLabelledPattern" ):
                listener.enterListLabelledPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListLabelledPattern" ):
                listener.exitListLabelledPattern(self)




    def listLabelledPattern(self):

        localctx = stellaParser.ListLabelledPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_listLabelledPattern)
        try:
            self.state = 567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 562
                localctx.p_1_1 = self.labelledPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 563
                localctx.p_2_1 = self.labelledPattern()
                self.state = 564
                self.match(stellaParser.Surrogate_id_SYMB_0)
                self.state = 565
                localctx.p_2_3 = self.listLabelledPattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # Token
            self.p_1_3 = None # ExprContext

        def Surrogate_id_SYMB_6(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_6, 0)

        def StellaIdent(self):
            return self.getToken(stellaParser.StellaIdent, 0)

        def expr(self):
            return self.getTypedRuleContext(stellaParser.ExprContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinding" ):
                listener.enterBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinding" ):
                listener.exitBinding(self)




    def binding(self):

        localctx = stellaParser.BindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_binding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            localctx.p_1_1 = self.match(stellaParser.StellaIdent)
            self.state = 570
            self.match(stellaParser.Surrogate_id_SYMB_6)
            self.state = 571
            localctx.p_1_3 = self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListBindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # BindingContext
            self.p_2_1 = None # BindingContext
            self.p_2_3 = None # ListBindingContext

        def binding(self):
            return self.getTypedRuleContext(stellaParser.BindingContext,0)


        def Surrogate_id_SYMB_0(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_0, 0)

        def listBinding(self):
            return self.getTypedRuleContext(stellaParser.ListBindingContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listBinding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListBinding" ):
                listener.enterListBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListBinding" ):
                listener.exitListBinding(self)




    def listBinding(self):

        localctx = stellaParser.ListBindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_listBinding)
        try:
            self.state = 578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 573
                localctx.p_1_1 = self.binding()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 574
                localctx.p_2_1 = self.binding()
                self.state = 575
                self.match(stellaParser.Surrogate_id_SYMB_0)
                self.state = 576
                localctx.p_2_3 = self.listBinding()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # Expr1Context
            self.p_1_3 = None # ExprContext
            self.p_2_1 = None # Expr1Context
            self.p_3_1 = None # Expr1Context

        def Surrogate_id_SYMB_1(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_1, 0)

        def expr1(self):
            return self.getTypedRuleContext(stellaParser.Expr1Context,0)


        def expr(self):
            return self.getTypedRuleContext(stellaParser.ExprContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = stellaParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_expr)
        try:
            self.state = 588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 580
                localctx.p_1_1 = self.expr1()
                self.state = 581
                self.match(stellaParser.Surrogate_id_SYMB_1)
                self.state = 582
                localctx.p_1_3 = self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 584
                localctx.p_2_1 = self.expr1()
                self.state = 585
                self.match(stellaParser.Surrogate_id_SYMB_1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 587
                localctx.p_3_1 = self.expr1()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_2_1 = None # ExprContext
            self.p_3_1 = None # ExprContext
            self.p_3_3 = None # ListExprContext

        def expr(self):
            return self.getTypedRuleContext(stellaParser.ExprContext,0)


        def Surrogate_id_SYMB_0(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_0, 0)

        def listExpr(self):
            return self.getTypedRuleContext(stellaParser.ListExprContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListExpr" ):
                listener.enterListExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListExpr" ):
                listener.exitListExpr(self)




    def listExpr(self):

        localctx = stellaParser.ListExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_listExpr)
        try:
            self.state = 596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 591
                localctx.p_2_1 = self.expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 592
                localctx.p_3_1 = self.expr()
                self.state = 593
                self.match(stellaParser.Surrogate_id_SYMB_0)
                self.state = 594
                localctx.p_3_3 = self.listExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_2 = None # Expr1Context
            self.p_1_4 = None # Expr1Context
            self.p_1_6 = None # Expr1Context
            self.p_2_2 = None # ListPatternBindingContext
            self.p_2_4 = None # Expr1Context
            self.p_3_2 = None # ListPatternBindingContext
            self.p_3_4 = None # Expr1Context
            self.p_4_1 = None # Expr2Context

        def Surrogate_id_SYMB_45(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_45, 0)

        def Surrogate_id_SYMB_58(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_58, 0)

        def Surrogate_id_SYMB_39(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_39, 0)

        def expr1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(stellaParser.Expr1Context)
            else:
                return self.getTypedRuleContext(stellaParser.Expr1Context,i)


        def Surrogate_id_SYMB_51(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_51, 0)

        def Surrogate_id_SYMB_46(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_46, 0)

        def listPatternBinding(self):
            return self.getTypedRuleContext(stellaParser.ListPatternBindingContext,0)


        def Surrogate_id_SYMB_52(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_52, 0)

        def expr2(self):
            return self.getTypedRuleContext(stellaParser.Expr2Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_expr1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr1" ):
                listener.enterExpr1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr1" ):
                listener.exitExpr1(self)




    def expr1(self):

        localctx = stellaParser.Expr1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_expr1)
        try:
            self.state = 616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 598
                self.match(stellaParser.Surrogate_id_SYMB_45)
                self.state = 599
                localctx.p_1_2 = self.expr1()
                self.state = 600
                self.match(stellaParser.Surrogate_id_SYMB_58)
                self.state = 601
                localctx.p_1_4 = self.expr1()
                self.state = 602
                self.match(stellaParser.Surrogate_id_SYMB_39)
                self.state = 603
                localctx.p_1_6 = self.expr1()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 605
                self.match(stellaParser.Surrogate_id_SYMB_51)
                self.state = 606
                localctx.p_2_2 = self.listPatternBinding()
                self.state = 607
                self.match(stellaParser.Surrogate_id_SYMB_46)
                self.state = 608
                localctx.p_2_4 = self.expr1()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 3)
                self.state = 610
                self.match(stellaParser.Surrogate_id_SYMB_52)
                self.state = 611
                localctx.p_3_2 = self.listPatternBinding()
                self.state = 612
                self.match(stellaParser.Surrogate_id_SYMB_46)
                self.state = 613
                localctx.p_3_4 = self.expr1()
                pass
            elif token in [3, 5, 12, 14, 27, 28, 29, 30, 31, 32, 38, 42, 43, 44, 45, 48, 50, 54, 55, 58, 61, 64, 66, 71, 72]:
                self.enterOuterAlt(localctx, 4)
                self.state = 615
                localctx.p_4_1 = self.expr2()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternBindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # PatternContext
            self.p_1_3 = None # ExprContext

        def Surrogate_id_SYMB_6(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_6, 0)

        def pattern(self):
            return self.getTypedRuleContext(stellaParser.PatternContext,0)


        def expr(self):
            return self.getTypedRuleContext(stellaParser.ExprContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_patternBinding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternBinding" ):
                listener.enterPatternBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternBinding" ):
                listener.exitPatternBinding(self)




    def patternBinding(self):

        localctx = stellaParser.PatternBindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_patternBinding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            localctx.p_1_1 = self.pattern()
            self.state = 619
            self.match(stellaParser.Surrogate_id_SYMB_6)
            self.state = 620
            localctx.p_1_3 = self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListPatternBindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # PatternBindingContext
            self.p_2_1 = None # PatternBindingContext
            self.p_2_3 = None # ListPatternBindingContext

        def patternBinding(self):
            return self.getTypedRuleContext(stellaParser.PatternBindingContext,0)


        def Surrogate_id_SYMB_0(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_0, 0)

        def listPatternBinding(self):
            return self.getTypedRuleContext(stellaParser.ListPatternBindingContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listPatternBinding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListPatternBinding" ):
                listener.enterListPatternBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListPatternBinding" ):
                listener.exitListPatternBinding(self)




    def listPatternBinding(self):

        localctx = stellaParser.ListPatternBindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_listPatternBinding)
        try:
            self.state = 627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 622
                localctx.p_1_1 = self.patternBinding()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 623
                localctx.p_2_1 = self.patternBinding()
                self.state = 624
                self.match(stellaParser.Surrogate_id_SYMB_0)
                self.state = 625
                localctx.p_2_3 = self.listPatternBinding()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # Expr3Context
            self.p_1_3 = None # Expr3Context
            self.p_2_1 = None # Expr3Context
            self.p_2_3 = None # Expr3Context
            self.p_3_1 = None # Expr3Context
            self.p_3_3 = None # Expr3Context
            self.p_4_1 = None # Expr3Context
            self.p_4_3 = None # Expr3Context
            self.p_5_1 = None # Expr3Context
            self.p_5_3 = None # Expr3Context
            self.p_6_1 = None # Expr3Context
            self.p_6_3 = None # Expr3Context
            self.p_7_1 = None # Expr3Context

        def Surrogate_id_SYMB_15(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_15, 0)

        def expr3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(stellaParser.Expr3Context)
            else:
                return self.getTypedRuleContext(stellaParser.Expr3Context,i)


        def Surrogate_id_SYMB_16(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_16, 0)

        def Surrogate_id_SYMB_17(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_17, 0)

        def Surrogate_id_SYMB_18(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_18, 0)

        def Surrogate_id_SYMB_19(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_19, 0)

        def Surrogate_id_SYMB_20(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_20, 0)

        def getRuleIndex(self):
            return stellaParser.RULE_expr2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr2" ):
                listener.enterExpr2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr2" ):
                listener.exitExpr2(self)




    def expr2(self):

        localctx = stellaParser.Expr2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_expr2)
        try:
            self.state = 654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 629
                localctx.p_1_1 = self.expr3(0)
                self.state = 630
                self.match(stellaParser.Surrogate_id_SYMB_15)
                self.state = 631
                localctx.p_1_3 = self.expr3(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 633
                localctx.p_2_1 = self.expr3(0)
                self.state = 634
                self.match(stellaParser.Surrogate_id_SYMB_16)
                self.state = 635
                localctx.p_2_3 = self.expr3(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 637
                localctx.p_3_1 = self.expr3(0)
                self.state = 638
                self.match(stellaParser.Surrogate_id_SYMB_17)
                self.state = 639
                localctx.p_3_3 = self.expr3(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 641
                localctx.p_4_1 = self.expr3(0)
                self.state = 642
                self.match(stellaParser.Surrogate_id_SYMB_18)
                self.state = 643
                localctx.p_4_3 = self.expr3(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 645
                localctx.p_5_1 = self.expr3(0)
                self.state = 646
                self.match(stellaParser.Surrogate_id_SYMB_19)
                self.state = 647
                localctx.p_5_3 = self.expr3(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 649
                localctx.p_6_1 = self.expr3(0)
                self.state = 650
                self.match(stellaParser.Surrogate_id_SYMB_20)
                self.state = 651
                localctx.p_6_3 = self.expr3(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 653
                localctx.p_7_1 = self.expr3(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListExpr2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # Expr2Context
            self.p_2_1 = None # Expr2Context
            self.p_2_3 = None # ListExpr2Context

        def Surrogate_id_SYMB_1(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_1, 0)

        def expr2(self):
            return self.getTypedRuleContext(stellaParser.Expr2Context,0)


        def listExpr2(self):
            return self.getTypedRuleContext(stellaParser.ListExpr2Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listExpr2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListExpr2" ):
                listener.enterListExpr2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListExpr2" ):
                listener.exitListExpr2(self)




    def listExpr2(self):

        localctx = stellaParser.ListExpr2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_listExpr2)
        try:
            self.state = 663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 656
                localctx.p_1_1 = self.expr2()
                self.state = 657
                self.match(stellaParser.Surrogate_id_SYMB_1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                localctx.p_2_1 = self.expr2()
                self.state = 660
                self.match(stellaParser.Surrogate_id_SYMB_1)
                self.state = 661
                localctx.p_2_3 = self.listExpr2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # Expr3Context
            self.p_6_1 = None # Expr3Context
            self.p_7_1 = None # Expr3Context
            self.p_8_1 = None # Expr3Context
            self.p_2_3 = None # ListParamDeclContext
            self.p_2_7 = None # ExprContext
            self.p_3_2 = None # Token
            self.p_3_3 = None # ExprDataContext
            self.p_4_2 = None # Expr2Context
            self.p_4_4 = None # ListMatchCaseContext
            self.p_5_2 = None # ListExprContext
            self.p_9_1 = None # Expr4Context
            self.p_1_3 = None # Type2Context
            self.p_6_3 = None # Expr4Context
            self.p_7_3 = None # Expr4Context
            self.p_8_3 = None # Expr4Context

        def Surrogate_id_SYMB_43(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_43, 0)

        def Surrogate_id_SYMB_2(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_2, 0)

        def Surrogate_id_SYMB_3(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_3, 0)

        def Surrogate_id_SYMB_4(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_4, 0)

        def Surrogate_id_SYMB_56(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_56, 0)

        def Surrogate_id_SYMB_5(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_5, 0)

        def listParamDecl(self):
            return self.getTypedRuleContext(stellaParser.ListParamDeclContext,0)


        def expr(self):
            return self.getTypedRuleContext(stellaParser.ExprContext,0)


        def Surrogate_id_SYMB_11(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_11, 0)

        def Surrogate_id_SYMB_12(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_12, 0)

        def StellaIdent(self):
            return self.getToken(stellaParser.StellaIdent, 0)

        def exprData(self):
            return self.getTypedRuleContext(stellaParser.ExprDataContext,0)


        def Surrogate_id_SYMB_53(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_53, 0)

        def expr2(self):
            return self.getTypedRuleContext(stellaParser.Expr2Context,0)


        def listMatchCase(self):
            return self.getTypedRuleContext(stellaParser.ListMatchCaseContext,0)


        def Surrogate_id_SYMB_13(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_13, 0)

        def Surrogate_id_SYMB_14(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_14, 0)

        def listExpr(self):
            return self.getTypedRuleContext(stellaParser.ListExprContext,0)


        def expr4(self):
            return self.getTypedRuleContext(stellaParser.Expr4Context,0)


        def Surrogate_id_SYMB_36(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_36, 0)

        def expr3(self):
            return self.getTypedRuleContext(stellaParser.Expr3Context,0)


        def type2(self):
            return self.getTypedRuleContext(stellaParser.Type2Context,0)


        def Surrogate_id_SYMB_21(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_21, 0)

        def Surrogate_id_SYMB_22(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_22, 0)

        def Surrogate_id_SYMB_55(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_55, 0)

        def getRuleIndex(self):
            return stellaParser.RULE_expr3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr3" ):
                listener.enterExpr3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr3" ):
                listener.exitExpr3(self)



    def expr3(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = stellaParser.Expr3Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 174
        self.enterRecursionRule(localctx, 174, self.RULE_expr3, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.state = 666
                self.match(stellaParser.Surrogate_id_SYMB_43)
                self.state = 667
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 668
                localctx.p_2_3 = self.listParamDecl()
                self.state = 669
                self.match(stellaParser.Surrogate_id_SYMB_3)
                self.state = 670
                self.match(stellaParser.Surrogate_id_SYMB_4)
                self.state = 671
                self.match(stellaParser.Surrogate_id_SYMB_56)
                self.state = 672
                localctx.p_2_7 = self.expr()
                self.state = 673
                self.match(stellaParser.Surrogate_id_SYMB_5)
                pass
            elif token in [12]:
                self.state = 675
                self.match(stellaParser.Surrogate_id_SYMB_11)
                self.state = 676
                localctx.p_3_2 = self.match(stellaParser.StellaIdent)
                self.state = 677
                localctx.p_3_3 = self.exprData()
                self.state = 678
                self.match(stellaParser.Surrogate_id_SYMB_12)
                pass
            elif token in [54]:
                self.state = 680
                self.match(stellaParser.Surrogate_id_SYMB_53)
                self.state = 681
                localctx.p_4_2 = self.expr2()
                self.state = 682
                self.match(stellaParser.Surrogate_id_SYMB_4)
                self.state = 683
                localctx.p_4_4 = self.listMatchCase()
                self.state = 684
                self.match(stellaParser.Surrogate_id_SYMB_5)
                pass
            elif token in [14]:
                self.state = 686
                self.match(stellaParser.Surrogate_id_SYMB_13)
                self.state = 687
                localctx.p_5_2 = self.listExpr()
                self.state = 688
                self.match(stellaParser.Surrogate_id_SYMB_14)
                pass
            elif token in [3, 5, 27, 28, 29, 30, 31, 32, 38, 42, 43, 45, 48, 50, 55, 58, 61, 64, 66, 71, 72]:
                self.state = 690
                localctx.p_9_1 = self.expr4(0)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 707
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 705
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                    if la_ == 1:
                        localctx = stellaParser.Expr3Context(self, _parentctx, _parentState)
                        localctx.p_1_1 = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr3)
                        self.state = 693
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 694
                        self.match(stellaParser.Surrogate_id_SYMB_36)
                        self.state = 695
                        localctx.p_1_3 = self.type2()
                        pass

                    elif la_ == 2:
                        localctx = stellaParser.Expr3Context(self, _parentctx, _parentState)
                        localctx.p_6_1 = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr3)
                        self.state = 696
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 697
                        self.match(stellaParser.Surrogate_id_SYMB_21)
                        self.state = 698
                        localctx.p_6_3 = self.expr4(0)
                        pass

                    elif la_ == 3:
                        localctx = stellaParser.Expr3Context(self, _parentctx, _parentState)
                        localctx.p_7_1 = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr3)
                        self.state = 699
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 700
                        self.match(stellaParser.Surrogate_id_SYMB_22)
                        self.state = 701
                        localctx.p_7_3 = self.expr4(0)
                        pass

                    elif la_ == 4:
                        localctx = stellaParser.Expr3Context(self, _parentctx, _parentState)
                        localctx.p_8_1 = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr3)
                        self.state = 702
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 703
                        self.match(stellaParser.Surrogate_id_SYMB_55)
                        self.state = 704
                        localctx.p_8_3 = self.expr4(0)
                        pass

             
                self.state = 709
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expr4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # Expr4Context
            self.p_2_1 = None # Expr4Context
            self.p_3_1 = None # Expr4Context
            self.p_4_1 = None # Expr5Context
            self.p_1_3 = None # Expr5Context
            self.p_2_3 = None # Expr5Context
            self.p_3_3 = None # Expr5Context

        def expr5(self):
            return self.getTypedRuleContext(stellaParser.Expr5Context,0)


        def Surrogate_id_SYMB_23(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_23, 0)

        def expr4(self):
            return self.getTypedRuleContext(stellaParser.Expr4Context,0)


        def Surrogate_id_SYMB_24(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_24, 0)

        def Surrogate_id_SYMB_35(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_35, 0)

        def getRuleIndex(self):
            return stellaParser.RULE_expr4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr4" ):
                listener.enterExpr4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr4" ):
                listener.exitExpr4(self)



    def expr4(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = stellaParser.Expr4Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 176
        self.enterRecursionRule(localctx, 176, self.RULE_expr4, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            localctx.p_4_1 = self.expr5()
            self._ctx.stop = self._input.LT(-1)
            self.state = 724
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 722
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                    if la_ == 1:
                        localctx = stellaParser.Expr4Context(self, _parentctx, _parentState)
                        localctx.p_1_1 = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr4)
                        self.state = 713
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 714
                        self.match(stellaParser.Surrogate_id_SYMB_23)
                        self.state = 715
                        localctx.p_1_3 = self.expr5()
                        pass

                    elif la_ == 2:
                        localctx = stellaParser.Expr4Context(self, _parentctx, _parentState)
                        localctx.p_2_1 = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr4)
                        self.state = 716
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 717
                        self.match(stellaParser.Surrogate_id_SYMB_24)
                        self.state = 718
                        localctx.p_2_3 = self.expr5()
                        pass

                    elif la_ == 3:
                        localctx = stellaParser.Expr4Context(self, _parentctx, _parentState)
                        localctx.p_3_1 = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr4)
                        self.state = 719
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 720
                        self.match(stellaParser.Surrogate_id_SYMB_35)
                        self.state = 721
                        localctx.p_3_3 = self.expr5()
                        pass

             
                self.state = 726
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expr6Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # Expr6Context
            self.p_2_1 = None # Expr6Context
            self.p_3_1 = None # Expr6Context
            self.p_4_2 = None # ListExprContext
            self.p_5_2 = None # ListBindingContext
            self.p_6_3 = None # ExprContext
            self.p_6_5 = None # ExprContext
            self.p_7_3 = None # ExprContext
            self.p_8_3 = None # ExprContext
            self.p_9_3 = None # ExprContext
            self.p_10_3 = None # ExprContext
            self.p_11_3 = None # ExprContext
            self.p_12_3 = None # ExprContext
            self.p_13_3 = None # ExprContext
            self.p_14_3 = None # ExprContext
            self.p_15_3 = None # ExprContext
            self.p_16_3 = None # ExprContext
            self.p_17_3 = None # ExprContext
            self.p_17_5 = None # ExprContext
            self.p_17_7 = None # ExprContext
            self.p_18_3 = None # TypeContext
            self.p_18_5 = None # Expr7Context
            self.p_19_3 = None # TypeContext
            self.p_19_5 = None # Expr7Context
            self.p_20_1 = None # Expr7Context
            self.p_1_3 = None # ListExprContext
            self.p_2_3 = None # Token
            self.p_3_3 = None # Token

        def Surrogate_id_SYMB_4(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_4, 0)

        def Surrogate_id_SYMB_5(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_5, 0)

        def listExpr(self):
            return self.getTypedRuleContext(stellaParser.ListExprContext,0)


        def listBinding(self):
            return self.getTypedRuleContext(stellaParser.ListBindingContext,0)


        def Surrogate_id_SYMB_37(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_37, 0)

        def Surrogate_id_SYMB_2(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_2, 0)

        def Surrogate_id_SYMB_0(self, i:int=None):
            if i is None:
                return self.getTokens(stellaParser.Surrogate_id_SYMB_0)
            else:
                return self.getToken(stellaParser.Surrogate_id_SYMB_0, i)

        def Surrogate_id_SYMB_3(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_3, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(stellaParser.ExprContext)
            else:
                return self.getTypedRuleContext(stellaParser.ExprContext,i)


        def Surrogate_id_SYMB_26(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_26, 0)

        def Surrogate_id_SYMB_27(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_27, 0)

        def Surrogate_id_SYMB_28(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_28, 0)

        def Surrogate_id_SYMB_47(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_47, 0)

        def Surrogate_id_SYMB_49(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_49, 0)

        def Surrogate_id_SYMB_57(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_57, 0)

        def Surrogate_id_SYMB_54(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_54, 0)

        def Surrogate_id_SYMB_29(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_29, 0)

        def Surrogate_id_SYMB_30(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_30, 0)

        def Surrogate_id_SYMB_42(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_42, 0)

        def Surrogate_id_SYMB_31(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_31, 0)

        def Surrogate_id_SYMB_44(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_44, 0)

        def Surrogate_id_SYMB_13(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_13, 0)

        def Surrogate_id_SYMB_14(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_14, 0)

        def type_(self):
            return self.getTypedRuleContext(stellaParser.TypeContext,0)


        def expr7(self):
            return self.getTypedRuleContext(stellaParser.Expr7Context,0)


        def Surrogate_id_SYMB_62(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_62, 0)

        def expr6(self):
            return self.getTypedRuleContext(stellaParser.Expr6Context,0)


        def Surrogate_id_SYMB_25(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_25, 0)

        def StellaIdent(self):
            return self.getToken(stellaParser.StellaIdent, 0)

        def INTEGER(self):
            return self.getToken(stellaParser.INTEGER, 0)

        def getRuleIndex(self):
            return stellaParser.RULE_expr6

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr6" ):
                listener.enterExpr6(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr6" ):
                listener.exitExpr6(self)



    def expr6(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = stellaParser.Expr6Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 178
        self.enterRecursionRule(localctx, 178, self.RULE_expr6, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 728
                self.match(stellaParser.Surrogate_id_SYMB_4)
                self.state = 729
                localctx.p_4_2 = self.listExpr()
                self.state = 730
                self.match(stellaParser.Surrogate_id_SYMB_5)
                pass

            elif la_ == 2:
                self.state = 732
                self.match(stellaParser.Surrogate_id_SYMB_4)
                self.state = 733
                localctx.p_5_2 = self.listBinding()
                self.state = 734
                self.match(stellaParser.Surrogate_id_SYMB_5)
                pass

            elif la_ == 3:
                self.state = 736
                self.match(stellaParser.Surrogate_id_SYMB_37)
                self.state = 737
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 738
                localctx.p_6_3 = self.expr()
                self.state = 739
                self.match(stellaParser.Surrogate_id_SYMB_0)
                self.state = 740
                localctx.p_6_5 = self.expr()
                self.state = 741
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass

            elif la_ == 4:
                self.state = 743
                self.match(stellaParser.Surrogate_id_SYMB_26)
                self.state = 744
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 745
                localctx.p_7_3 = self.expr()
                self.state = 746
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass

            elif la_ == 5:
                self.state = 748
                self.match(stellaParser.Surrogate_id_SYMB_27)
                self.state = 749
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 750
                localctx.p_8_3 = self.expr()
                self.state = 751
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass

            elif la_ == 6:
                self.state = 753
                self.match(stellaParser.Surrogate_id_SYMB_28)
                self.state = 754
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 755
                localctx.p_9_3 = self.expr()
                self.state = 756
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass

            elif la_ == 7:
                self.state = 758
                self.match(stellaParser.Surrogate_id_SYMB_47)
                self.state = 759
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 760
                localctx.p_10_3 = self.expr()
                self.state = 761
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass

            elif la_ == 8:
                self.state = 763
                self.match(stellaParser.Surrogate_id_SYMB_49)
                self.state = 764
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 765
                localctx.p_11_3 = self.expr()
                self.state = 766
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass

            elif la_ == 9:
                self.state = 768
                self.match(stellaParser.Surrogate_id_SYMB_57)
                self.state = 769
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 770
                localctx.p_12_3 = self.expr()
                self.state = 771
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass

            elif la_ == 10:
                self.state = 773
                self.match(stellaParser.Surrogate_id_SYMB_54)
                self.state = 774
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 775
                localctx.p_13_3 = self.expr()
                self.state = 776
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass

            elif la_ == 11:
                self.state = 778
                self.match(stellaParser.Surrogate_id_SYMB_29)
                self.state = 779
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 780
                localctx.p_14_3 = self.expr()
                self.state = 781
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass

            elif la_ == 12:
                self.state = 783
                self.match(stellaParser.Surrogate_id_SYMB_30)
                self.state = 784
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 785
                localctx.p_15_3 = self.expr()
                self.state = 786
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass

            elif la_ == 13:
                self.state = 788
                self.match(stellaParser.Surrogate_id_SYMB_42)
                self.state = 789
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 790
                localctx.p_16_3 = self.expr()
                self.state = 791
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass

            elif la_ == 14:
                self.state = 793
                self.match(stellaParser.Surrogate_id_SYMB_31)
                self.state = 794
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 795
                localctx.p_17_3 = self.expr()
                self.state = 796
                self.match(stellaParser.Surrogate_id_SYMB_0)
                self.state = 797
                localctx.p_17_5 = self.expr()
                self.state = 798
                self.match(stellaParser.Surrogate_id_SYMB_0)
                self.state = 799
                localctx.p_17_7 = self.expr()
                self.state = 800
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass

            elif la_ == 15:
                self.state = 802
                self.match(stellaParser.Surrogate_id_SYMB_44)
                self.state = 803
                self.match(stellaParser.Surrogate_id_SYMB_13)
                self.state = 804
                localctx.p_18_3 = self.type_()
                self.state = 805
                self.match(stellaParser.Surrogate_id_SYMB_14)
                self.state = 806
                localctx.p_18_5 = self.expr7()
                pass

            elif la_ == 16:
                self.state = 808
                self.match(stellaParser.Surrogate_id_SYMB_62)
                self.state = 809
                self.match(stellaParser.Surrogate_id_SYMB_13)
                self.state = 810
                localctx.p_19_3 = self.type_()
                self.state = 811
                self.match(stellaParser.Surrogate_id_SYMB_14)
                self.state = 812
                localctx.p_19_5 = self.expr7()
                pass

            elif la_ == 17:
                self.state = 814
                localctx.p_20_1 = self.expr7()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 830
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 828
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                    if la_ == 1:
                        localctx = stellaParser.Expr6Context(self, _parentctx, _parentState)
                        localctx.p_1_1 = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr6)
                        self.state = 817
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 818
                        self.match(stellaParser.Surrogate_id_SYMB_2)
                        self.state = 819
                        localctx.p_1_3 = self.listExpr()
                        self.state = 820
                        self.match(stellaParser.Surrogate_id_SYMB_3)
                        pass

                    elif la_ == 2:
                        localctx = stellaParser.Expr6Context(self, _parentctx, _parentState)
                        localctx.p_2_1 = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr6)
                        self.state = 822
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 823
                        self.match(stellaParser.Surrogate_id_SYMB_25)
                        self.state = 824
                        localctx.p_2_3 = self.match(stellaParser.StellaIdent)
                        pass

                    elif la_ == 3:
                        localctx = stellaParser.Expr6Context(self, _parentctx, _parentState)
                        localctx.p_3_1 = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr6)
                        self.state = 825
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 826
                        self.match(stellaParser.Surrogate_id_SYMB_25)
                        self.state = 827
                        localctx.p_3_3 = self.match(stellaParser.INTEGER)
                        pass

             
                self.state = 832
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expr7Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_4_1 = None # Token
            self.p_5_1 = None # Token
            self.p_6_2 = None # ExprContext

        def Surrogate_id_SYMB_60(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_60, 0)

        def Surrogate_id_SYMB_41(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_41, 0)

        def Surrogate_id_SYMB_63(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_63, 0)

        def INTEGER(self):
            return self.getToken(stellaParser.INTEGER, 0)

        def StellaIdent(self):
            return self.getToken(stellaParser.StellaIdent, 0)

        def Surrogate_id_SYMB_2(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_2, 0)

        def Surrogate_id_SYMB_3(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_3, 0)

        def expr(self):
            return self.getTypedRuleContext(stellaParser.ExprContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_expr7

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr7" ):
                listener.enterExpr7(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr7" ):
                listener.exitExpr7(self)




    def expr7(self):

        localctx = stellaParser.Expr7Context(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_expr7)
        try:
            self.state = 842
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.enterOuterAlt(localctx, 1)
                self.state = 833
                self.match(stellaParser.Surrogate_id_SYMB_60)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 834
                self.match(stellaParser.Surrogate_id_SYMB_41)
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 3)
                self.state = 835
                self.match(stellaParser.Surrogate_id_SYMB_63)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 4)
                self.state = 836
                localctx.p_4_1 = self.match(stellaParser.INTEGER)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 5)
                self.state = 837
                localctx.p_5_1 = self.match(stellaParser.StellaIdent)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 6)
                self.state = 838
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 839
                localctx.p_6_2 = self.expr()
                self.state = 840
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_3 = None # ListTypeContext
            self.p_1_6 = None # TypeContext
            self.p_2_2 = None # Token
            self.p_2_4 = None # TypeContext
            self.p_3_1 = None # Type1Context

        def Surrogate_id_SYMB_43(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_43, 0)

        def Surrogate_id_SYMB_2(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_2, 0)

        def Surrogate_id_SYMB_3(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_3, 0)

        def Surrogate_id_SYMB_8(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_8, 0)

        def listType(self):
            return self.getTypedRuleContext(stellaParser.ListTypeContext,0)


        def type_(self):
            return self.getTypedRuleContext(stellaParser.TypeContext,0)


        def Surrogate_id_SYMB_65(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_65, 0)

        def Surrogate_id_SYMB_25(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_25, 0)

        def StellaIdent(self):
            return self.getToken(stellaParser.StellaIdent, 0)

        def type1(self):
            return self.getTypedRuleContext(stellaParser.Type1Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type_(self):

        localctx = stellaParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_type)
        try:
            self.state = 856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 844
                self.match(stellaParser.Surrogate_id_SYMB_43)
                self.state = 845
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 846
                localctx.p_1_3 = self.listType()
                self.state = 847
                self.match(stellaParser.Surrogate_id_SYMB_3)
                self.state = 848
                self.match(stellaParser.Surrogate_id_SYMB_8)
                self.state = 849
                localctx.p_1_6 = self.type_()
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 851
                self.match(stellaParser.Surrogate_id_SYMB_65)
                self.state = 852
                localctx.p_2_2 = self.match(stellaParser.StellaIdent)
                self.state = 853
                self.match(stellaParser.Surrogate_id_SYMB_25)
                self.state = 854
                localctx.p_2_4 = self.type_()
                pass
            elif token in [3, 5, 12, 14, 33, 34, 35, 64]:
                self.enterOuterAlt(localctx, 3)
                self.state = 855
                localctx.p_3_1 = self.type1()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # Type2Context
            self.p_1_3 = None # Type2Context
            self.p_2_1 = None # Type2Context

        def Surrogate_id_SYMB_21(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_21, 0)

        def type2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(stellaParser.Type2Context)
            else:
                return self.getTypedRuleContext(stellaParser.Type2Context,i)


        def getRuleIndex(self):
            return stellaParser.RULE_type1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType1" ):
                listener.enterType1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType1" ):
                listener.exitType1(self)




    def type1(self):

        localctx = stellaParser.Type1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_type1)
        try:
            self.state = 863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 858
                localctx.p_1_1 = self.type2()
                self.state = 859
                self.match(stellaParser.Surrogate_id_SYMB_21)
                self.state = 860
                localctx.p_1_3 = self.type2()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 862
                localctx.p_2_1 = self.type2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_2 = None # ListTypeContext
            self.p_2_2 = None # ListRecordFieldTypeContext
            self.p_3_2 = None # ListVariantFieldTypeContext
            self.p_4_2 = None # TypeContext
            self.p_5_1 = None # Type3Context

        def Surrogate_id_SYMB_4(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_4, 0)

        def Surrogate_id_SYMB_5(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_5, 0)

        def listType(self):
            return self.getTypedRuleContext(stellaParser.ListTypeContext,0)


        def listRecordFieldType(self):
            return self.getTypedRuleContext(stellaParser.ListRecordFieldTypeContext,0)


        def Surrogate_id_SYMB_11(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_11, 0)

        def Surrogate_id_SYMB_12(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_12, 0)

        def listVariantFieldType(self):
            return self.getTypedRuleContext(stellaParser.ListVariantFieldTypeContext,0)


        def Surrogate_id_SYMB_13(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_13, 0)

        def Surrogate_id_SYMB_14(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_14, 0)

        def type_(self):
            return self.getTypedRuleContext(stellaParser.TypeContext,0)


        def type3(self):
            return self.getTypedRuleContext(stellaParser.Type3Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_type2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType2" ):
                listener.enterType2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType2" ):
                listener.exitType2(self)




    def type2(self):

        localctx = stellaParser.Type2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_type2)
        try:
            self.state = 882
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 865
                self.match(stellaParser.Surrogate_id_SYMB_4)
                self.state = 866
                localctx.p_1_2 = self.listType()
                self.state = 867
                self.match(stellaParser.Surrogate_id_SYMB_5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 869
                self.match(stellaParser.Surrogate_id_SYMB_4)
                self.state = 870
                localctx.p_2_2 = self.listRecordFieldType()
                self.state = 871
                self.match(stellaParser.Surrogate_id_SYMB_5)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 873
                self.match(stellaParser.Surrogate_id_SYMB_11)
                self.state = 874
                localctx.p_3_2 = self.listVariantFieldType()
                self.state = 875
                self.match(stellaParser.Surrogate_id_SYMB_12)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 877
                self.match(stellaParser.Surrogate_id_SYMB_13)
                self.state = 878
                localctx.p_4_2 = self.type_()
                self.state = 879
                self.match(stellaParser.Surrogate_id_SYMB_14)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 881
                localctx.p_5_1 = self.type3()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_4_1 = None # Token
            self.p_5_2 = None # TypeContext

        def Surrogate_id_SYMB_32(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_32, 0)

        def Surrogate_id_SYMB_33(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_33, 0)

        def Surrogate_id_SYMB_34(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_34, 0)

        def StellaIdent(self):
            return self.getToken(stellaParser.StellaIdent, 0)

        def Surrogate_id_SYMB_2(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_2, 0)

        def Surrogate_id_SYMB_3(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_3, 0)

        def type_(self):
            return self.getTypedRuleContext(stellaParser.TypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_type3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType3" ):
                listener.enterType3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType3" ):
                listener.exitType3(self)




    def type3(self):

        localctx = stellaParser.Type3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_type3)
        try:
            self.state = 892
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [33]:
                self.enterOuterAlt(localctx, 1)
                self.state = 884
                self.match(stellaParser.Surrogate_id_SYMB_32)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 885
                self.match(stellaParser.Surrogate_id_SYMB_33)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 3)
                self.state = 886
                self.match(stellaParser.Surrogate_id_SYMB_34)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 4)
                self.state = 887
                localctx.p_4_1 = self.match(stellaParser.StellaIdent)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 5)
                self.state = 888
                self.match(stellaParser.Surrogate_id_SYMB_2)
                self.state = 889
                localctx.p_5_2 = self.type_()
                self.state = 890
                self.match(stellaParser.Surrogate_id_SYMB_3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_2_1 = None # TypeContext
            self.p_3_1 = None # TypeContext
            self.p_3_3 = None # ListTypeContext

        def type_(self):
            return self.getTypedRuleContext(stellaParser.TypeContext,0)


        def Surrogate_id_SYMB_0(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_0, 0)

        def listType(self):
            return self.getTypedRuleContext(stellaParser.ListTypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListType" ):
                listener.enterListType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListType" ):
                listener.exitListType(self)




    def listType(self):

        localctx = stellaParser.ListTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_listType)
        try:
            self.state = 900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 895
                localctx.p_2_1 = self.type_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 896
                localctx.p_3_1 = self.type_()
                self.state = 897
                self.match(stellaParser.Surrogate_id_SYMB_0)
                self.state = 898
                localctx.p_3_3 = self.listType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr5Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # Expr6Context

        def expr6(self):
            return self.getTypedRuleContext(stellaParser.Expr6Context,0)


        def getRuleIndex(self):
            return stellaParser.RULE_expr5

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr5" ):
                listener.enterExpr5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr5" ):
                listener.exitExpr5(self)




    def expr5(self):

        localctx = stellaParser.Expr5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_expr5)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            localctx.p_1_1 = self.expr6(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariantFieldTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # Token
            self.p_1_2 = None # OptionalTypingContext

        def StellaIdent(self):
            return self.getToken(stellaParser.StellaIdent, 0)

        def optionalTyping(self):
            return self.getTypedRuleContext(stellaParser.OptionalTypingContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_variantFieldType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariantFieldType" ):
                listener.enterVariantFieldType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariantFieldType" ):
                listener.exitVariantFieldType(self)




    def variantFieldType(self):

        localctx = stellaParser.VariantFieldTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_variantFieldType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            localctx.p_1_1 = self.match(stellaParser.StellaIdent)
            self.state = 905
            localctx.p_1_2 = self.optionalTyping()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListVariantFieldTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_2_1 = None # VariantFieldTypeContext
            self.p_3_1 = None # VariantFieldTypeContext
            self.p_3_3 = None # ListVariantFieldTypeContext

        def variantFieldType(self):
            return self.getTypedRuleContext(stellaParser.VariantFieldTypeContext,0)


        def Surrogate_id_SYMB_0(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_0, 0)

        def listVariantFieldType(self):
            return self.getTypedRuleContext(stellaParser.ListVariantFieldTypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listVariantFieldType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListVariantFieldType" ):
                listener.enterListVariantFieldType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListVariantFieldType" ):
                listener.exitListVariantFieldType(self)




    def listVariantFieldType(self):

        localctx = stellaParser.ListVariantFieldTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_listVariantFieldType)
        try:
            self.state = 913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 908
                localctx.p_2_1 = self.variantFieldType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 909
                localctx.p_3_1 = self.variantFieldType()
                self.state = 910
                self.match(stellaParser.Surrogate_id_SYMB_0)
                self.state = 911
                localctx.p_3_3 = self.listVariantFieldType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordFieldTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # Token
            self.p_1_3 = None # TypeContext

        def Surrogate_id_SYMB_7(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_7, 0)

        def StellaIdent(self):
            return self.getToken(stellaParser.StellaIdent, 0)

        def type_(self):
            return self.getTypedRuleContext(stellaParser.TypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_recordFieldType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordFieldType" ):
                listener.enterRecordFieldType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordFieldType" ):
                listener.exitRecordFieldType(self)




    def recordFieldType(self):

        localctx = stellaParser.RecordFieldTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_recordFieldType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            localctx.p_1_1 = self.match(stellaParser.StellaIdent)
            self.state = 916
            self.match(stellaParser.Surrogate_id_SYMB_7)
            self.state = 917
            localctx.p_1_3 = self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListRecordFieldTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # RecordFieldTypeContext
            self.p_2_1 = None # RecordFieldTypeContext
            self.p_2_3 = None # ListRecordFieldTypeContext

        def recordFieldType(self):
            return self.getTypedRuleContext(stellaParser.RecordFieldTypeContext,0)


        def Surrogate_id_SYMB_0(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_0, 0)

        def listRecordFieldType(self):
            return self.getTypedRuleContext(stellaParser.ListRecordFieldTypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_listRecordFieldType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListRecordFieldType" ):
                listener.enterListRecordFieldType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListRecordFieldType" ):
                listener.exitListRecordFieldType(self)




    def listRecordFieldType(self):

        localctx = stellaParser.ListRecordFieldTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_listRecordFieldType)
        try:
            self.state = 924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 919
                localctx.p_1_1 = self.recordFieldType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                localctx.p_2_1 = self.recordFieldType()
                self.state = 921
                self.match(stellaParser.Surrogate_id_SYMB_0)
                self.state = 922
                localctx.p_2_3 = self.listRecordFieldType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.result = None
            self.p_1_1 = None # ExprContext
            self.p_1_3 = None # TypeContext

        def Surrogate_id_SYMB_7(self):
            return self.getToken(stellaParser.Surrogate_id_SYMB_7, 0)

        def expr(self):
            return self.getTypedRuleContext(stellaParser.ExprContext,0)


        def type_(self):
            return self.getTypedRuleContext(stellaParser.TypeContext,0)


        def getRuleIndex(self):
            return stellaParser.RULE_typing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTyping" ):
                listener.enterTyping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTyping" ):
                listener.exitTyping(self)




    def typing(self):

        localctx = stellaParser.TypingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_typing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            localctx.p_1_1 = self.expr()
            self.state = 927
            self.match(stellaParser.Surrogate_id_SYMB_7)
            self.state = 928
            localctx.p_1_3 = self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[56] = self.listExtension_sempred
        self._predicates[58] = self.listDecl_sempred
        self._predicates[60] = self.listLocalDecl_sempred
        self._predicates[62] = self.listAnnotation_sempred
        self._predicates[87] = self.expr3_sempred
        self._predicates[88] = self.expr4_sempred
        self._predicates[89] = self.expr6_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def listExtension_sempred(self, localctx:ListExtensionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def listDecl_sempred(self, localctx:ListDeclContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def listLocalDecl_sempred(self, localctx:ListLocalDeclContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def listAnnotation_sempred(self, localctx:ListAnnotationContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def expr3_sempred(self, localctx:Expr3Context, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def expr4_sempred(self, localctx:Expr4Context, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

    def expr6_sempred(self, localctx:Expr6Context, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 18)
         




